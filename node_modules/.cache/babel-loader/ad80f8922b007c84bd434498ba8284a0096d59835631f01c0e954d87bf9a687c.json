{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\MatrixCipher.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MatrixCipher({\n  ongetInfo\n}) {\n  _s();\n  function createMatrix(text, numCols) {\n    const numRows = Math.ceil(text.length / numCols);\n    const matrix = new Array(numRows).fill('').map(() => new Array(numCols).fill(''));\n    let index = 0;\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numCols; col++) {\n        if (index < text.length) {\n          matrix[row][col] = text[index++];\n        } else {\n          matrix[row][col] = ' ';\n        }\n      }\n    }\n    return matrix;\n  }\n  function encode(plaintext, numCols) {\n    plaintext = plaintext.replace(/\\s+/g, '').toUpperCase();\n    const matrix = createMatrix(plaintext, numCols);\n    const numRows = matrix.length;\n    let ciphertext = '';\n    for (let col = 0; col < numCols; col++) {\n      for (let row = 0; row < numRows; row++) {\n        ciphertext += matrix[row][col];\n      }\n    }\n    return ciphertext;\n  }\n  function decode(ciphertext, numCols) {\n    const numRows = Math.ceil(ciphertext.length / numCols);\n    const numExtraSpaces = numCols * numRows - ciphertext.length;\n    const numColsWithExtraSpaces = numCols - numExtraSpaces;\n    const matrix = new Array(numRows).fill('').map(() => new Array(numCols).fill(''));\n    let index = 0;\n    for (let col = 0; col < numCols; col++) {\n      for (let row = 0; row < numRows; row++) {\n        if (col < numColsWithExtraSpaces || row < numRows - 1) {\n          if (index < ciphertext.length) {\n            matrix[row][col] = ciphertext[index++];\n          }\n        }\n      }\n    }\n    let plaintext = '';\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numCols; col++) {\n        if (matrix[row][col] !== ' ') {\n          plaintext += matrix[row][col];\n        }\n      }\n    }\n    return plaintext.trim();\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. Each character in the plaintext is replaced with its corresponding ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, convert each character in the plaintext to its ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves converting each ASCII value back to its corresponding character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 1\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 14\n  }, this);\n}\n_s(MatrixCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MatrixCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"MatrixCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","MatrixCipher","ongetInfo","_s","createMatrix","text","numCols","numRows","Math","ceil","length","matrix","Array","fill","map","index","row","col","encode","plaintext","replace","toUpperCase","ciphertext","decode","numExtraSpaces","numColsWithExtraSpaces","trim","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/MatrixCipher.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\n\r\nexport default function MatrixCipher({ongetInfo}) {\r\n\r\n    function createMatrix(text, numCols) {\r\n        const numRows = Math.ceil(text.length / numCols);\r\n        const matrix = new Array(numRows).fill('').map(() => new Array(numCols).fill(''));\r\n    \r\n        let index = 0;\r\n        for (let row = 0; row < numRows; row++) {\r\n            for (let col = 0; col < numCols; col++) {\r\n                if (index < text.length) {\r\n                    matrix[row][col] = text[index++];\r\n                } else {\r\n                    matrix[row][col] = ' ';\r\n                }\r\n            }\r\n        }\r\n    \r\n        return matrix;\r\n    }\r\n    \r\n    function encode(plaintext, numCols) {\r\n        plaintext = plaintext.replace(/\\s+/g, '').toUpperCase();\r\n        const matrix = createMatrix(plaintext, numCols);\r\n        const numRows = matrix.length;\r\n        let ciphertext = '';\r\n    \r\n        for (let col = 0; col < numCols; col++) {\r\n            for (let row = 0; row < numRows; row++) {\r\n                ciphertext += matrix[row][col];\r\n            }\r\n        }\r\n    \r\n        return ciphertext;\r\n    }\r\n    \r\n  \r\n    function decode(ciphertext, numCols) {\r\n        const numRows = Math.ceil(ciphertext.length / numCols);\r\n        const numExtraSpaces = numCols * numRows - ciphertext.length;\r\n        const numColsWithExtraSpaces = numCols - numExtraSpaces;\r\n    \r\n        const matrix = new Array(numRows).fill('').map(() => new Array(numCols).fill(''));\r\n        let index = 0;\r\n    \r\n        for (let col = 0; col < numCols; col++) {\r\n            for (let row = 0; row < numRows; row++) {\r\n                if (col < numColsWithExtraSpaces || row < numRows - 1) {\r\n                    if (index < ciphertext.length) {\r\n                        matrix[row][col] = ciphertext[index++];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        let plaintext = '';\r\n        for (let row = 0; row < numRows; row++) {\r\n            for (let col = 0; col < numCols; col++) {\r\n                if (matrix[row][col] !== ' ') {\r\n                    plaintext += matrix[row][col];\r\n                }\r\n            }\r\n        }\r\n    \r\n        return plaintext.trim();\r\n    }\r\n          \r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\n                The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. \r\n                Each character in the plaintext is replaced with its corresponding ASCII value.\r\n            </p>\r\n            <p>\r\n                To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\r\n            </p>\r\n            <ul>\r\n                <li>Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.</li>\r\n                <li>ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.</li>\r\n                <li>Encryption: To encrypt, convert each character in the plaintext to its ASCII value.</li>\r\n                <li>Decryption: Decryption involves converting each ASCII value back to its corresponding character.</li>\r\n                <li>Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.</li>\r\n            </ul>\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []);\r\n\r\n      return <CipherFactory encode={encode} decode={decode} keyComponentA={1}/>\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}