{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\AMSCO.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CipherAscii({\n  ongetInfo\n}) {\n  _s();\n  // Function to generate the transposition grid based on the keyword\n  function generateGrid(keyword) {\n    if (!keyword) {\n      return null; // Ensure a keyword is provided\n    }\n\n    // Sort the keyword alphabetically to determine the column order\n    let sortedKeyword = keyword.split('').sort().join('');\n    let grid = [];\n\n    // Fill the grid with numbers corresponding to the sorted keyword order\n    for (let i = 0; i < keyword.length; i++) {\n      grid.push([]);\n      for (let j = 0; j < keyword.length; j++) {\n        grid[i].push(sortedKeyword.indexOf(keyword[j]) + 1);\n      }\n    }\n    return grid;\n  }\n\n  // Function to encrypt the plaintext using the AMSCO cipher\n  function encode(plaintext, keyword) {\n    let grid = generateGrid(keyword);\n    if (!grid) {\n      throw new Error('Invalid keyword: Please provide a non-empty keyword.');\n    }\n    let ciphertext = '';\n\n    // Place each character of the plaintext into the grid\n    for (let i = 0; i < plaintext.length; i++) {\n      let row = -1;\n      let col = -1;\n\n      // Find the row and column of the current character in the grid\n      for (let j = 0; j < grid.length; j++) {\n        if (grid[j].indexOf(i % keyword.length + 1) !== -1) {\n          row = j;\n          col = grid[j].indexOf(i % keyword.length + 1);\n          break;\n        }\n      }\n\n      // Append the character at the corresponding position in the grid\n      ciphertext += plaintext.charAt(row + col * Math.ceil(plaintext.length / keyword.length));\n    }\n    return ciphertext;\n  }\n\n  // Function to decrypt the ciphertext using the AMSCO cipher\n  // Function to decrypt the ciphertext using the AMSCO cipher\n  function decode(ciphertext, keyword) {\n    let grid = generateGrid(keyword);\n    if (!grid) {\n      throw new Error('Invalid keyword: Please provide a non-empty keyword.');\n    }\n\n    // Determine the number of columns in the grid\n    let numCols = grid.length;\n\n    // Determine the number of rows in the grid\n    let numRows = Math.ceil(ciphertext.length / numCols);\n\n    // Initialize an array to hold the ciphertext characters in the grid order\n    let gridOrder = [];\n\n    // Fill the gridOrder array with ciphertext characters\n    for (let i = 0; i < numCols; i++) {\n      for (let j = 0; j < numRows; j++) {\n        // Calculate the index in the ciphertext array based on the grid order\n        let index = j * numCols + i;\n        if (index < ciphertext.length) {\n          // Push the character at the calculated index into the gridOrder array\n          gridOrder.push(ciphertext.charAt(index));\n        }\n      }\n    }\n\n    // Initialize an array to hold the decrypted plaintext\n    let plaintext = '';\n\n    // Iterate through the gridOrder array to construct the decrypted plaintext\n    for (let i = 0; i < gridOrder.length; i++) {\n      let row = -1;\n      let col = -1;\n\n      // Find the row and column of the current character in the grid\n      for (let j = 0; j < grid.length; j++) {\n        let idx = grid[j].indexOf(i % numCols + 1);\n        if (idx !== -1) {\n          row = j;\n          col = idx;\n          break;\n        }\n      }\n\n      // Calculate the index of the character in the original grid\n      let originalIndex = row * numCols + col;\n\n      // Append the character at the original index to the plaintext\n      plaintext += gridOrder[originalIndex];\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. Each character in the plaintext is replaced with its corresponding ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, convert each character in the plaintext to its ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves converting each ASCII value back to its corresponding character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 12\n  }, this);\n}\n_s(CipherAscii, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CipherAscii;\n;\nvar _c;\n$RefreshReg$(_c, \"CipherAscii\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","CipherAscii","ongetInfo","_s","generateGrid","keyword","sortedKeyword","split","sort","join","grid","i","length","push","j","indexOf","encode","plaintext","Error","ciphertext","row","col","charAt","Math","ceil","decode","numCols","numRows","gridOrder","index","idx","originalIndex","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/AMSCO.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function CipherAscii({ ongetInfo }) {\r\n    // Function to generate the transposition grid based on the keyword\r\n    function generateGrid(keyword) {\r\n        if (!keyword) {\r\n            return null; // Ensure a keyword is provided\r\n        }\r\n    \r\n        // Sort the keyword alphabetically to determine the column order\r\n        let sortedKeyword = keyword.split('').sort().join('');\r\n        let grid = [];\r\n    \r\n        // Fill the grid with numbers corresponding to the sorted keyword order\r\n        for (let i = 0; i < keyword.length; i++) {\r\n            grid.push([]);\r\n            for (let j = 0; j < keyword.length; j++) {\r\n                grid[i].push(sortedKeyword.indexOf(keyword[j]) + 1);\r\n            }\r\n        }\r\n    \r\n        return grid;\r\n    }\r\n    \r\n\r\n    // Function to encrypt the plaintext using the AMSCO cipher\r\n    function encode(plaintext, keyword) {\r\n        let grid = generateGrid(keyword);\r\n        if (!grid) {\r\n            throw new Error('Invalid keyword: Please provide a non-empty keyword.');\r\n        }\r\n    \r\n        let ciphertext = '';\r\n    \r\n        // Place each character of the plaintext into the grid\r\n        for (let i = 0; i < plaintext.length; i++) {\r\n            let row = -1;\r\n            let col = -1;\r\n    \r\n            // Find the row and column of the current character in the grid\r\n            for (let j = 0; j < grid.length; j++) {\r\n                if (grid[j].indexOf(i % keyword.length + 1) !== -1) {\r\n                    row = j;\r\n                    col = grid[j].indexOf(i % keyword.length + 1);\r\n                    break;\r\n                }\r\n            }\r\n    \r\n            // Append the character at the corresponding position in the grid\r\n            ciphertext += plaintext.charAt(row + col * Math.ceil(plaintext.length / keyword.length));\r\n        }\r\n    \r\n        return ciphertext;\r\n    }\r\n    \r\n    // Function to decrypt the ciphertext using the AMSCO cipher\r\n    // Function to decrypt the ciphertext using the AMSCO cipher\r\nfunction decode(ciphertext, keyword) {\r\n    let grid = generateGrid(keyword);\r\n    if (!grid) {\r\n        throw new Error('Invalid keyword: Please provide a non-empty keyword.');\r\n    }\r\n\r\n    // Determine the number of columns in the grid\r\n    let numCols = grid.length;\r\n\r\n    // Determine the number of rows in the grid\r\n    let numRows = Math.ceil(ciphertext.length / numCols);\r\n\r\n    // Initialize an array to hold the ciphertext characters in the grid order\r\n    let gridOrder = [];\r\n\r\n    // Fill the gridOrder array with ciphertext characters\r\n    for (let i = 0; i < numCols; i++) {\r\n        for (let j = 0; j < numRows; j++) {\r\n            // Calculate the index in the ciphertext array based on the grid order\r\n            let index = j * numCols + i;\r\n            if (index < ciphertext.length) {\r\n                // Push the character at the calculated index into the gridOrder array\r\n                gridOrder.push(ciphertext.charAt(index));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Initialize an array to hold the decrypted plaintext\r\n    let plaintext = '';\r\n\r\n    // Iterate through the gridOrder array to construct the decrypted plaintext\r\n    for (let i = 0; i < gridOrder.length; i++) {\r\n        let row = -1;\r\n        let col = -1;\r\n\r\n        // Find the row and column of the current character in the grid\r\n        for (let j = 0; j < grid.length; j++) {\r\n            let idx = grid[j].indexOf(i % numCols + 1);\r\n            if (idx !== -1) {\r\n                row = j;\r\n                col = idx;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Calculate the index of the character in the original grid\r\n        let originalIndex = row * numCols + col;\r\n\r\n        // Append the character at the original index to the plaintext\r\n        plaintext += gridOrder[originalIndex];\r\n    }\r\n\r\n    return plaintext;\r\n}\r\n\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. \r\n                    Each character in the plaintext is replaced with its corresponding ASCII value.\r\n                </p>\r\n                <p>\r\n                    To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\r\n                </p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.</li>\r\n                    <li>ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.</li>\r\n                    <li>Encryption: To encrypt, convert each character in the plaintext to its ASCII value.</li>\r\n                    <li>Decryption: Decryption involves converting each ASCII value back to its corresponding character.</li>\r\n                    <li>Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}