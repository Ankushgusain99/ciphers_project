{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding({\n  ongetInfo\n}) {\n  _s();\n  //const [inputText, setInputText] = React.useState('');\n  const [arr, setArr] = useState([]);\n  let abc = 0;\n  function encode(str) {\n    let result = Number(str);\n    result = (result >>> 0).toString(2);\n    setArr(result.split('')); // Update array with binary digits\n    return result;\n  }\n  function decode(bin) {\n    let result = parseInt(bin, 2); // Parse binary to decimal\n    setArr(String(result).split('')); // Update array with decimal digits\n    return result;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decimal Number: A number expressed in base-10, using digits from 0 to 9.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Steps are as follows:-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), arr.map((value, index) => {\n        /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"After iteration Modulus of Decimal number with 2 we get \", value]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"final Answer is : \", arr.join('')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, [arr]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(BinaryEncoding, \"cfr2w8P1WyYA6hm2fiUYr4GrooA=\");\n_c = BinaryEncoding;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncoding","ongetInfo","_s","arr","setArr","abc","encode","str","result","Number","toString","split","decode","bin","parseInt","String","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","index","join","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding({ongetInfo}) {\r\n  //const [inputText, setInputText] = React.useState('');\r\n  const [arr,setArr]=useState([])\r\n  let abc=0;\r\n  function encode(str) {\r\n    let result = Number(str);\r\n    result = (result >>> 0).toString(2);\r\n    setArr(result.split('')); // Update array with binary digits\r\n    return result;\r\n  }\r\n\r\n  function decode(bin) {\r\n    let result = parseInt(bin, 2); // Parse binary to decimal\r\n    setArr(String(result).split('')); // Update array with decimal digits\r\n    return result;\r\n  }\r\n  \r\n      const showInformation=()=>{\r\n        const info=(\r\n          <>\r\n            <p>\r\n      Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\r\n    </p>\r\n    <ul>\r\n      <li>Decimal Number: A number expressed in base-10, using digits from 0 to 9.</li>\r\n      <li>Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.</li>\r\n      <li>Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.</li>\r\n      <li>Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).</li>\r\n      <li>Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.</li>\r\n    </ul>\r\n          <p>Steps are as follows:-</p>\r\n          {arr.map((value,index)=>{\r\n            <p key={index}>After iteration Modulus of Decimal number with 2 we get {value}</p>\r\n          })}\r\n          <p>final Answer is : {arr.join('')}</p>\r\n          </>\r\n        )\r\n        ongetInfo(info)\r\n      }\r\n\r\n      React.useEffect(()=>{\r\n        showInformation()\r\n      },[arr])\r\n      return (\r\n      <>\r\n        \r\n        <CipherFactory encode={encode} decode={decode} />\r\n      </>\r\n      )\r\n\r\n\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}