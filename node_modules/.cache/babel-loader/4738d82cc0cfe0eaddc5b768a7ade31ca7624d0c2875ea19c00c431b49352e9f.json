{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\ADFGVX.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ADFGVX({\n  ongetInfo\n}) {\n  _s();\n  // Encode a string using ASCII cipher\n  function encode(text, keyword) {\n    // Generate the ADFGVX grid based on the keyword\n    const sortedKeyword = [...new Set(keyword.split('').sort())];\n    const grid = [];\n    for (let char of sortedKeyword) {\n      let row = [];\n      for (let i = 0; i < 6; i++) {\n        let value = String.fromCharCode(65 + i);\n        row.push(char + value);\n      }\n      grid.push(row);\n    }\n\n    // Encrypt text using ADFGVX cipher\n    let ciphertext = '';\n    for (let char of text) {\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col].includes(char.toUpperCase())) {\n            ciphertext += 'ADFGVX'[row] + 'ADFGVX'[col];\n          }\n        }\n      }\n    }\n    return ciphertext;\n  }\n\n  // Decode a string using ASCII cipher\n  function decode(str) {\n    var result = '';\n    var elements = str.split('-');\n    for (var i = 0; i < elements.length; i++) {\n      result += String.fromCharCode(elements[i]);\n    }\n    return result;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. Each character in the plaintext is replaced with its corresponding ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, convert each character in the plaintext to its ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves converting each ASCII value back to its corresponding character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 14\n  }, this);\n}\n_s(ADFGVX, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ADFGVX;\n;\nvar _c;\n$RefreshReg$(_c, \"ADFGVX\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","ADFGVX","ongetInfo","_s","encode","text","keyword","sortedKeyword","Set","split","sort","grid","char","row","i","value","String","fromCharCode","push","ciphertext","length","col","includes","toUpperCase","decode","str","result","elements","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/ADFGVX.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\n\r\nexport default function ADFGVX({ongetInfo}) {\r\n\r\n// Encode a string using ASCII cipher\r\nfunction encode(text,keyword) {\r\n     // Generate the ADFGVX grid based on the keyword\r\n  const sortedKeyword = [...new Set(keyword.split('').sort())];\r\n  const grid = [];\r\n  for (let char of sortedKeyword) {\r\n    let row = [];\r\n    for (let i = 0; i < 6; i++) {\r\n      let value = String.fromCharCode(65 + i);\r\n      row.push(char + value);\r\n    }\r\n    grid.push(row);\r\n  }\r\n\r\n  // Encrypt text using ADFGVX cipher\r\n  let ciphertext = '';\r\n  for (let char of text) {\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[row].length; col++) {\r\n        if (grid[row][col].includes(char.toUpperCase())) {\r\n          ciphertext += 'ADFGVX'[row] + 'ADFGVX'[col];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return ciphertext;\r\n  }\r\n  \r\n  // Decode a string using ASCII cipher\r\n  function decode(str) {\r\n    var result = '';\r\n    var elements = str.split('-');\r\n    for (var i = 0; i < elements.length; i++) {\r\n      result += String.fromCharCode(elements[i]);\r\n    }\r\n    return result;\r\n  }      \r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\n                The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. \r\n                Each character in the plaintext is replaced with its corresponding ASCII value.\r\n            </p>\r\n            <p>\r\n                To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\r\n            </p>\r\n            <ul>\r\n                <li>Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.</li>\r\n                <li>ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.</li>\r\n                <li>Encryption: To encrypt, convert each character in the plaintext to its ASCII value.</li>\r\n                <li>Decryption: Decryption involves converting each ASCII value back to its corresponding character.</li>\r\n                <li>Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.</li>\r\n            </ul>\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []);\r\n\r\n      return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGpD,eAAe,SAASC,MAAMA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAE5C;EACA,SAASC,MAAMA,CAACC,IAAI,EAACC,OAAO,EAAE;IACzB;IACH,MAAMC,aAAa,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5D,MAAMC,IAAI,GAAG,EAAE;IACf,KAAK,IAAIC,IAAI,IAAIL,aAAa,EAAE;MAC9B,IAAIM,GAAG,GAAG,EAAE;MACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAIC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGH,CAAC,CAAC;QACvCD,GAAG,CAACK,IAAI,CAACN,IAAI,GAAGG,KAAK,CAAC;MACxB;MACAJ,IAAI,CAACO,IAAI,CAACL,GAAG,CAAC;IAChB;;IAEA;IACA,IAAIM,UAAU,GAAG,EAAE;IACnB,KAAK,IAAIP,IAAI,IAAIP,IAAI,EAAE;MACrB,KAAK,IAAIQ,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,IAAI,CAACS,MAAM,EAAEP,GAAG,EAAE,EAAE;QAC1C,KAAK,IAAIQ,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGV,IAAI,CAACE,GAAG,CAAC,CAACO,MAAM,EAAEC,GAAG,EAAE,EAAE;UAC/C,IAAIV,IAAI,CAACE,GAAG,CAAC,CAACQ,GAAG,CAAC,CAACC,QAAQ,CAACV,IAAI,CAACW,WAAW,CAAC,CAAC,CAAC,EAAE;YAC/CJ,UAAU,IAAI,QAAQ,CAACN,GAAG,CAAC,GAAG,QAAQ,CAACQ,GAAG,CAAC;UAC7C;QACF;MACF;IACF;IACA,OAAOF,UAAU;EACjB;;EAEA;EACA,SAASK,MAAMA,CAACC,GAAG,EAAE;IACnB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,QAAQ,GAAGF,GAAG,CAAChB,KAAK,CAAC,GAAG,CAAC;IAC7B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,QAAQ,CAACP,MAAM,EAAEN,CAAC,EAAE,EAAE;MACxCY,MAAM,IAAIV,MAAM,CAACC,YAAY,CAACU,QAAQ,CAACb,CAAC,CAAC,CAAC;IAC5C;IACA,OAAOY,MAAM;EACf;EACA,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,IAAI,gBACN/B,OAAA,CAAAE,SAAA;MAAA8B,QAAA,gBACIhC,OAAA;QAAAgC,QAAA,EAAG;MAGH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJpC,OAAA;QAAAgC,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJpC,OAAA;QAAAgC,QAAA,gBACIhC,OAAA;UAAAgC,QAAA,EAAI;QAAkG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3GpC,OAAA;UAAAgC,QAAA,EAAI;QAAgK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzKpC,OAAA;UAAAgC,QAAA,EAAI;QAAmF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5FpC,OAAA;UAAAgC,QAAA,EAAI;QAAgG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzGpC,OAAA;UAAAgC,QAAA,EAAI;QAA4E;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrF,CAAC;IAAA,eACP,CACL;IACDhC,SAAS,CAAC2B,IAAI,CAAC;EACnB,CAAC;EAEDlC,KAAK,CAACwC,SAAS,CAAC,MAAM;IAClBP,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEA,oBAAO9B,OAAA,CAACF,aAAa;IAACQ,MAAM,EAAEA,MAAO;IAACoB,MAAM,EAAEA,MAAO;IAACY,aAAa,EAAE;EAAM;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACpF;AAAC/B,EAAA,CAlEuBF,MAAM;AAAAoC,EAAA,GAANpC,MAAM;AAkE7B;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}