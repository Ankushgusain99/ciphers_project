{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding({\n  ongetInfo\n}) {\n  _s();\n  function encode(str) {\n    let result = '';\n    for (let i = 0; i < str.length; i++) {\n      result += str[i].charCodeAt(0).toString(2) + ' ';\n    }\n    return result;\n  }\n  function decode(bin) {\n    let result = '';\n    let binArray = bin.split(' ');\n    for (let i = 0; i < binArray.length; i++) {\n      result += String.fromCharCode(parseInt(binArray[i], 2));\n    }\n    return result;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decimal Number: A number expressed in base-10, using digits from 0 to 9.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 14\n  }, this);\n}\n_s(BinaryEncoding, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BinaryEncoding;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncoding","ongetInfo","_s","encode","str","result","i","length","charCodeAt","toString","decode","bin","binArray","split","String","fromCharCode","parseInt","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding({ongetInfo}) {\r\n    function encode(str) {\r\n        let result = '';\r\n        for (let i = 0; i < str.length; i++) {\r\n          result += str[i].charCodeAt(0).toString(2) + ' ';\r\n        }\r\n        return result;\r\n      }\r\n      \r\n      function decode(bin) {\r\n        let result = '';\r\n        let binArray = bin.split(' ');\r\n        for (let i = 0; i < binArray.length; i++) {\r\n          result += String.fromCharCode(parseInt(binArray[i], 2));\r\n        }\r\n        return result;\r\n      }\r\n      const showInformation=()=>{\r\n        const info=(\r\n          <>\r\n            <p>\r\n      Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\r\n    </p>\r\n    <ul>\r\n      <li>Decimal Number: A number expressed in base-10, using digits from 0 to 9.</li>\r\n      <li>Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.</li>\r\n      <li>Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.</li>\r\n      <li>Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).</li>\r\n      <li>Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.</li>\r\n    </ul>\r\n          </>\r\n        )\r\n        ongetInfo(info)\r\n      }\r\n\r\n      React.useEffect(()=>{\r\n        showInformation()\r\n      },[])\r\n      return <CipherFactory encode={encode} decode={decode} />\r\n\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,cAAcA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChD,SAASC,MAAMA,CAACC,GAAG,EAAE;IACjB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCD,MAAM,IAAID,GAAG,CAACE,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG;IAClD;IACA,OAAOJ,MAAM;EACf;EAEA,SAASK,MAAMA,CAACC,GAAG,EAAE;IACnB,IAAIN,MAAM,GAAG,EAAE;IACf,IAAIO,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;IAC7B,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,QAAQ,CAACL,MAAM,EAAED,CAAC,EAAE,EAAE;MACxCD,MAAM,IAAIS,MAAM,CAACC,YAAY,CAACC,QAAQ,CAACJ,QAAQ,CAACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzD;IACA,OAAOD,MAAM;EACf;EACA,MAAMY,eAAe,GAACA,CAAA,KAAI;IACxB,MAAMC,IAAI,gBACRrB,OAAA,CAAAE,SAAA;MAAAoB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,EAAG;MAEX;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ1B,OAAA;QAAAsB,QAAA,gBACEtB,OAAA;UAAAsB,QAAA,EAAI;QAAwE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjF1B,OAAA;UAAAsB,QAAA,EAAI;QAAuH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChI1B,OAAA;UAAAsB,QAAA,EAAI;QAAoM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7M1B,OAAA;UAAAsB,QAAA,EAAI;QAAkH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3H1B,OAAA;UAAAsB,QAAA,EAAI;QAAkH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzH,CAAC;IAAA,eACG,CACH;IACDtB,SAAS,CAACiB,IAAI,CAAC;EACjB,CAAC;EAEDxB,KAAK,CAAC8B,SAAS,CAAC,MAAI;IAClBP,eAAe,CAAC,CAAC;EACnB,CAAC,EAAC,EAAE,CAAC;EACL,oBAAOpB,OAAA,CAACF,aAAa;IAACQ,MAAM,EAAEA,MAAO;IAACO,MAAM,EAAEA;EAAO;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE9D;AAACrB,EAAA,CAxCuBF,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AAwCrC;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}