{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\caesar.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CaesarCipher({\n  ongetInfo\n}) {\n  _s();\n  // Create a function to encode a string using the Caesar cipher\n  function encode(str, shift) {\n    let encodedChars = '';\n    for (let i = 0; i < str.length; i++) {\n      let char = str[i];\n      let charCode = char.charCodeAt(0);\n      if (charCode >= 65 && charCode <= 90) {\n        // Uppercase letters\n        char = String.fromCharCode((charCode - 65 + shift) % 26 + 65);\n      } else if (charCode >= 97 && charCode <= 122) {\n        // Lowercase letters\n        char = String.fromCharCode((charCode - 97 + shift) % 26 + 97);\n      }\n      encodedChars += char;\n    }\n    return encodedChars;\n  }\n\n  // Create a function to decode a string using the Caesar cipher\n  function decode(str, shift) {\n    // Encode the string with a negative shift to reverse the original shift\n    return encode(str, -shift);\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Caesar cipher, specify a shift value and enter your text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Shift: The number of positions each letter in the plaintext is shifted.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentA: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(CaesarCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CaesarCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"CaesarCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","CaesarCipher","ongetInfo","_s","encode","str","shift","encodedChars","i","length","char","charCode","charCodeAt","String","fromCharCode","decode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/caesar.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function CaesarCipher({ongetInfo}) {\r\n\r\n    // Create a function to encode a string using the Caesar cipher\r\n    function encode(str, shift) {\r\n        let encodedChars = '';\r\n    \r\n        for (let i = 0; i < str.length; i++) {\r\n            let char = str[i];\r\n            let charCode = char.charCodeAt(0);\r\n    \r\n            if (charCode >= 65 && charCode <= 90) {\r\n                // Uppercase letters\r\n                char = String.fromCharCode(((charCode - 65 + shift) % 26) + 65);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                // Lowercase letters\r\n                char = String.fromCharCode(((charCode - 97 + shift) % 26) + 97);\r\n            }\r\n    \r\n            encodedChars += char;\r\n        }\r\n    \r\n    \r\n        return encodedChars;\r\n    }\r\n\r\n    // Create a function to decode a string using the Caesar cipher\r\n    function decode(str, shift) {\r\n        // Encode the string with a negative shift to reverse the original shift\r\n        return encode(str, -shift);\r\n    }\r\n\r\n    \r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\r\n                </p>\r\n                <p>To encrypt using the Caesar cipher, specify a shift value and enter your text.</p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.</li>\r\n                    <li>Shift: The number of positions each letter in the plaintext is shifted.</li>\r\n                    <li>Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.</li>\r\n                    <li>Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n\r\n    return( \r\n    <>\r\n        \r\n        <CipherFactory encode={encode} decode={decode} keyComponentA={1} />\r\n    </>\r\n    \r\n)\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,YAAYA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAE9C;EACA,SAASC,MAAMA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACxB,IAAIC,YAAY,GAAG,EAAE;IAErB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACjC,IAAIE,IAAI,GAAGL,GAAG,CAACG,CAAC,CAAC;MACjB,IAAIG,QAAQ,GAAGD,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC;MAEjC,IAAID,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,EAAE,EAAE;QAClC;QACAD,IAAI,GAAGG,MAAM,CAACC,YAAY,CAAE,CAACH,QAAQ,GAAG,EAAE,GAAGL,KAAK,IAAI,EAAE,GAAI,EAAE,CAAC;MACnE,CAAC,MAAM,IAAIK,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,GAAG,EAAE;QAC1C;QACAD,IAAI,GAAGG,MAAM,CAACC,YAAY,CAAE,CAACH,QAAQ,GAAG,EAAE,GAAGL,KAAK,IAAI,EAAE,GAAI,EAAE,CAAC;MACnE;MAEAC,YAAY,IAAIG,IAAI;IACxB;IAGA,OAAOH,YAAY;EACvB;;EAEA;EACA,SAASQ,MAAMA,CAACV,GAAG,EAAEC,KAAK,EAAE;IACxB;IACA,OAAOF,MAAM,CAACC,GAAG,EAAE,CAACC,KAAK,CAAC;EAC9B;EAIA,MAAMU,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMC,IAAI,gBACNnB,OAAA,CAAAE,SAAA;MAAAkB,QAAA,gBACIpB,OAAA;QAAAoB,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJxB,OAAA;QAAAoB,QAAA,EAAG;MAA8E;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrFxB,OAAA;QAAAoB,QAAA,gBACIpB,OAAA;UAAAoB,QAAA,EAAI;QAAiI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1IxB,OAAA;UAAAoB,QAAA,EAAI;QAAuE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChFxB,OAAA;UAAAoB,QAAA,EAAI;QAA4I;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrJxB,OAAA;UAAAoB,QAAA,EAAI;QAA2G;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpH,CAAC;IAAA,eACP,CACL;IACDpB,SAAS,CAACe,IAAI,CAAC;EACnB,CAAC;EAEDtB,KAAK,CAAC4B,SAAS,CAAC,MAAM;IAClBP,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAGN,oBACAlB,OAAA,CAAAE,SAAA;IAAAkB,QAAA,eAEIpB,OAAA,CAACF,aAAa;MAACQ,MAAM,EAAEA,MAAO;MAACW,MAAM,EAAEA,MAAO;MAACS,aAAa,EAAE;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACrE,CAAC;AAGP;AAACnB,EAAA,CA/DuBF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AA+DnC;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}