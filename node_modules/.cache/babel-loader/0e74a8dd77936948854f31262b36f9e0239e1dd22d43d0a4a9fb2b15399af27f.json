{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\ADFGVX.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ADFGVX({\n  ongetInfo\n}) {\n  _s();\n  function generateGrid(key) {\n    key = String(key).toUpperCase();\n    key = [...new Set(key)].sort((a, b) => key.indexOf(a) - key.indexOf(b)).join('');\n    const alphabet = 'ADFGVX';\n    const grid = [];\n    for (let char of key) {\n      const row = [char];\n      for (let letter of alphabet) {\n        if (letter === char) continue;\n        row.push(alphabet[(alphabet.indexOf(char) + alphabet.indexOf(letter)) % 6]);\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  // Function to encode plaintext using the ADFGVX cipher\n  function encode(message, key) {\n    message = message.toUpperCase().replace(/\\s/g, '');\n    const grid = generateGrid(key);\n    let cipher = '';\n    for (let char of message) {\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j] === char) {\n            cipher += 'ADFGVX'[i] + 'ADFGVX'[j];\n            break;\n          }\n        }\n      }\n    }\n    return cipher;\n  }\n\n  // Function to decode ciphertext using the ADFGVX cipher\n  function decode(cipher, key) {\n    const grid = generateGrid(key);\n    let message = '';\n    for (let i = 0; i < cipher.length; i += 2) {\n      const row = 'ADFGVX'.indexOf(cipher[i]);\n      const col = 'ADFGVX'.indexOf(cipher[i + 1]);\n      message += grid[row][col];\n    }\n    return message;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ADFGVX cipher is a field cipher used by the German Army during World War I.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ADFGVX cipher, a Polybius square and a transposition cipher are combined.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: The plaintext is first converted into pairs of ADFGVX characters based on their positions in a Polybius square.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Transposition: The resulting pairs are then reordered according to a keyword.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: The final result is the encrypted ciphertext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The ciphertext is reordered according to the keyword to retrieve the pairs of ADFGVX characters, which are then converted back into plaintext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentC: 'as'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(ADFGVX, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ADFGVX;\n;\nvar _c;\n$RefreshReg$(_c, \"ADFGVX\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","ADFGVX","ongetInfo","_s","generateGrid","key","String","toUpperCase","Set","sort","a","b","indexOf","join","alphabet","grid","char","row","letter","push","encode","message","replace","cipher","i","length","j","decode","col","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentC","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/ADFGVX.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function ADFGVX({ ongetInfo }) {\r\n\r\n    function generateGrid(key) {\r\n        key = String(key).toUpperCase();\r\n        key = [...new Set(key)].sort((a, b) => key.indexOf(a) - key.indexOf(b)).join('');\r\n        const alphabet = 'ADFGVX';\r\n        const grid = [];\r\n        for (let char of key) {\r\n            const row = [char];\r\n            for (let letter of alphabet) {\r\n                if (letter === char) continue;\r\n                row.push(alphabet[(alphabet.indexOf(char) + alphabet.indexOf(letter)) % 6]);\r\n            }\r\n            grid.push(row);\r\n        }\r\n        return grid;\r\n    }\r\n    \r\n    // Function to encode plaintext using the ADFGVX cipher\r\n    function encode(message, key) {\r\n        message = message.toUpperCase().replace(/\\s/g, '');\r\n        const grid = generateGrid(key);\r\n        let cipher = '';\r\n        for (let char of message) {\r\n            for (let i = 0; i < grid.length; i++) {\r\n                for (let j = 0; j < grid[i].length; j++) {\r\n                    if (grid[i][j] === char) {\r\n                        cipher += 'ADFGVX'[i] + 'ADFGVX'[j];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return cipher;\r\n    }\r\n    \r\n    // Function to decode ciphertext using the ADFGVX cipher\r\n    function decode(cipher, key) {\r\n        const grid = generateGrid(key);\r\n        let message = '';\r\n        for (let i = 0; i < cipher.length; i += 2) {\r\n            const row = 'ADFGVX'.indexOf(cipher[i]);\r\n            const col = 'ADFGVX'.indexOf(cipher[i + 1]);\r\n            message += grid[row][col];\r\n        }\r\n        return message;\r\n    }\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The ADFGVX cipher is a field cipher used by the German Army during World War I.\r\n                </p>\r\n                <p>\r\n                    To encrypt using the ADFGVX cipher, a Polybius square and a transposition cipher are combined.\r\n                </p>\r\n                <ul>\r\n                    <li>Substitution Cipher: The plaintext is first converted into pairs of ADFGVX characters based on their positions in a Polybius square.</li>\r\n                    <li>Transposition: The resulting pairs are then reordered according to a keyword.</li>\r\n                    <li>Encryption: The final result is the encrypted ciphertext.</li>\r\n                    <li>Decryption: The ciphertext is reordered according to the keyword to retrieve the pairs of ADFGVX characters, which are then converted back into plaintext.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <CipherFactory encode={encode} decode={decode} keyComponentC={'as'} />\r\n        </>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}