{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding({\n  ongetInfo\n}) {\n  _s();\n  const [inputText, setInputText] = React.useState('');\n  const [inputChars, setInputChars] = React.useStateuseState([]);\n  const [outputChars, setOutputChars] = React.useState([]);\n  function encode(str) {\n    let result = '';\n    for (let i = 0; i < str.length; i++) {\n      result += str[i].charCodeAt(0).toString(2) + ' ';\n    }\n    return result;\n  }\n  function decode(bin) {\n    let result = '';\n    let binArray = bin.split(' ');\n    for (let i = 0; i < binArray.length; i++) {\n      result += String.fromCharCode(parseInt(binArray[i], 2));\n    }\n    return result;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decimal Number: A number expressed in base-10, using digits from 0 to 9.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid black',\n        padding: '10px',\n        margin: '20px',\n        overflow: 'scroll',\n        height: '200px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: '100%',\n          borderCollapse: 'collapse',\n          fontFamily: 'arial, sans-serif'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Input Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Output Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: inputChars.map((char, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: char\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: outputChars[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(BinaryEncoding, \"XWHzB1VN67jOFJ6RUWIW6jmAZ+w=\", false, function () {\n  return [React.useStateuseState];\n});\n_c = BinaryEncoding;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncoding","ongetInfo","_s","inputText","setInputText","useState","inputChars","setInputChars","useStateuseState","outputChars","setOutputChars","encode","str","result","i","length","charCodeAt","toString","decode","bin","binArray","split","String","fromCharCode","parseInt","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","style","border","padding","margin","overflow","height","width","borderCollapse","fontFamily","fontSize","textAlign","map","char","index","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding({ongetInfo}) {\r\n  const [inputText, setInputText] = React.useState('');\r\n    const [inputChars, setInputChars] = React.useStateuseState([]);\r\n    const [outputChars, setOutputChars] = React.useState([]);\r\n\r\n    function encode(str) {\r\n        let result = '';\r\n        for (let i = 0; i < str.length; i++) {\r\n          result += str[i].charCodeAt(0).toString(2) + ' ';\r\n        }\r\n        return result;\r\n      }\r\n      \r\n      function decode(bin) {\r\n        let result = '';\r\n        let binArray = bin.split(' ');\r\n        for (let i = 0; i < binArray.length; i++) {\r\n          result += String.fromCharCode(parseInt(binArray[i], 2));\r\n        }\r\n        return result;\r\n      }\r\n      const showInformation=()=>{\r\n        const info=(\r\n          <>\r\n            <p>\r\n      Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\r\n    </p>\r\n    <ul>\r\n      <li>Decimal Number: A number expressed in base-10, using digits from 0 to 9.</li>\r\n      <li>Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.</li>\r\n      <li>Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.</li>\r\n      <li>Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).</li>\r\n      <li>Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.</li>\r\n    </ul>\r\n\r\n          </>\r\n        )\r\n        ongetInfo(info)\r\n      }\r\n\r\n      React.useEffect(()=>{\r\n        showInformation()\r\n      },[])\r\n      return (\r\n      <>\r\n        <div style={{ border: '1px solid black', padding: '10px', margin: '20px',overflow:'scroll' ,height:'200px'}}>\r\n            <table style={{ width: '100%', borderCollapse: 'collapse', fontFamily: 'arial, sans-serif' }}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Input Text</th>\r\n                        <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Output Text</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody style={{ textAlign: 'center' }}>\r\n                    {inputChars.map((char, index) => (\r\n                        <tr key={index}>\r\n                            <td style={{ border: '1px solid black', padding: '8px' }}>{char}</td>\r\n                            <td style={{ border: '1px solid black', padding: '8px' }}>{outputChars[index]}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <CipherFactory encode={encode} decode={decode} />\r\n      </>\r\n      )\r\n\r\n\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,cAAcA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAClD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,KAAK,CAACW,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,KAAK,CAACc,gBAAgB,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhB,KAAK,CAACW,QAAQ,CAAC,EAAE,CAAC;EAExD,SAASM,MAAMA,CAACC,GAAG,EAAE;IACjB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCD,MAAM,IAAID,GAAG,CAACE,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG;IAClD;IACA,OAAOJ,MAAM;EACf;EAEA,SAASK,MAAMA,CAACC,GAAG,EAAE;IACnB,IAAIN,MAAM,GAAG,EAAE;IACf,IAAIO,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;IAC7B,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,QAAQ,CAACL,MAAM,EAAED,CAAC,EAAE,EAAE;MACxCD,MAAM,IAAIS,MAAM,CAACC,YAAY,CAACC,QAAQ,CAACJ,QAAQ,CAACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzD;IACA,OAAOD,MAAM;EACf;EACA,MAAMY,eAAe,GAACA,CAAA,KAAI;IACxB,MAAMC,IAAI,gBACR7B,OAAA,CAAAE,SAAA;MAAA4B,QAAA,gBACE9B,OAAA;QAAA8B,QAAA,EAAG;MAEX;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJlC,OAAA;QAAA8B,QAAA,gBACE9B,OAAA;UAAA8B,QAAA,EAAI;QAAwE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjFlC,OAAA;UAAA8B,QAAA,EAAI;QAAuH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChIlC,OAAA;UAAA8B,QAAA,EAAI;QAAoM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7MlC,OAAA;UAAA8B,QAAA,EAAI;QAAkH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3HlC,OAAA;UAAA8B,QAAA,EAAI;QAAkH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzH,CAAC;IAAA,eAEG,CACH;IACD9B,SAAS,CAACyB,IAAI,CAAC;EACjB,CAAC;EAEDhC,KAAK,CAACsC,SAAS,CAAC,MAAI;IAClBP,eAAe,CAAC,CAAC;EACnB,CAAC,EAAC,EAAE,CAAC;EACL,oBACA5B,OAAA,CAAAE,SAAA;IAAA4B,QAAA,gBACE9B,OAAA;MAAKoC,KAAK,EAAE;QAAEC,MAAM,EAAE,iBAAiB;QAAEC,OAAO,EAAE,MAAM;QAAEC,MAAM,EAAE,MAAM;QAACC,QAAQ,EAAC,QAAQ;QAAEC,MAAM,EAAC;MAAO,CAAE;MAAAX,QAAA,eACxG9B,OAAA;QAAOoC,KAAK,EAAE;UAAEM,KAAK,EAAE,MAAM;UAAEC,cAAc,EAAE,UAAU;UAAEC,UAAU,EAAE;QAAoB,CAAE;QAAAd,QAAA,gBACzF9B,OAAA;UAAA8B,QAAA,eACI9B,OAAA;YAAA8B,QAAA,gBACI9B,OAAA;cAAIoC,KAAK,EAAE;gBAAEC,MAAM,EAAE,iBAAiB;gBAAEC,OAAO,EAAE,KAAK;gBAAEO,QAAQ,EAAE;cAAO,CAAE;cAAAf,QAAA,EAAC;YAAU;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC3FlC,OAAA;cAAIoC,KAAK,EAAE;gBAAEC,MAAM,EAAE,iBAAiB;gBAAEC,OAAO,EAAE,KAAK;gBAAEO,QAAQ,EAAE;cAAO,CAAE;cAAAf,QAAA,EAAC;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5F;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eACRlC,OAAA;UAAOoC,KAAK,EAAE;YAAEU,SAAS,EAAE;UAAS,CAAE;UAAAhB,QAAA,EACjCrB,UAAU,CAACsC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACxBjD,OAAA;YAAA8B,QAAA,gBACI9B,OAAA;cAAIoC,KAAK,EAAE;gBAAEC,MAAM,EAAE,iBAAiB;gBAAEC,OAAO,EAAE;cAAM,CAAE;cAAAR,QAAA,EAAEkB;YAAI;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACrElC,OAAA;cAAIoC,KAAK,EAAE;gBAAEC,MAAM,EAAE,iBAAiB;gBAAEC,OAAO,EAAE;cAAM,CAAE;cAAAR,QAAA,EAAElB,WAAW,CAACqC,KAAK;YAAC;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAF9Ee,KAAK;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGV,CACP;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eACNlC,OAAA,CAACF,aAAa;MAACgB,MAAM,EAAEA,MAAO;MAACO,MAAM,EAAEA;IAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACjD,CAAC;AAIT;AAAC7B,EAAA,CApEuBF,cAAc;EAAA,QAEEN,KAAK,CAACc,gBAAgB;AAAA;AAAAuC,EAAA,GAFtC/C,cAAc;AAoErC;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}