{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\Bellaso.js\";\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BellasoCipher() {\n  function encode(plaintext, keyword) {\n    plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\n    keyword = keyword.toUpperCase().replace(/[^A-Z]/g, '');\n    let ciphertext = \"\";\n    for (let i = 0; i < plaintext.length; i++) {\n      let plainChar = plaintext.charCodeAt(i) - 65;\n      let keyChar = keyword.charCodeAt(i % keyword.length) - 65;\n      let encryptedChar = (plainChar + keyChar) % 26;\n      ciphertext += String.fromCharCode(encryptedChar + 65);\n    }\n    return ciphertext;\n  }\n  function decode(ciphertext, keyword) {\n    ciphertext = ciphertext.toUpperCase().replace(/[^A-Z]/g, '');\n    keyword = keyword.toUpperCase().replace(/[^A-Z]/g, '');\n    let plaintext = \"\";\n    for (let i = 0; i < ciphertext.length; i++) {\n      let cipherChar = ciphertext.charCodeAt(i) - 65;\n      let keyChar = keyword.charCodeAt(i % keyword.length) - 65;\n      let decryptedChar = (cipherChar - keyChar + 26) % 26;\n      plaintext += String.fromCharCode(decryptedChar + 65);\n    }\n    return plaintext;\n  }\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 12\n  }, this);\n}\n_c = BellasoCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"BellasoCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","BellasoCipher","encode","plaintext","keyword","toUpperCase","replace","ciphertext","i","length","plainChar","charCodeAt","keyChar","encryptedChar","String","fromCharCode","decode","cipherChar","decryptedChar","keyComponentA","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/Bellaso.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BellasoCipher() {\r\n    function encode(plaintext, keyword) {\r\n        plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\r\n        keyword = keyword.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let ciphertext = \"\";\r\n    \r\n        for (let i = 0; i < plaintext.length; i++) {\r\n            let plainChar = plaintext.charCodeAt(i) - 65;\r\n            let keyChar = keyword.charCodeAt(i % keyword.length) - 65;\r\n            let encryptedChar = (plainChar + keyChar) % 26;\r\n            ciphertext += String.fromCharCode(encryptedChar + 65);\r\n        }\r\n    \r\n        return ciphertext;\r\n    }\r\n    \r\n    function decode(ciphertext, keyword) {\r\n        ciphertext = ciphertext.toUpperCase().replace(/[^A-Z]/g, '');\r\n        keyword = keyword.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let plaintext = \"\";\r\n    \r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            let cipherChar = ciphertext.charCodeAt(i) - 65;\r\n            let keyChar = keyword.charCodeAt(i % keyword.length) - 65;\r\n            let decryptedChar = (cipherChar - keyChar + 26) % 26;\r\n            plaintext += String.fromCharCode(decryptedChar + 65);\r\n        }\r\n    \r\n        return plaintext;\r\n    }\r\n\r\n\r\n    \r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};\r\n\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,eAAe,SAASC,aAAaA,CAAA,EAAG;EACpC,SAASC,MAAMA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAChCD,SAAS,GAAGA,SAAS,CAACE,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IAC1DF,OAAO,GAAGA,OAAO,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IACtD,IAAIC,UAAU,GAAG,EAAE;IAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,IAAIE,SAAS,GAAGP,SAAS,CAACQ,UAAU,CAACH,CAAC,CAAC,GAAG,EAAE;MAC5C,IAAII,OAAO,GAAGR,OAAO,CAACO,UAAU,CAACH,CAAC,GAAGJ,OAAO,CAACK,MAAM,CAAC,GAAG,EAAE;MACzD,IAAII,aAAa,GAAG,CAACH,SAAS,GAAGE,OAAO,IAAI,EAAE;MAC9CL,UAAU,IAAIO,MAAM,CAACC,YAAY,CAACF,aAAa,GAAG,EAAE,CAAC;IACzD;IAEA,OAAON,UAAU;EACrB;EAEA,SAASS,MAAMA,CAACT,UAAU,EAAEH,OAAO,EAAE;IACjCG,UAAU,GAAGA,UAAU,CAACF,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IAC5DF,OAAO,GAAGA,OAAO,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IACtD,IAAIH,SAAS,GAAG,EAAE;IAElB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAIS,UAAU,GAAGV,UAAU,CAACI,UAAU,CAACH,CAAC,CAAC,GAAG,EAAE;MAC9C,IAAII,OAAO,GAAGR,OAAO,CAACO,UAAU,CAACH,CAAC,GAAGJ,OAAO,CAACK,MAAM,CAAC,GAAG,EAAE;MACzD,IAAIS,aAAa,GAAG,CAACD,UAAU,GAAGL,OAAO,GAAG,EAAE,IAAI,EAAE;MACpDT,SAAS,IAAIW,MAAM,CAACC,YAAY,CAACG,aAAa,GAAG,EAAE,CAAC;IACxD;IAEA,OAAOf,SAAS;EACpB;EAIA,oBAAOH,OAAA,CAACF,aAAa;IAACI,MAAM,EAAEA,MAAO;IAACc,MAAM,EAAEA,MAAO;IAACG,aAAa,EAAE;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClF;AAACC,EAAA,GAlCuBvB,aAAa;AAkCpC;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}