{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\atbash.js\";\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AtbashEncoder() {\n  const encode = text => {\n    let encoded = '';\n    for (let i = 0; i < text.length; i++) {\n      const charCode = text.charCodeAt(i);\n      let encodedChar = '';\n      if (charCode >= 65 && charCode <= 90) {\n        encodedChar = String.fromCharCode(155 - charCode);\n      } else if (charCode >= 97 && charCode <= 122) {\n        encodedChar = String.fromCharCode(219 - charCode);\n      } else {\n        encodedChar = text[i];\n      }\n      encoded += encodedChar;\n    }\n    return encoded;\n  };\n  const decode = text => {\n    return encode(text);\n  };\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_c = AtbashEncoder;\nvar _c;\n$RefreshReg$(_c, \"AtbashEncoder\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","AtbashEncoder","encode","text","encoded","i","length","charCode","charCodeAt","encodedChar","String","fromCharCode","decode","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/atbash.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function AtbashEncoder() {\r\n\r\n\r\n    const encode = (text) => {\r\n\r\n        let encoded = '';\r\n       \r\n\r\n        for (let i = 0; i < text.length; i++) {\r\n            const charCode = text.charCodeAt(i);\r\n            let encodedChar = '';\r\n\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                encodedChar = String.fromCharCode(155 - charCode);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                encodedChar = String.fromCharCode(219 - charCode);\r\n            } else {\r\n                encodedChar = text[i];\r\n            }\r\n\r\n            encoded += encodedChar;\r\n        }\r\n\r\n\r\n        return encoded;\r\n    };\r\n\r\n    const decode = (text) => {\r\n        return encode(text);\r\n    };\r\n\r\n   \r\n    return (\r\n\r\n        <CipherFactory encode={encode} decode={decode} />\r\n    );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,eAAe,SAASC,aAAaA,CAAA,EAAG;EAGpC,MAAMC,MAAM,GAAIC,IAAI,IAAK;IAErB,IAAIC,OAAO,GAAG,EAAE;IAGhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAClC,MAAME,QAAQ,GAAGJ,IAAI,CAACK,UAAU,CAACH,CAAC,CAAC;MACnC,IAAII,WAAW,GAAG,EAAE;MAEpB,IAAIF,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,EAAE,EAAE;QAClCE,WAAW,GAAGC,MAAM,CAACC,YAAY,CAAC,GAAG,GAAGJ,QAAQ,CAAC;MACrD,CAAC,MAAM,IAAIA,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,GAAG,EAAE;QAC1CE,WAAW,GAAGC,MAAM,CAACC,YAAY,CAAC,GAAG,GAAGJ,QAAQ,CAAC;MACrD,CAAC,MAAM;QACHE,WAAW,GAAGN,IAAI,CAACE,CAAC,CAAC;MACzB;MAEAD,OAAO,IAAIK,WAAW;IAC1B;IAGA,OAAOL,OAAO;EAClB,CAAC;EAED,MAAMQ,MAAM,GAAIT,IAAI,IAAK;IACrB,OAAOD,MAAM,CAACC,IAAI,CAAC;EACvB,CAAC;EAGD,oBAEIH,OAAA,CAACF,aAAa;IAACI,MAAM,EAAEA,MAAO;IAACU,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEzD;AAACC,EAAA,GApCuBhB,aAAa;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}