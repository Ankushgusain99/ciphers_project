{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding({\n  ongetInfo\n}) {\n  _s();\n  //const [inputText, setInputText] = React.useState('');\n  let abc = 0;\n  function encode(str) {\n    let result = Number(str);\n    abc = result;\n    result = (result >>> 0).toString(2);\n    return result.toString();\n  }\n  function decode(bin) {\n    let result = Number(bin);\n    result = (result >>> 0).toString(2);\n    return result.toString();\n  }\n  const showInformation = () => {\n    let final = '';\n    while (abc > 0) {\n      const a = abc % 2;\n      final += a;\n      ongetInfo( /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Modulus of \", abc, \" and 2 is \", a, \" which is added to final: \", final, \" string \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Division of \", abc, \" and 2 is \", abc]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true));\n      abc = abc / 2;\n    }\n    final = final.split('').reverse().join('');\n    ongetInfo( /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The required answer is \", final]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this));\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(BinaryEncoding, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BinaryEncoding;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncoding","ongetInfo","_s","abc","encode","str","result","Number","toString","decode","bin","showInformation","final","a","children","fileName","_jsxFileName","lineNumber","columnNumber","split","reverse","join","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding({ongetInfo}) {\r\n  //const [inputText, setInputText] = React.useState('');\r\n  let abc=0;\r\n    function encode(str) {\r\n      let result =Number(str)\r\n      abc=result\r\n      result= (result >>> 0).toString(2);\r\n      \r\n      return result.toString()\r\n    }\r\n    \r\n    function decode(bin) {\r\n      let result =Number(bin)\r\n      result= (result >>> 0).toString(2);\r\n\r\n      return result.toString()\r\n    }\r\n\r\n  \r\n    const showInformation = () => {\r\n      let final = '';\r\n      while (abc > 0) {\r\n        const a = abc % 2;\r\n        final += a;\r\n        ongetInfo(\r\n          <>\r\n            <p>Modulus of {abc} and 2 is {a} which is added to final: {final} string </p>\r\n            <p>Division of {abc} and 2 is {abc}</p>\r\n          </>\r\n        );\r\n        abc = abc / 2;\r\n      }\r\n      final = final.split('').reverse().join('');\r\n      ongetInfo(<p>The required answer is {final}</p>);\r\n    }\r\n  \r\n\r\n      React.useEffect(()=>{\r\n        showInformation()\r\n      },[])\r\n      return (\r\n      <>\r\n        \r\n        <CipherFactory encode={encode} decode={decode} />\r\n      </>\r\n      )\r\n\r\n\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,cAAcA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAClD;EACA,IAAIC,GAAG,GAAC,CAAC;EACP,SAASC,MAAMA,CAACC,GAAG,EAAE;IACnB,IAAIC,MAAM,GAAEC,MAAM,CAACF,GAAG,CAAC;IACvBF,GAAG,GAACG,MAAM;IACVA,MAAM,GAAE,CAACA,MAAM,KAAK,CAAC,EAAEE,QAAQ,CAAC,CAAC,CAAC;IAElC,OAAOF,MAAM,CAACE,QAAQ,CAAC,CAAC;EAC1B;EAEA,SAASC,MAAMA,CAACC,GAAG,EAAE;IACnB,IAAIJ,MAAM,GAAEC,MAAM,CAACG,GAAG,CAAC;IACvBJ,MAAM,GAAE,CAACA,MAAM,KAAK,CAAC,EAAEE,QAAQ,CAAC,CAAC,CAAC;IAElC,OAAOF,MAAM,CAACE,QAAQ,CAAC,CAAC;EAC1B;EAGA,MAAMG,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIC,KAAK,GAAG,EAAE;IACd,OAAOT,GAAG,GAAG,CAAC,EAAE;MACd,MAAMU,CAAC,GAAGV,GAAG,GAAG,CAAC;MACjBS,KAAK,IAAIC,CAAC;MACVZ,SAAS,eACPJ,OAAA,CAAAE,SAAA;QAAAe,QAAA,gBACEjB,OAAA;UAAAiB,QAAA,GAAG,aAAW,EAACX,GAAG,EAAC,YAAU,EAACU,CAAC,EAAC,4BAA0B,EAACD,KAAK,EAAC,UAAQ;QAAA;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC7ErB,OAAA;UAAAiB,QAAA,GAAG,cAAY,EAACX,GAAG,EAAC,YAAU,EAACA,GAAG;QAAA;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,eACvC,CACJ,CAAC;MACDf,GAAG,GAAGA,GAAG,GAAG,CAAC;IACf;IACAS,KAAK,GAAGA,KAAK,CAACO,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IAC1CpB,SAAS,eAACJ,OAAA;MAAAiB,QAAA,GAAG,yBAAuB,EAACF,KAAK;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAC;EAClD,CAAC;EAGCxB,KAAK,CAAC4B,SAAS,CAAC,MAAI;IAClBX,eAAe,CAAC,CAAC;EACnB,CAAC,EAAC,EAAE,CAAC;EACL,oBACAd,OAAA,CAAAE,SAAA;IAAAe,QAAA,eAEEjB,OAAA,CAACF,aAAa;MAACS,MAAM,EAAEA,MAAO;MAACK,MAAM,EAAEA;IAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACjD,CAAC;AAIT;AAAChB,EAAA,CAhDuBF,cAAc;AAAAuB,EAAA,GAAdvB,cAAc;AAgDrC;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}