{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Bifid.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BifidCipher({\n  ongetInfo\n}) {\n  _s();\n  // Function to encrypt plaintext using the Autokey cipher\n\n  function buildPolybiusSquare(key) {\n    // Remove duplicates and keep only alphabets (A-Z)\n    const alphabet = [...new Set(key.toUpperCase().replace(/[^A-Z]/g, ''))];\n\n    // Ensure alphabet includes all letters (optional, adjust based on your needs)\n    const fullAlphabet = [...new Set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')];\n    alphabet.push(...fullAlphabet.filter(x => !alphabet.includes(x)));\n\n    // Create a 5x5 square (adjust size if needed)\n    const squareSize = 5;\n    const square = [];\n    for (let i = 0; i < squareSize; i++) {\n      square.push(alphabet.slice(i * squareSize, (i + 1) * squareSize));\n    }\n    return square;\n  }\n  function findLetterIndex(letter, square) {\n    const upperCaseLetter = letter.toUpperCase();\n    for (let row = 0; row < square.length; row++) {\n      const index = square[row].indexOf(upperCaseLetter);\n      if (index !== -1) {\n        return {\n          row: row + 1,\n          col: index + 1\n        };\n      }\n    }\n    return null;\n  }\n  function encode(message, key) {\n    const square = buildPolybiusSquare(key);\n    let ciphertext = \"\";\n    for (let i = 0; i < message.length; i += 2) {\n      const letter1 = message[i].toUpperCase(); // Convert to uppercase\n      const letter2 = message[i + 1] || 'X'; // Use 'X' for padding\n\n      const index1 = findLetterIndex(letter1, square);\n      const index2 = findLetterIndex(letter2, square);\n      if (index1 && index2) {\n        ciphertext += `${index1.row}${index2.row}${index1.col}${index2.col}`;\n      } else {\n        // Handle undefined indices\n        console.warn(`Encountered undefined index for characters: ${letter1}, ${letter2}`);\n      }\n    }\n    return ciphertext;\n  }\n\n  // Function to decrypt ciphertext using the Bifid Cipher\n  function decode(ciphertext, key) {\n    const square = buildPolybiusSquare(key);\n    let message = \"\";\n    for (let i = 0; i < ciphertext.length; i += 4) {\n      const row1 = parseInt(ciphertext[i]);\n      const row2 = parseInt(ciphertext[i + 1]);\n      const col1 = parseInt(ciphertext[i + 2]);\n      const col2 = parseInt(ciphertext[i + 3]);\n      if (!isNaN(row1) && !isNaN(row2) && !isNaN(col1) && !isNaN(col2)) {\n        const letter1 = square[row1 - 1][col1 - 1];\n        const letter2 = square[row2 - 1][col2 - 1];\n        message += letter1 || ''; // Handle cases where square doesn't have a value\n        message += letter2 || '';\n      } else {\n        // Handle invalid characters in ciphertext (e.g., log a warning or skip)\n        console.warn(\"Encountered invalid character during decryption.\");\n      }\n    }\n    return message;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Autokey Cipher is a substitution cipher that extends the Vigen\\xE8re cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigen\\xE8re cipher's key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 12\n  }, this);\n}\n_s(BifidCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BifidCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"BifidCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BifidCipher","ongetInfo","_s","buildPolybiusSquare","key","alphabet","Set","toUpperCase","replace","fullAlphabet","push","filter","x","includes","squareSize","square","i","slice","findLetterIndex","letter","upperCaseLetter","row","length","index","indexOf","col","encode","message","ciphertext","letter1","letter2","index1","index2","console","warn","decode","row1","parseInt","row2","col1","col2","isNaN","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Bifid.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BifidCipher({ ongetInfo }) {\r\n    // Function to encrypt plaintext using the Autokey cipher\r\n\r\n    function buildPolybiusSquare(key) {\r\n        // Remove duplicates and keep only alphabets (A-Z)\r\n        const alphabet = [...new Set(key.toUpperCase().replace(/[^A-Z]/g, ''))];\r\n      \r\n        // Ensure alphabet includes all letters (optional, adjust based on your needs)\r\n        const fullAlphabet = [...new Set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')];\r\n        alphabet.push(...fullAlphabet.filter(x => !alphabet.includes(x)));\r\n      \r\n        // Create a 5x5 square (adjust size if needed)\r\n        const squareSize = 5;\r\n        const square = [];\r\n        for (let i = 0; i < squareSize; i++) {\r\n          square.push(alphabet.slice(i * squareSize, (i + 1) * squareSize));\r\n        }\r\n        return square;\r\n      }\r\n        \r\n      function findLetterIndex(letter, square) {\r\n        const upperCaseLetter = letter.toUpperCase();\r\n        for (let row = 0; row < square.length; row++) {\r\n          const index = square[row].indexOf(upperCaseLetter);\r\n          if (index !== -1) {\r\n            return { row: row + 1, col: index + 1 };\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      \r\n      \r\n      function encode(message, key) {\r\n        const square = buildPolybiusSquare(key);\r\n        let ciphertext = \"\";\r\n      \r\n        for (let i = 0; i < message.length; i += 2) {\r\n          const letter1 = message[i].toUpperCase(); // Convert to uppercase\r\n          const letter2 = message[i + 1] || 'X'; // Use 'X' for padding\r\n      \r\n          const index1 = findLetterIndex(letter1, square);\r\n          const index2 = findLetterIndex(letter2, square);\r\n      \r\n          if (index1 && index2) {\r\n            ciphertext += `${index1.row}${index2.row}${index1.col}${index2.col}`;\r\n          } else {\r\n            // Handle undefined indices\r\n            console.warn(`Encountered undefined index for characters: ${letter1}, ${letter2}`);\r\n          }\r\n        }\r\n      \r\n        return ciphertext;\r\n      }\r\n      \r\n      \r\n      \r\n    \r\n    // Function to decrypt ciphertext using the Bifid Cipher\r\n    function decode(ciphertext, key) {\r\n        const square = buildPolybiusSquare(key);\r\n        let message = \"\";\r\n      \r\n        for (let i = 0; i < ciphertext.length; i += 4) {\r\n          const row1 = parseInt(ciphertext[i]);\r\n          const row2 = parseInt(ciphertext[i + 1]);\r\n          const col1 = parseInt(ciphertext[i + 2]);\r\n          const col2 = parseInt(ciphertext[i + 3]);\r\n      \r\n          if (!isNaN(row1) && !isNaN(row2) && !isNaN(col1) && !isNaN(col2)) {\r\n            const letter1 = square[row1 - 1][col1 - 1];\r\n            const letter2 = square[row2 - 1][col2 - 1];\r\n            message += letter1 || ''; // Handle cases where square doesn't have a value\r\n            message += letter2 || '';\r\n          } else {\r\n            // Handle invalid characters in ciphertext (e.g., log a warning or skip)\r\n            console.warn(\"Encountered invalid character during decryption.\");\r\n          }\r\n        }\r\n      \r\n        return message;\r\n      }\r\n      \r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n    The Autokey Cipher is a substitution cipher that extends the Vigenère cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\r\n</p>\r\n<p>\r\n    To encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\r\n</p>\r\n<ul>\r\n    <li>Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.</li>\r\n    <li>Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigenère cipher's key.</li>\r\n    <li>Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.</li>\r\n    <li>Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.</li>\r\n    <li>Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.</li>\r\n</ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'}/>\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}