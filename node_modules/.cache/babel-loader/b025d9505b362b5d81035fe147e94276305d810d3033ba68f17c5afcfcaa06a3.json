{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\MasonicCipher.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Masonic({\n  ongetInfo\n}) {\n  _s();\n  const pigpenCipher = {\n    'A': '᚜',\n    'B': '᚛',\n    'C': 'ᚠ',\n    'D': 'ᛏ',\n    'E': 'ᛒ',\n    'F': 'ᛖ',\n    'G': 'ᛗ',\n    'H': 'ᛝ',\n    'I': 'ᛟ',\n    'J': 'ᛠ',\n    'K': 'ᛡ',\n    'L': 'ᛢ',\n    'M': 'ᛣ',\n    'N': 'ᛤ',\n    'O': 'ᛥ',\n    'P': 'ᛦ',\n    'Q': 'ᛧ',\n    'R': 'ᛨ',\n    'S': 'ᛩ',\n    'T': 'ᛪ',\n    'U': '᛫',\n    'V': '᛬',\n    'W': '᛭',\n    'X': 'ᛮ',\n    'Y': 'ᛯ',\n    'Z': 'ᛰ'\n  };\n  const reversePigpenCipher = Object.fromEntries(Object.entries(pigpenCipher).map(([letter, symbol]) => [symbol, letter]));\n  function encode(plaintext) {\n    return plaintext.toUpperCase().replace(/[^A-Z]/g, '').split('').map(char => pigpenCipher[char] || char).join('');\n  }\n  function decode(ciphertext) {\n    return ciphertext.split('').map(symbol => reversePigpenCipher[symbol] || symbol).join('');\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"BCD (Binary-Coded Decimal) encoding is a binary representation of decimal numbers where each decimal digit is represented by a fixed number of binary digits.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encode using BCD encoding, each decimal digit of the plaintext number is represented by its corresponding four-digit binary code.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary-Coded Decimal: Each decimal digit is represented by a fixed number of binary digits, typically four binary digits per decimal digit.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encoding Scheme: BCD encoding represents each decimal digit using its binary equivalent, ensuring efficient storage and manipulation of decimal numbers in digital systems.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decimal to Binary: Each decimal digit is converted to its binary equivalent using a fixed mapping.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: The decimal number 123 might be encoded as \\\"0001 0010 0011\\\" in BCD, where each group of four binary digits represents one decimal digit.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 14\n  }, this);\n}\n_s(Masonic, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Masonic;\n;\nvar _c;\n$RefreshReg$(_c, \"Masonic\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","Masonic","ongetInfo","_s","pigpenCipher","reversePigpenCipher","Object","fromEntries","entries","map","letter","symbol","encode","plaintext","toUpperCase","replace","split","char","join","decode","ciphertext","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/MasonicCipher.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function Masonic({ongetInfo}) {\r\n\r\n    const pigpenCipher = {\r\n        'A': '᚜', 'B': '᚛', 'C': 'ᚠ', 'D': 'ᛏ', 'E': 'ᛒ', 'F': 'ᛖ', 'G': 'ᛗ', 'H': 'ᛝ', 'I': 'ᛟ',\r\n        'J': 'ᛠ', 'K': 'ᛡ', 'L': 'ᛢ', 'M': 'ᛣ', 'N': 'ᛤ', 'O': 'ᛥ', 'P': 'ᛦ', 'Q': 'ᛧ', 'R': 'ᛨ',\r\n        'S': 'ᛩ', 'T': 'ᛪ', 'U': '᛫', 'V': '᛬', 'W': '᛭', 'X': 'ᛮ', 'Y': 'ᛯ', 'Z': 'ᛰ'\r\n    };\r\n    \r\n    const reversePigpenCipher = Object.fromEntries(\r\n        Object.entries(pigpenCipher).map(([letter, symbol]) => [symbol, letter])\r\n    );\r\n      \r\n    function encode(plaintext) {\r\n        return plaintext.toUpperCase().replace(/[^A-Z]/g, '').split('').map(char => pigpenCipher[char] || char).join('');\r\n    }\r\n\r\n    function decode(ciphertext) {\r\n        return ciphertext.split('').map(symbol => reversePigpenCipher[symbol] || symbol).join('');\r\n    }\r\n     \r\n\r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\nBCD (Binary-Coded Decimal) encoding is a binary representation of decimal numbers where each decimal digit is represented by a fixed number of binary digits.\r\n</p>\r\n<p>\r\nTo encode using BCD encoding, each decimal digit of the plaintext number is represented by its corresponding four-digit binary code.\r\n</p>\r\n<ul>\r\n<li>Binary-Coded Decimal: Each decimal digit is represented by a fixed number of binary digits, typically four binary digits per decimal digit.</li>\r\n<li>Encoding Scheme: BCD encoding represents each decimal digit using its binary equivalent, ensuring efficient storage and manipulation of decimal numbers in digital systems.</li>\r\n<li>Decimal to Binary: Each decimal digit is converted to its binary equivalent using a fixed mapping.</li>\r\n<li>Example: The decimal number 123 might be encoded as \"0001 0010 0011\" in BCD, where each group of four binary digits represents one decimal digit.</li>\r\n</ul>\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []);\r\n\r\n      return <CipherFactory encode={encode} decode={decode} />\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}