{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\AMSCO.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CipherAscii({\n  ongetInfo\n}) {\n  _s();\n  // Function to generate the transposition grid based on the keyword\n  // Function to generate the transposition grid based on the keyword\n  function generateGrid(keyword) {\n    if (!keyword || keyword.trim() === \"\") {\n      throw new Error('Invalid keyword: Please provide a non-empty keyword.');\n    }\n    let sortedKeyword = keyword.split('').sort().join('');\n    let grid = [];\n    let index = 0;\n    for (let i = 0; i < keyword.length; i++) {\n      grid.push([]);\n      for (let j = 0; j < keyword.length; j++) {\n        grid[i].push(sortedKeyword.indexOf(keyword[index]) + 1);\n        index++;\n      }\n    }\n    return grid;\n  }\n\n  // Function to encrypt the plaintext using the AMSCO cipher\n  function encode(plaintext, keyword) {\n    let grid = generateGrid(keyword);\n    if (!grid) {\n      throw new Error('Invalid keyword: Please provide a non-empty keyword.');\n    }\n    let ciphertext = '';\n\n    // Iterate through the plaintext\n    for (let i = 0; i < plaintext.length; i++) {\n      let row = -1;\n      let col = -1;\n\n      // Find the row and column of the current character in the grid\n      for (let j = 0; j < grid.length; j++) {\n        if (grid[j].indexOf(i % keyword.length + 1) !== -1) {\n          row = j;\n          col = grid[j].indexOf(i % keyword.length + 1);\n          break;\n        }\n      }\n      // Append the character at the corresponding position in the grid\n      ciphertext += plaintext.charAt(row + col * Math.ceil(plaintext.length / keyword.length));\n    }\n    return ciphertext;\n  }\n\n  // Function to decrypt the ciphertext using the AMSCO cipher\n  function decode(ciphertext, keyword) {\n    let grid = generateGrid(keyword);\n    if (!grid) {\n      throw new Error('Invalid keyword: Please provide a non-empty keyword.');\n    }\n    let plaintext = '';\n\n    // Iterate through the ciphertext\n    for (let i = 0; i < ciphertext.length; i++) {\n      let row = -1;\n      let col = -1;\n\n      // Find the row and column of the current character in the grid\n      for (let j = 0; j < grid.length; j++) {\n        if (grid[j].indexOf(i % keyword.length + 1) !== -1) {\n          row = j;\n          col = grid[j].indexOf(i % keyword.length + 1);\n          break;\n        }\n      }\n      // Append the character at the corresponding position in the grid\n      plaintext += ciphertext.charAt(row + col * Math.ceil(ciphertext.length / keyword.length));\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. Each character in the plaintext is replaced with its corresponding ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, convert each character in the plaintext to its ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves converting each ASCII value back to its corresponding character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 12\n  }, this);\n}\n_s(CipherAscii, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CipherAscii;\n;\nvar _c;\n$RefreshReg$(_c, \"CipherAscii\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","CipherAscii","ongetInfo","_s","generateGrid","keyword","trim","Error","sortedKeyword","split","sort","join","grid","index","i","length","push","j","indexOf","encode","plaintext","ciphertext","row","col","charAt","Math","ceil","decode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/AMSCO.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function CipherAscii({ ongetInfo }) {\r\n    // Function to generate the transposition grid based on the keyword\r\n    // Function to generate the transposition grid based on the keyword\r\nfunction generateGrid(keyword) {\r\n    if (!keyword || keyword.trim() === \"\") {\r\n        throw new Error('Invalid keyword: Please provide a non-empty keyword.');\r\n    }\r\n\r\n    let sortedKeyword = keyword.split('').sort().join('');\r\n    let grid = [];\r\n    let index = 0;\r\n\r\n    for (let i = 0; i < keyword.length; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < keyword.length; j++) {\r\n            grid[i].push(sortedKeyword.indexOf(keyword[index]) + 1);\r\n            index++;\r\n        }\r\n    }\r\n    return grid;\r\n}\r\n\r\n    // Function to encrypt the plaintext using the AMSCO cipher\r\n    function encode(plaintext, keyword) {\r\n        let grid = generateGrid(keyword);\r\n        if (!grid) {\r\n            throw new Error('Invalid keyword: Please provide a non-empty keyword.');\r\n        }\r\n\r\n        let ciphertext = '';\r\n\r\n        // Iterate through the plaintext\r\n        for (let i = 0; i < plaintext.length; i++) {\r\n            let row = -1;\r\n            let col = -1;\r\n\r\n            // Find the row and column of the current character in the grid\r\n            for (let j = 0; j < grid.length; j++) {\r\n                if (grid[j].indexOf(i % keyword.length + 1) !== -1) {\r\n                    row = j;\r\n                    col = grid[j].indexOf(i % keyword.length + 1);\r\n                    break;\r\n                }\r\n            }\r\n            // Append the character at the corresponding position in the grid\r\n            ciphertext += plaintext.charAt(row + col * Math.ceil(plaintext.length / keyword.length));\r\n        }\r\n        return ciphertext;\r\n    }\r\n\r\n    // Function to decrypt the ciphertext using the AMSCO cipher\r\n    function decode(ciphertext, keyword) {\r\n        let grid = generateGrid(keyword);\r\n        if (!grid) {\r\n            throw new Error('Invalid keyword: Please provide a non-empty keyword.');\r\n        }\r\n\r\n        let plaintext = '';\r\n\r\n        // Iterate through the ciphertext\r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            let row = -1;\r\n            let col = -1;\r\n\r\n            // Find the row and column of the current character in the grid\r\n            for (let j = 0; j < grid.length; j++) {\r\n                if (grid[j].indexOf(i % keyword.length + 1) !== -1) {\r\n                    row = j;\r\n                    col = grid[j].indexOf(i % keyword.length + 1);\r\n                    break;\r\n                }\r\n            }\r\n            // Append the character at the corresponding position in the grid\r\n            plaintext += ciphertext.charAt(row + col * Math.ceil(ciphertext.length / keyword.length));\r\n        }\r\n        return plaintext;\r\n    }\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. \r\n                    Each character in the plaintext is replaced with its corresponding ASCII value.\r\n                </p>\r\n                <p>\r\n                    To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\r\n                </p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.</li>\r\n                    <li>ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.</li>\r\n                    <li>Encryption: To encrypt, convert each character in the plaintext to its ASCII value.</li>\r\n                    <li>Decryption: Decryption involves converting each ASCII value back to its corresponding character.</li>\r\n                    <li>Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}