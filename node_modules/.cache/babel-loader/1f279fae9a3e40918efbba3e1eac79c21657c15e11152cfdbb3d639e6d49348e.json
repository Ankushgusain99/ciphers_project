{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Bellaso.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BellasoCipher({\n  ongetInfo\n}) {\n  _s();\n  function encode(plaintext, keyword) {\n    plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\n    keyword = keyword.toUpperCase().replace(/[^A-Z]/g, '');\n    let ciphertext = \"\";\n    for (let i = 0; i < plaintext.length; i++) {\n      let plainChar = plaintext.charCodeAt(i) - 65;\n      let keyChar = keyword.charCodeAt(i % keyword.length) - 65;\n      let encryptedChar = (plainChar + keyChar) % 26;\n      ciphertext += String.fromCharCode(encryptedChar + 65);\n    }\n    return ciphertext;\n  }\n  function decode(ciphertext, keyword) {\n    ciphertext = ciphertext.toUpperCase().replace(/[^A-Z]/g, '');\n    keyword = keyword.toUpperCase().replace(/[^A-Z]/g, '');\n    let plaintext = \"\";\n    for (let i = 0; i < ciphertext.length; i++) {\n      let cipherChar = ciphertext.charCodeAt(i) - 65;\n      let keyChar = keyword.charCodeAt(i % keyword.length) - 65;\n      let decryptedChar = (cipherChar - keyChar + 26) % 26;\n      plaintext += String.fromCharCode(decryptedChar + 65);\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Beaufort Cipher is a variant of the Vigen\\xE8re cipher, employing a reversed alphabet key to encrypt and decrypt messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Beaufort Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: The Beaufort Cipher substitutes each plaintext character with a character determined by a combination of the plaintext and the key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Length: Similar to the Vigen\\xE8re cipher, the key length in the Beaufort Cipher matches the length of the plaintext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular subtraction or reversing the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption in the Beaufort Cipher involves reversing the encryption process by subtracting the key character from the ciphertext character to retrieve the plaintext character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For instance, using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 12\n  }, this);\n}\n_s(BellasoCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BellasoCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"BellasoCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BellasoCipher","ongetInfo","_s","encode","plaintext","keyword","toUpperCase","replace","ciphertext","i","length","plainChar","charCodeAt","keyChar","encryptedChar","String","fromCharCode","decode","cipherChar","decryptedChar","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Bellaso.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BellasoCipher({ ongetInfo }) {\r\n    function encode(plaintext, keyword) {\r\n        plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\r\n        keyword = keyword.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let ciphertext = \"\";\r\n    \r\n        for (let i = 0; i < plaintext.length; i++) {\r\n            let plainChar = plaintext.charCodeAt(i) - 65;\r\n            let keyChar = keyword.charCodeAt(i % keyword.length) - 65;\r\n            let encryptedChar = (plainChar + keyChar) % 26;\r\n            ciphertext += String.fromCharCode(encryptedChar + 65);\r\n        }\r\n    \r\n        return ciphertext;\r\n    }\r\n    \r\n    function decode(ciphertext, keyword) {\r\n        ciphertext = ciphertext.toUpperCase().replace(/[^A-Z]/g, '');\r\n        keyword = keyword.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let plaintext = \"\";\r\n    \r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            let cipherChar = ciphertext.charCodeAt(i) - 65;\r\n            let keyChar = keyword.charCodeAt(i % keyword.length) - 65;\r\n            let decryptedChar = (cipherChar - keyChar + 26) % 26;\r\n            plaintext += String.fromCharCode(decryptedChar + 65);\r\n        }\r\n    \r\n        return plaintext;\r\n    }\r\n\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n    The Beaufort Cipher is a variant of the Vigenère cipher, employing a reversed alphabet key to encrypt and decrypt messages.\r\n</p>\r\n<p>\r\n    To encrypt using the Beaufort Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\r\n</p>\r\n<ul>\r\n    <li>Substitution Cipher: The Beaufort Cipher substitutes each plaintext character with a character determined by a combination of the plaintext and the key.</li>\r\n    <li>Key Length: Similar to the Vigenère cipher, the key length in the Beaufort Cipher matches the length of the plaintext.</li>\r\n    <li>Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular subtraction or reversing the alphabet.</li>\r\n    <li>Decryption: Decryption in the Beaufort Cipher involves reversing the encryption process by subtracting the key character from the ciphertext character to retrieve the plaintext character.</li>\r\n    <li>Example: For instance, using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.</li>\r\n</ul>\r\n\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}