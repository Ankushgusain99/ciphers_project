{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\overviews\\\\BinaryOverview.js\";\nimport { Typography, Image, Flex } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text,\n  Link\n} = Typography;\nconst Header = () => {\n  return /*#__PURE__*/_jsxDEV(Title, {\n    children: \"Binary Overview\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n};\n_c = Header;\nconst Description = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      children: \"The idea is to extract the digits of a given binary number starting from the rightmost digit and keep a variable dec_value. At the time of extracting digits from the binary number, multiply the digit with the proper base (Power of 2) and add it to the variable dec_value. In the end, the variable dec_value will store the required decimal number.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Description;\nconst Example = () => {\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    vertical: true,\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      children: \"Write down the decimal number: 13.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"Use the Decimal to Binary conversion method.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"Divide the number by 2 and write down the remainder. This will be the least significant bit (rightmost).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"Continue dividing the quotient by 2, writing down the remainder each time until the quotient is 0.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"Arrange the remainders in reverse order to get the binary representation.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"13 divided by 2 is 6 with a remainder of 1 (least significant bit).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"6 divided by 2 is 3 with a remainder of 0.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"3 divided by 2 is 1 with a remainder of 1.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"1 divided by 2 is 0 with a remainder of 1 (most significant bit).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"So, the binary representation of 13 is 1101.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      wrap: \"wrap\",\n      justify: \"center\",\n      gap: 10,\n      style: {\n        margin: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Image, {\n        src: \"https://images.app.goo.gl/vnQJzcPYkaU1X1pX6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Example;\nconst References = () => {\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    vertical: true,\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      href: \"https://www.geeksforgeeks.org/program-decimal-binary-conversion/\",\n      target: \"_blank\",\n      children: \"https://www.geeksforgeeks.org/program-decimal-binary-conversion/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c4 = References;\nexport { Header, Description, Example, References };\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Description\");\n$RefreshReg$(_c3, \"Example\");\n$RefreshReg$(_c4, \"References\");","map":{"version":3,"names":["Typography","Image","Flex","jsxDEV","_jsxDEV","Title","Text","Link","Header","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Description","_c2","Example","vertical","wrap","justify","gap","style","margin","src","_c3","References","href","target","_c4","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/overviews/BinaryOverview.js"],"sourcesContent":["import { Typography, Image, Flex } from \"antd\";\r\n\r\nconst { Title, Text, Link } = Typography;\r\n\r\nconst Header = () => {\r\n  return <Title>Binary Overview</Title>;\r\n};\r\n\r\nconst Description = () => {\r\n  return (\r\n    <div>\r\n      <Text>\r\n      The idea is to extract the digits of a given binary number starting from the rightmost digit and keep a variable dec_value. At the time of extracting digits from the binary number, multiply the digit with the proper base (Power of 2) and add it to the variable dec_value. In the end, the variable dec_value will store the required decimal number.\r\n      </Text>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Example = () => {\r\n  return (\r\n    <Flex vertical={true}>\r\n      <Text>Write down the decimal number: 13.</Text>\r\n<Text>Use the Decimal to Binary conversion method.</Text>\r\n<Text>Divide the number by 2 and write down the remainder. This will be the least significant bit (rightmost).</Text>\r\n<Text>Continue dividing the quotient by 2, writing down the remainder each time until the quotient is 0.</Text>\r\n<Text>Arrange the remainders in reverse order to get the binary representation.</Text>\r\n<Text>13 divided by 2 is 6 with a remainder of 1 (least significant bit).</Text>\r\n<Text>6 divided by 2 is 3 with a remainder of 0.</Text>\r\n<Text>3 divided by 2 is 1 with a remainder of 1.</Text>\r\n<Text>1 divided by 2 is 0 with a remainder of 1 (most significant bit).</Text>\r\n<Text>So, the binary representation of 13 is 1101.</Text>\r\n      <Flex wrap=\"wrap\" justify=\"center\" gap={10} style={{ margin: 20 }}>\r\n        <Image src=\"https://images.app.goo.gl/vnQJzcPYkaU1X1pX6\" />\r\n        \r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst References = () => {\r\n  return (\r\n    <Flex vertical={true}>\r\n      <Link\r\n        href=\"https://www.geeksforgeeks.org/program-decimal-binary-conversion/\"\r\n        target=\"_blank\"\r\n      >\r\n        https://www.geeksforgeeks.org/program-decimal-binary-conversion/\r\n      </Link>\r\n      \r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { Header, Description, Example, References };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}