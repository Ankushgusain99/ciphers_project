{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\caesar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CaesarCipher({\n  ongetInfo\n}) {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [inputChars, setInputChars] = useState([]);\n  const [outputChars, setOutputChars] = useState([]);\n  // Create a function to encode a string using the Caesar cipher\n  function encode(str, shift) {\n    let encodedChars = '';\n    for (let i = 0; i < str.length; i++) {\n      let char = str[i];\n      let charCode = char.charCodeAt(0);\n      if (charCode >= 65 && charCode <= 90) {\n        // Uppercase letters\n        char = String.fromCharCode((charCode - 65 + shift) % 26 + 65);\n      } else if (charCode >= 97 && charCode <= 122) {\n        // Lowercase letters\n        char = String.fromCharCode((charCode - 97 + shift) % 26 + 97);\n      }\n      encodedChars += char;\n    }\n    setInputText(str);\n    setInputChars([...inputChars, str]);\n    setOutputChars([...outputChars, encodedChars]);\n    return encodedChars;\n  }\n\n  // Create a function to decode a string using the Caesar cipher\n  function decode(str, shift) {\n    // Encode the string with a negative shift to reverse the original shift\n    return encode(str, -shift);\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Caesar cipher, specify a shift value and enter your text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Shift: The number of positions each letter in the plaintext is shifted.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid black',\n        padding: '10px',\n        margin: '20px',\n        overflow: 'scroll',\n        height: '200px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: '100%',\n          borderCollapse: 'collapse',\n          fontFamily: 'arial, sans-serif'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Input Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Output Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: inputChars.map((char, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: char\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: outputChars[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentA: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(CaesarCipher, \"O52AVFFJ0qRkxg8PsuhBebU+8os=\");\n_c = CaesarCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"CaesarCipher\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","CaesarCipher","ongetInfo","_s","inputText","setInputText","inputChars","setInputChars","outputChars","setOutputChars","encode","str","shift","encodedChars","i","length","char","charCode","charCodeAt","String","fromCharCode","decode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","style","border","padding","margin","overflow","height","width","borderCollapse","fontFamily","fontSize","textAlign","map","index","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/caesar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function CaesarCipher({ongetInfo}) {\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputChars, setInputChars] = useState([]);\r\n    const [outputChars, setOutputChars] = useState([]);\r\n    // Create a function to encode a string using the Caesar cipher\r\n    function encode(str, shift) {\r\n        let encodedChars = '';\r\n    \r\n        for (let i = 0; i < str.length; i++) {\r\n            let char = str[i];\r\n            let charCode = char.charCodeAt(0);\r\n    \r\n            if (charCode >= 65 && charCode <= 90) {\r\n                // Uppercase letters\r\n                char = String.fromCharCode(((charCode - 65 + shift) % 26) + 65);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                // Lowercase letters\r\n                char = String.fromCharCode(((charCode - 97 + shift) % 26) + 97);\r\n            }\r\n    \r\n            encodedChars += char;\r\n        }\r\n    \r\n        setInputText(str);\r\n        setInputChars([...inputChars, str]);\r\n        setOutputChars([...outputChars, encodedChars]);\r\n    \r\n        return encodedChars;\r\n    }\r\n\r\n    // Create a function to decode a string using the Caesar cipher\r\n    function decode(str, shift) {\r\n        // Encode the string with a negative shift to reverse the original shift\r\n        return encode(str, -shift);\r\n    }\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\r\n                </p>\r\n                <p>To encrypt using the Caesar cipher, specify a shift value and enter your text.</p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.</li>\r\n                    <li>Shift: The number of positions each letter in the plaintext is shifted.</li>\r\n                    <li>Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.</li>\r\n                    <li>Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return( \r\n    <>\r\n        <div style={{ border: '1px solid black', padding: '10px', margin: '20px',overflow:'scroll' ,height:'200px'}}>\r\n            <table style={{ width: '100%', borderCollapse: 'collapse', fontFamily: 'arial, sans-serif' }}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Input Text</th>\r\n                        <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Output Text</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody style={{ textAlign: 'center' }}>\r\n                    {inputChars.map((char, index) => (\r\n                        <tr key={index}>\r\n                            <td style={{ border: '1px solid black', padding: '8px' }}>{char}</td>\r\n                            <td style={{ border: '1px solid black', padding: '8px' }}>{outputChars[index]}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <CipherFactory encode={encode} decode={decode} keyComponentA={1} />\r\n    </>\r\n    \r\n)\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}