{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding({\n  ongetInfo\n}) {\n  _s();\n  //const [inputText, setInputText] = React.useState('');\n  const [arr, setArr] = useState([]);\n  const [text, setText] = useState(0);\n  function encode(str) {\n    let result = Number(str);\n    result = (result >>> 0).toString(2);\n    setArr(result.split('')); // Update array with binary digits\n    setText(Number(str));\n    return result;\n  }\n  function decode(bin) {\n    bin = (bin >>> 0).toString(2);\n    setArr(String(bin).split('')); // Update array with decimal digits\n    setText(bin);\n    return bin;\n  }\n  const showInformation = () => {\n    const temp = [];\n    temp.push(text);\n    let fin = text;\n    while (fin > 0) {\n      let a = Math.floor(fin / 2);\n      temp.push(a);\n      fin = fin / 2;\n      fin = Math.floor(fin);\n    }\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decimal Number: A number expressed in base-10, using digits from 0 to 9.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Steps are as follows:-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), arr.map((value, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"After Modulating \", temp[index], \" with 2 we get \", temp[index] % 2]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"final Answer is after reversing what we get in our list is : \", arr.join('')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, [arr, text]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(BinaryEncoding, \"uGahi/UXd0nCbVN8y36tt51pGH4=\");\n_c = BinaryEncoding;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncoding","ongetInfo","_s","arr","setArr","text","setText","encode","str","result","Number","toString","split","decode","bin","String","showInformation","temp","push","fin","a","Math","floor","info","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","index","join","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding({ongetInfo}) {\r\n  //const [inputText, setInputText] = React.useState('');\r\n  const [arr,setArr]=useState([])\r\n  const [text,setText]=useState(0)\r\n  function encode(str) {\r\n    let result = Number(str);\r\n    result = (result >>> 0).toString(2);\r\n    setArr(result.split('')); // Update array with binary digits\r\n    setText(Number(str))\r\n    return result;\r\n  }\r\n\r\n  function decode(bin) {\r\n    bin=(bin>>>0).toString(2)\r\n    setArr(String(bin).split('')); // Update array with decimal digits\r\n    setText(bin)\r\n    return bin;\r\n  }\r\n  \r\n      const showInformation=()=>{\r\n        const temp=[]\r\n        temp.push(text)\r\n        let fin=text\r\n        while(fin>0){\r\n          let a=Math.floor(fin/2)\r\n          temp.push(a)\r\n          fin=fin/2\r\n          fin=Math.floor(fin)\r\n        }\r\n        const info=(\r\n          <>\r\n            <p>\r\n      Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\r\n    </p>\r\n    <ul>\r\n      <li>Decimal Number: A number expressed in base-10, using digits from 0 to 9.</li>\r\n      <li>Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.</li>\r\n      <li>Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.</li>\r\n      <li>Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).</li>\r\n      <li>Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.</li>\r\n    </ul>\r\n          <p>Steps are as follows:-</p>\r\n          {arr.map((value,index)=>(\r\n      \r\n            <li key={index}>After Modulating {temp[index]} with 2 we get {temp[index] % 2}</li>\r\n          ))}\r\n          <p>final Answer is after reversing what we get in our list is : {arr.join('')}</p>\r\n          </>\r\n        )\r\n        ongetInfo(info)\r\n      }\r\n\r\n      React.useEffect(()=>{\r\n        showInformation()\r\n      },[arr,text])\r\n      return (\r\n      <>\r\n        \r\n        <CipherFactory encode={encode} decode={decode} />\r\n      </>\r\n      )\r\n\r\n\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}