{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Chaocipher.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChaoCipher({\n  ongetInfo\n}) {\n  _s();\n  function rotateDisks(leftAlphabet, rightAlphabet, index) {\n    // Rotate left alphabet\n    leftAlphabet = leftAlphabet.slice(index + 1) + leftAlphabet.slice(0, index + 1);\n    // Move second letter to end\n    leftAlphabet = leftAlphabet[0] + leftAlphabet.slice(2) + leftAlphabet[1];\n\n    // Rotate right alphabet\n    rightAlphabet = rightAlphabet.slice(index + 1) + rightAlphabet.slice(0, index + 1);\n    // Move second letter to end\n    rightAlphabet = rightAlphabet[0] + rightAlphabet.slice(2) + rightAlphabet[1];\n    return {\n      leftAlphabet,\n      rightAlphabet\n    };\n  }\n  function encode(plaintext, leftAlphabet, rightAlphabet) {\n    plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\n    let ciphertext = '';\n    for (let char of plaintext) {\n      let index = leftAlphabet.indexOf(char);\n      ciphertext += rightAlphabet[index];\n      let rotated = rotateDisks(leftAlphabet, rightAlphabet, index);\n      leftAlphabet = rotated.leftAlphabet;\n      rightAlphabet = rotated.rightAlphabet;\n    }\n    return ciphertext;\n  }\n  function decode(ciphertext, leftAlphabet, rightAlphabet) {\n    ciphertext = ciphertext.toUpperCase().replace(/[^A-Z]/g, '');\n    let plaintext = '';\n    for (let char of ciphertext) {\n      let index = rightAlphabet.indexOf(char);\n      plaintext += leftAlphabet[index];\n      let rotated = rotateDisks(leftAlphabet, rightAlphabet, index);\n      leftAlphabet = rotated.leftAlphabet;\n      rightAlphabet = rotated.rightAlphabet;\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. Each character in the plaintext is replaced with its corresponding ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, convert each character in the plaintext to its ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves converting each ASCII value back to its corresponding character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR',\n    keyComponentB: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 14\n  }, this);\n}\n_s(ChaoCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ChaoCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"ChaoCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","ChaoCipher","ongetInfo","_s","rotateDisks","leftAlphabet","rightAlphabet","index","slice","encode","plaintext","toUpperCase","replace","ciphertext","char","indexOf","rotated","decode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","keyComponentB","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Chaocipher.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\n\r\nexport default function ChaoCipher({ongetInfo}) {\r\n\r\n    function rotateDisks(leftAlphabet, rightAlphabet, index) {\r\n        // Rotate left alphabet\r\n        leftAlphabet = leftAlphabet.slice(index + 1) + leftAlphabet.slice(0, index + 1);\r\n        // Move second letter to end\r\n        leftAlphabet = leftAlphabet[0] + leftAlphabet.slice(2) + leftAlphabet[1];\r\n    \r\n        // Rotate right alphabet\r\n        rightAlphabet = rightAlphabet.slice(index + 1) + rightAlphabet.slice(0, index + 1);\r\n        // Move second letter to end\r\n        rightAlphabet = rightAlphabet[0] + rightAlphabet.slice(2) + rightAlphabet[1];\r\n    \r\n        return { leftAlphabet, rightAlphabet };\r\n    }\r\n    \r\n    function encode(plaintext, leftAlphabet, rightAlphabet) {\r\n        plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let ciphertext = '';\r\n    \r\n        for (let char of plaintext) {\r\n            let index = leftAlphabet.indexOf(char);\r\n            ciphertext += rightAlphabet[index];\r\n            let rotated = rotateDisks(leftAlphabet, rightAlphabet, index);\r\n            leftAlphabet = rotated.leftAlphabet;\r\n            rightAlphabet = rotated.rightAlphabet;\r\n        }\r\n    \r\n        return ciphertext;\r\n    }\r\n    \r\n    function decode(ciphertext, leftAlphabet, rightAlphabet) {\r\n        ciphertext = ciphertext.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let plaintext = '';\r\n    \r\n        for (let char of ciphertext) {\r\n            let index = rightAlphabet.indexOf(char);\r\n            plaintext += leftAlphabet[index];\r\n            let rotated = rotateDisks(leftAlphabet, rightAlphabet, index);\r\n            leftAlphabet = rotated.leftAlphabet;\r\n            rightAlphabet = rotated.rightAlphabet;\r\n        }\r\n    \r\n        return plaintext;\r\n    }\r\n    \r\n          \r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\n                The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. \r\n                Each character in the plaintext is replaced with its corresponding ASCII value.\r\n            </p>\r\n            <p>\r\n                To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\r\n            </p>\r\n            <ul>\r\n                <li>Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.</li>\r\n                <li>ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.</li>\r\n                <li>Encryption: To encrypt, convert each character in the plaintext to its ASCII value.</li>\r\n                <li>Decryption: Decryption involves converting each ASCII value back to its corresponding character.</li>\r\n                <li>Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.</li>\r\n            </ul>\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []);\r\n\r\n      return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} keyComponentB={'STR'} />\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}