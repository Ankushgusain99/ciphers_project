{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\atbash.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AtbashEncoder({\n  ongetInfo,\n  showInfo\n}) {\n  _s();\n  const encode = text => {\n    let encoded = '';\n    for (let i = 0; i < text.length; i++) {\n      const charCode = text.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        encoded += String.fromCharCode(155 - charCode);\n      } else if (charCode >= 97 && charCode <= 122) {\n        encoded += String.fromCharCode(219 - charCode);\n      } else {\n        encoded += text[i];\n      }\n    }\n    return encoded;\n  };\n  const decode = text => {\n    return encode(text);\n  };\n  const showInformation = () => {\n    const info = \"The Atbash cipher is a substitution cipher where each letter in the plaintext is replaced with its corresponding letter in the reverse alphabet. For example, 'A' becomes 'Z', 'B' becomes 'Y', and so on.\";\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), showInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Atbash Cipher is a substitution cipher where each letter in the plaintext is replaced with its reverse in the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Atbash Cipher, simply enter your text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by its reverse counterpart in the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Reversed Alphabet: The alphabet is reversed, with 'A' becoming 'Z', 'B' becoming 'Y', and so on.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, replace each letter in the plaintext with its corresponding reverse letter.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The Atbash Cipher is self-reciprocal, meaning the same algorithm is used for both encryption and decryption.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes 'Z', 'B' becomes 'Y', 'C' becomes 'X', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(AtbashEncoder, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = AtbashEncoder;\n;\nvar _c;\n$RefreshReg$(_c, \"AtbashEncoder\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AtbashEncoder","ongetInfo","showInfo","_s","encode","text","encoded","i","length","charCode","charCodeAt","String","fromCharCode","decode","showInformation","info","useEffect","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/atbash.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\nexport default function AtbashEncoder({ongetInfo,showInfo}) {\r\n    \r\n    const encode = (text) => {\r\n        let encoded = '';\r\n        for (let i = 0; i < text.length; i++) {\r\n            const charCode = text.charCodeAt(i);\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                encoded += String.fromCharCode(155 - charCode);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                encoded += String.fromCharCode(219 - charCode);\r\n            } else {\r\n                encoded += text[i];\r\n            }\r\n        }\r\n        return encoded;\r\n    };\r\n\r\n    const decode = (text) => {\r\n        return encode(text);\r\n    };\r\n    \r\n    const showInformation=()=>{\r\n        const info=\"The Atbash cipher is a substitution cipher where each letter in the plaintext is replaced with its corresponding letter in the reverse alphabet. For example, 'A' becomes 'Z', 'B' becomes 'Y', and so on.\"\r\n        ongetInfo(info)\r\n    }\r\n    React.useEffect(() => {\r\n        showInformation();\r\n      }, []);\r\n    \r\n\r\n    return (\r\n        <>\r\n        <CipherFactory encode={encode} decode={decode} />\r\n        {showInfo && (\r\n        <div className=\"info-container\">\r\n          <p>\r\n            The Atbash Cipher is a substitution cipher where each letter in the plaintext is replaced with its reverse in the alphabet.\r\n          </p>\r\n          <p>To encrypt using the Atbash Cipher, simply enter your text.</p>\r\n          <ul>\r\n            <li>Substitution Cipher: Each letter in the plaintext is replaced by its reverse counterpart in the alphabet.</li>\r\n            <li>Reversed Alphabet: The alphabet is reversed, with 'A' becoming 'Z', 'B' becoming 'Y', and so on.</li>\r\n            <li>Encryption: To encrypt, replace each letter in the plaintext with its corresponding reverse letter.</li>\r\n            <li>Decryption: The Atbash Cipher is self-reciprocal, meaning the same algorithm is used for both encryption and decryption.</li>\r\n            <li>Example: 'A' becomes 'Z', 'B' becomes 'Y', 'C' becomes 'X', and so forth.</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n  </>\r\n    )\r\n\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}