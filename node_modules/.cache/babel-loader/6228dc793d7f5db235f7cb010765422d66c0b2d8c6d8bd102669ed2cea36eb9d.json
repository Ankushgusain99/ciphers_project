{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Bellaso.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BellasoCipher({\n  ongetInfo\n}) {\n  _s();\n  function encode(plaintext, key) {\n    let ciphertext = '';\n    const keyLength = key.length;\n    let keyIndex = 0;\n    for (let i = 0; i < plaintext.length; i++) {\n      const charCode = plaintext.charCodeAt(i);\n      const keyCharCode = key.charCodeAt(keyIndex % keyLength);\n      const encryptedCharCode = charCode + keyCharCode;\n      ciphertext += String.fromCharCode(encryptedCharCode);\n      keyIndex++;\n    }\n    return ciphertext;\n  }\n  function decode(ciphertext, key) {\n    let plaintext = '';\n    const keyLength = key.length;\n    let keyIndex = 0;\n    for (let i = 0; i < ciphertext.length; i++) {\n      const charCode = ciphertext.charCodeAt(i);\n      const keyCharCode = key.charCodeAt(keyIndex % keyLength);\n      const decryptedCharCode = charCode - keyCharCode;\n      plaintext += String.fromCharCode(decryptedCharCode);\n      keyIndex++;\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Beaufort Cipher is a variant of the Vigen\\xE8re cipher, employing a reversed alphabet key to encrypt and decrypt messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Beaufort Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: The Beaufort Cipher substitutes each plaintext character with a character determined by a combination of the plaintext and the key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Length: Similar to the Vigen\\xE8re cipher, the key length in the Beaufort Cipher matches the length of the plaintext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular subtraction or reversing the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption in the Beaufort Cipher involves reversing the encryption process by subtracting the key character from the ciphertext character to retrieve the plaintext character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For instance, using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 12\n  }, this);\n}\n_s(BellasoCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BellasoCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"BellasoCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BellasoCipher","ongetInfo","_s","encode","plaintext","key","ciphertext","keyLength","length","keyIndex","i","charCode","charCodeAt","keyCharCode","encryptedCharCode","String","fromCharCode","decode","decryptedCharCode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Bellaso.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BellasoCipher({ ongetInfo }) {\r\n    function encode(plaintext, key) {\r\n        let ciphertext = '';\r\n        const keyLength = key.length;\r\n        let keyIndex = 0;\r\n    \r\n        for (let i = 0; i < plaintext.length; i++) {\r\n            const charCode = plaintext.charCodeAt(i);\r\n            const keyCharCode = key.charCodeAt(keyIndex % keyLength);\r\n            const encryptedCharCode = charCode + keyCharCode;\r\n    \r\n            ciphertext += String.fromCharCode(encryptedCharCode);\r\n            keyIndex++;\r\n        }\r\n    \r\n        return ciphertext;\r\n    }\r\n    \r\n    function decode(ciphertext, key) {\r\n        let plaintext = '';\r\n        const keyLength = key.length;\r\n        let keyIndex = 0;\r\n    \r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            const charCode = ciphertext.charCodeAt(i);\r\n            const keyCharCode = key.charCodeAt(keyIndex % keyLength);\r\n            const decryptedCharCode = charCode - keyCharCode;\r\n    \r\n            plaintext += String.fromCharCode(decryptedCharCode);\r\n            keyIndex++;\r\n        }\r\n    \r\n        return plaintext;\r\n    }\r\n\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n    The Beaufort Cipher is a variant of the Vigenère cipher, employing a reversed alphabet key to encrypt and decrypt messages.\r\n</p>\r\n<p>\r\n    To encrypt using the Beaufort Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\r\n</p>\r\n<ul>\r\n    <li>Substitution Cipher: The Beaufort Cipher substitutes each plaintext character with a character determined by a combination of the plaintext and the key.</li>\r\n    <li>Key Length: Similar to the Vigenère cipher, the key length in the Beaufort Cipher matches the length of the plaintext.</li>\r\n    <li>Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular subtraction or reversing the alphabet.</li>\r\n    <li>Decryption: Decryption in the Beaufort Cipher involves reversing the encryption process by subtracting the key character from the ciphertext character to retrieve the plaintext character.</li>\r\n    <li>Example: For instance, using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.</li>\r\n</ul>\r\n\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACjD,SAASC,MAAMA,CAACC,SAAS,EAAEC,GAAG,EAAE;IAC5B,IAAIC,UAAU,GAAG,EAAE;IACnB,MAAMC,SAAS,GAAGF,GAAG,CAACG,MAAM;IAC5B,IAAIC,QAAQ,GAAG,CAAC;IAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,SAAS,CAACI,MAAM,EAAEE,CAAC,EAAE,EAAE;MACvC,MAAMC,QAAQ,GAAGP,SAAS,CAACQ,UAAU,CAACF,CAAC,CAAC;MACxC,MAAMG,WAAW,GAAGR,GAAG,CAACO,UAAU,CAACH,QAAQ,GAAGF,SAAS,CAAC;MACxD,MAAMO,iBAAiB,GAAGH,QAAQ,GAAGE,WAAW;MAEhDP,UAAU,IAAIS,MAAM,CAACC,YAAY,CAACF,iBAAiB,CAAC;MACpDL,QAAQ,EAAE;IACd;IAEA,OAAOH,UAAU;EACrB;EAEA,SAASW,MAAMA,CAACX,UAAU,EAAED,GAAG,EAAE;IAC7B,IAAID,SAAS,GAAG,EAAE;IAClB,MAAMG,SAAS,GAAGF,GAAG,CAACG,MAAM;IAC5B,IAAIC,QAAQ,GAAG,CAAC;IAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAACE,MAAM,EAAEE,CAAC,EAAE,EAAE;MACxC,MAAMC,QAAQ,GAAGL,UAAU,CAACM,UAAU,CAACF,CAAC,CAAC;MACzC,MAAMG,WAAW,GAAGR,GAAG,CAACO,UAAU,CAACH,QAAQ,GAAGF,SAAS,CAAC;MACxD,MAAMW,iBAAiB,GAAGP,QAAQ,GAAGE,WAAW;MAEhDT,SAAS,IAAIW,MAAM,CAACC,YAAY,CAACE,iBAAiB,CAAC;MACnDT,QAAQ,EAAE;IACd;IAEA,OAAOL,SAAS;EACpB;EAGA,MAAMe,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMC,IAAI,gBACNvB,OAAA,CAAAE,SAAA;MAAAsB,QAAA,gBACIxB,OAAA;QAAAwB,QAAA,EAAG;MAEnB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ5B,OAAA;QAAAwB,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ5B,OAAA;QAAAwB,QAAA,gBACIxB,OAAA;UAAAwB,QAAA,EAAI;QAAwJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjK5B,OAAA;UAAAwB,QAAA,EAAI;QAAsH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC/H5B,OAAA;UAAAwB,QAAA,EAAI;QAA0L;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnM5B,OAAA;UAAAwB,QAAA,EAAI;QAA2L;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpM5B,OAAA;UAAAwB,QAAA,EAAI;QAAqJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9J,CAAC;IAAA,eAES,CACL;IACDxB,SAAS,CAACmB,IAAI,CAAC;EACnB,CAAC;EAED1B,KAAK,CAACgC,SAAS,CAAC,MAAM;IAClBP,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOtB,OAAA,CAACF,aAAa;IAACQ,MAAM,EAAEA,MAAO;IAACc,MAAM,EAAEA,MAAO;IAACU,aAAa,EAAE;EAAM;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClF;AAACvB,EAAA,CA/DuBF,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AA+DpC;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}