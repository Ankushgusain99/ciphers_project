{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\Chaocipher.js\";\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChaoCipher() {\n  function createFullAlphabet(startLetter) {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const index = alphabet.indexOf(startLetter.toUpperCase());\n    return alphabet.slice(index) + alphabet.slice(0, index);\n  }\n  function rotateDisks(leftAlphabet, rightAlphabet, rotationCount) {\n    // Rotate left alphabet\n    leftAlphabet = leftAlphabet.slice(rotationCount) + leftAlphabet.slice(0, rotationCount);\n    // Move second letter to end\n    leftAlphabet = leftAlphabet[0] + leftAlphabet.slice(2) + leftAlphabet[1];\n\n    // Rotate right alphabet\n    rightAlphabet = rightAlphabet.slice(rotationCount) + rightAlphabet.slice(0, rotationCount);\n    // Move second letter to end\n    rightAlphabet = rightAlphabet[0] + rightAlphabet.slice(2) + rightAlphabet[1];\n    return {\n      leftAlphabet,\n      rightAlphabet\n    };\n  }\n  function encode(plaintext, leftAlphabet, rightAlphabet) {\n    const rotationCount = 1;\n    plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\n    let ciphertext = '';\n    for (let char of plaintext) {\n      let index = leftAlphabet.indexOf(char);\n      if (index === -1) {\n        ciphertext += char; // Keep the character as is if not found\n      } else {\n        ciphertext += rightAlphabet[index];\n        let rotated = rotateDisks(leftAlphabet, rightAlphabet, rotationCount);\n        leftAlphabet = rotated.leftAlphabet;\n        rightAlphabet = rotated.rightAlphabet;\n      }\n    }\n    return ciphertext;\n  }\n  function decode(ciphertext, leftAlphabet, rightAlphabet) {\n    const rotationCount = 1;\n    ciphertext = ciphertext.toUpperCase().replace(/[^A-Z]/g, '');\n    let plaintext = '';\n    for (let char of ciphertext) {\n      let index = rightAlphabet.indexOf(char);\n      if (index === -1) {\n        plaintext += char; // Keep the character as is if not found\n      } else {\n        plaintext += leftAlphabet[index];\n        let rotated = rotateDisks(leftAlphabet, rightAlphabet, rotationCount);\n        leftAlphabet = rotated.leftAlphabet;\n        rightAlphabet = rotated.rightAlphabet;\n      }\n    }\n    return plaintext;\n  }\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR',\n    keyComponentB: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 14\n  }, this);\n}\n_c = ChaoCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"ChaoCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","ChaoCipher","createFullAlphabet","startLetter","alphabet","index","indexOf","toUpperCase","slice","rotateDisks","leftAlphabet","rightAlphabet","rotationCount","encode","plaintext","replace","ciphertext","char","rotated","decode","keyComponentA","keyComponentB","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/Chaocipher.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\n\r\nexport default function ChaoCipher() {\r\n\r\n    function createFullAlphabet(startLetter) {\r\n        const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n        const index = alphabet.indexOf(startLetter.toUpperCase());\r\n        return alphabet.slice(index) + alphabet.slice(0, index);\r\n    }\r\n    \r\n    function rotateDisks(leftAlphabet, rightAlphabet, rotationCount) {\r\n        // Rotate left alphabet\r\n        leftAlphabet = leftAlphabet.slice(rotationCount) + leftAlphabet.slice(0, rotationCount);\r\n        // Move second letter to end\r\n        leftAlphabet = leftAlphabet[0] + leftAlphabet.slice(2) + leftAlphabet[1];\r\n    \r\n        // Rotate right alphabet\r\n        rightAlphabet = rightAlphabet.slice(rotationCount) + rightAlphabet.slice(0, rotationCount);\r\n        // Move second letter to end\r\n        rightAlphabet = rightAlphabet[0] + rightAlphabet.slice(2) + rightAlphabet[1];\r\n    \r\n        return { leftAlphabet, rightAlphabet };\r\n    }\r\n    \r\n    function encode(plaintext, leftAlphabet, rightAlphabet) {\r\n        const rotationCount = 1;\r\n        plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let ciphertext = '';\r\n    \r\n        for (let char of plaintext) {\r\n            let index = leftAlphabet.indexOf(char);\r\n            if (index === -1) {\r\n                ciphertext += char;  // Keep the character as is if not found\r\n            } else {\r\n                ciphertext += rightAlphabet[index];\r\n                let rotated = rotateDisks(leftAlphabet, rightAlphabet, rotationCount);\r\n                leftAlphabet = rotated.leftAlphabet;\r\n                rightAlphabet = rotated.rightAlphabet;\r\n            }\r\n        }\r\n    \r\n        return ciphertext;\r\n    }\r\n    \r\n    function decode(ciphertext, leftAlphabet, rightAlphabet) {\r\n        const rotationCount = 1;\r\n        ciphertext = ciphertext.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let plaintext = '';\r\n    \r\n        for (let char of ciphertext) {\r\n            let index = rightAlphabet.indexOf(char);\r\n            if (index === -1) {\r\n                plaintext += char;  // Keep the character as is if not found\r\n            } else {\r\n                plaintext += leftAlphabet[index];\r\n                let rotated = rotateDisks(leftAlphabet, rightAlphabet, rotationCount);\r\n                leftAlphabet = rotated.leftAlphabet;\r\n                rightAlphabet = rotated.rightAlphabet;\r\n            }\r\n        }\r\n    \r\n        return plaintext;\r\n    }\r\n    \r\n    \r\n          \r\n  \r\n      return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} keyComponentB={'STR'} />\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}