{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\atbash.js\",\n  _s = $RefreshSig$();\n//import useState from react\nimport React, { useState } from \"react\";\nimport CipherFactory from \"../../ui/EncryptDecrypt\";\nimport CipherOverview from \"../../ui/CipherOverview\";\nimport { Header, Description, References, Example } from \"../../overviews/AtbashOverview\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AtbashEncoder() {\n  _s();\n  //Add this line in every cipher.\n  const [showOverview, setShowOverview] = useState(false);\n  const encode = text => {\n    let encoded = \"\";\n    for (let i = 0; i < text.length; i++) {\n      const charCode = text.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        encoded += String.fromCharCode(155 - charCode);\n      } else if (charCode >= 97 && charCode <= 122) {\n        encoded += String.fromCharCode(219 - charCode);\n      } else {\n        encoded += text[i];\n      }\n    }\n    return encoded;\n  };\n  const decode = text => {\n    return encode(text);\n  };\n\n  // Add the CipherOverview component in the return statement.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showOverview && /*#__PURE__*/_jsxDEV(CipherOverview, {\n      setShowOverview: setShowOverview,\n      Header: Header,\n      Description: Description,\n      Example: Example,\n      References: References\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      title: \"Atbash Cipher\",\n      setShowOverview: setShowOverview,\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(AtbashEncoder, \"aKVuUYg972ieEnXf0VLOX2nEfTA=\");\n_c = AtbashEncoder;\nvar _c;\n$RefreshReg$(_c, \"AtbashEncoder\");","map":{"version":3,"names":["React","useState","CipherFactory","CipherOverview","Header","Description","References","Example","jsxDEV","_jsxDEV","Fragment","_Fragment","AtbashEncoder","_s","showOverview","setShowOverview","encode","text","encoded","i","length","charCode","charCodeAt","String","fromCharCode","decode","children","fileName","_jsxFileName","lineNumber","columnNumber","title","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/atbash.js"],"sourcesContent":["//import useState from react\r\nimport React, { useState } from \"react\";\r\nimport CipherFactory from \"../../ui/EncryptDecrypt\";\r\nimport CipherOverview from \"../../ui/CipherOverview\";\r\n\r\nimport { Header,\r\n    Description,\r\n  References,\r\n  Example,\r\n } from \"../../overviews/AtbashOverview\";\r\n\r\n\r\nexport default function AtbashEncoder() {\r\n\r\n    //Add this line in every cipher.\r\n  const [showOverview, setShowOverview] = useState(false);\r\n  const encode = (text) => {\r\n    let encoded = \"\";\r\n    for (let i = 0; i < text.length; i++) {\r\n      const charCode = text.charCodeAt(i);\r\n      if (charCode >= 65 && charCode <= 90) {\r\n        encoded += String.fromCharCode(155 - charCode);\r\n      } else if (charCode >= 97 && charCode <= 122) {\r\n        encoded += String.fromCharCode(219 - charCode);\r\n      } else {\r\n        encoded += text[i];\r\n      }\r\n    }\r\n    return encoded;\r\n  };\r\n\r\n  const decode = (text) => {\r\n    return encode(text);\r\n  };\r\n\r\n  // Add the CipherOverview component in the return statement.\r\n\r\n  return (\r\n    <>\r\n      {showOverview && (\r\n        <CipherOverview\r\n          setShowOverview={setShowOverview}\r\n          Header={Header}\r\n          Description={Description}\r\n          Example={Example}\r\n          References={References}\r\n        />\r\n      )}\r\n      <CipherFactory\r\n        title={\"Atbash Cipher\"}\r\n        setShowOverview = {setShowOverview}\r\n        encode={encode}\r\n        decode={decode}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,yBAAyB;AACnD,OAAOC,cAAc,MAAM,yBAAyB;AAEpD,SAASC,MAAM,EACXC,WAAW,EACbC,UAAU,EACVC,OAAO,QACD,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGzC,eAAe,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EAEpC;EACF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMe,MAAM,GAAIC,IAAI,IAAK;IACvB,IAAIC,OAAO,GAAG,EAAE;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,MAAME,QAAQ,GAAGJ,IAAI,CAACK,UAAU,CAACH,CAAC,CAAC;MACnC,IAAIE,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,EAAE,EAAE;QACpCH,OAAO,IAAIK,MAAM,CAACC,YAAY,CAAC,GAAG,GAAGH,QAAQ,CAAC;MAChD,CAAC,MAAM,IAAIA,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,GAAG,EAAE;QAC5CH,OAAO,IAAIK,MAAM,CAACC,YAAY,CAAC,GAAG,GAAGH,QAAQ,CAAC;MAChD,CAAC,MAAM;QACLH,OAAO,IAAID,IAAI,CAACE,CAAC,CAAC;MACpB;IACF;IACA,OAAOD,OAAO;EAChB,CAAC;EAED,MAAMO,MAAM,GAAIR,IAAI,IAAK;IACvB,OAAOD,MAAM,CAACC,IAAI,CAAC;EACrB,CAAC;;EAED;;EAEA,oBACER,OAAA,CAAAE,SAAA;IAAAe,QAAA,GACGZ,YAAY,iBACXL,OAAA,CAACN,cAAc;MACbY,eAAe,EAAEA,eAAgB;MACjCX,MAAM,EAAEA,MAAO;MACfC,WAAW,EAAEA,WAAY;MACzBE,OAAO,EAAEA,OAAQ;MACjBD,UAAU,EAAEA;IAAW;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF,eACDrB,OAAA,CAACP,aAAa;MACZ6B,KAAK,EAAE,eAAgB;MACvBhB,eAAe,EAAIA,eAAgB;MACnCC,MAAM,EAAEA,MAAO;MACfS,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC;EAAA,eACF,CAAC;AAEP;AAACjB,EAAA,CA5CuBD,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}