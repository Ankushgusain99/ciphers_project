{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\BCD.js\";\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncodedDecimal() {\n  // Encode decimal to BCD\n  function decimalToBcd(decimal) {\n    let bcd = '';\n    const decimalString = decimal.toString();\n    for (let i = 0; i < decimalString.length; i++) {\n      const digit = parseInt(decimalString[i]);\n      const bcdDigit = digit.toString(2).padStart(4, '0');\n      bcd += bcdDigit;\n    }\n    return bcd;\n  }\n\n  // Decode BCD to decimal\n  function bcdToDecimal(bcd) {\n    let decimal = '';\n    for (let i = 0; i < bcd.length; i += 4) {\n      const digit = parseInt(bcd.substr(i, 4), 2);\n      decimal += digit.toString();\n    }\n    return parseInt(decimal, 10);\n  }\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: decimalToBcd,\n    decode: bcdToDecimal\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 14\n  }, this);\n}\n_c = BinaryEncodedDecimal;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncodedDecimal\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","BinaryEncodedDecimal","decimalToBcd","decimal","bcd","decimalString","toString","i","length","digit","parseInt","bcdDigit","padStart","bcdToDecimal","substr","encode","decode","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/BCD.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncodedDecimal() {\r\n\r\n// Encode decimal to BCD\r\nfunction decimalToBcd(decimal) {\r\n    let bcd = '';\r\n    const decimalString = decimal.toString();\r\n  \r\n    for (let i = 0; i < decimalString.length; i++) {\r\n      const digit = parseInt(decimalString[i]);\r\n      const bcdDigit = digit.toString(2).padStart(4, '0');\r\n      bcd += bcdDigit;\r\n    }\r\n  \r\n    return bcd;\r\n  }\r\n  \r\n  // Decode BCD to decimal\r\n  function bcdToDecimal(bcd) {\r\n    let decimal = '';\r\n    for (let i = 0; i < bcd.length; i += 4) {\r\n      const digit = parseInt(bcd.substr(i, 4), 2);\r\n      decimal += digit.toString();\r\n    }\r\n  \r\n    return parseInt(decimal, 10);\r\n  }\r\n\r\n  \r\n \r\n      return <CipherFactory encode={decimalToBcd} decode={bcdToDecimal} />\r\n};\r\n\r\n\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,eAAe,SAASC,oBAAoBA,CAAA,EAAG;EAE/C;EACA,SAASC,YAAYA,CAACC,OAAO,EAAE;IAC3B,IAAIC,GAAG,GAAG,EAAE;IACZ,MAAMC,aAAa,GAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC;IAExC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,aAAa,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,MAAME,KAAK,GAAGC,QAAQ,CAACL,aAAa,CAACE,CAAC,CAAC,CAAC;MACxC,MAAMI,QAAQ,GAAGF,KAAK,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACM,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACnDR,GAAG,IAAIO,QAAQ;IACjB;IAEA,OAAOP,GAAG;EACZ;;EAEA;EACA,SAASS,YAAYA,CAACT,GAAG,EAAE;IACzB,IAAID,OAAO,GAAG,EAAE;IAChB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,CAACI,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACtC,MAAME,KAAK,GAAGC,QAAQ,CAACN,GAAG,CAACU,MAAM,CAACP,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAC3CJ,OAAO,IAAIM,KAAK,CAACH,QAAQ,CAAC,CAAC;IAC7B;IAEA,OAAOI,QAAQ,CAACP,OAAO,EAAE,EAAE,CAAC;EAC9B;EAII,oBAAOH,OAAA,CAACF,aAAa;IAACiB,MAAM,EAAEb,YAAa;IAACc,MAAM,EAAEH;EAAa;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1E;AAACC,EAAA,GA9BuBpB,oBAAoB;AA8B3C;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}