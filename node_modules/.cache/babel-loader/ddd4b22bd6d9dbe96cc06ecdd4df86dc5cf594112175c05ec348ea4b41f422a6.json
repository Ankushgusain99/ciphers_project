{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding({\n  ongetInfo\n}) {\n  _s();\n  //const [inputText, setInputText] = React.useState('');\n  const [arr, setArr] = useState(['']);\n  let abc = 0;\n  function encode(str) {\n    let result = Number(str);\n    abc = result;\n    result = (result >>> 0).toString(2);\n    setArr(result);\n    return result;\n  }\n  function decode(bin) {\n    let result = Number(bin);\n    result = (result >>> 0).toString(2);\n    setArr(result);\n    return result();\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decimal Number: A number expressed in base-10, using digits from 0 to 9.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Steps are as follows:-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), arr.map((value, index) => {\n        /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"After iteration Modulus of Decimal number with 2 we get \", value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"final Answer is : \", arr]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(BinaryEncoding, \"pm4PQmM/Q0sHkaaJvMCQe+0XKCI=\");\n_c = BinaryEncoding;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncoding","ongetInfo","_s","arr","setArr","abc","encode","str","result","Number","toString","decode","bin","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","index","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding({ongetInfo}) {\r\n  //const [inputText, setInputText] = React.useState('');\r\n  const [arr,setArr]=useState([''])\r\n  let abc=0;\r\n    function encode(str) {\r\n      let result =Number(str)\r\n      abc=result\r\n      result= (result >>> 0).toString(2);\r\n      setArr(result)\r\n      return result\r\n    }\r\n    \r\n    function decode(bin) {\r\n      let result =Number(bin)\r\n      result= (result >>> 0).toString(2);\r\n      setArr(result)\r\n      return result()\r\n    }\r\n  \r\n      const showInformation=()=>{\r\n        const info=(\r\n          <>\r\n            <p>\r\n      Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\r\n    </p>\r\n    <ul>\r\n      <li>Decimal Number: A number expressed in base-10, using digits from 0 to 9.</li>\r\n      <li>Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.</li>\r\n      <li>Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.</li>\r\n      <li>Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).</li>\r\n      <li>Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.</li>\r\n    </ul>\r\n          <p>Steps are as follows:-</p>\r\n          {arr.map((value,index)=>{\r\n            <p>After iteration Modulus of Decimal number with 2 we get {value}</p>\r\n          })}\r\n          <p>final Answer is : {arr}</p>\r\n          </>\r\n        )\r\n        ongetInfo(info)\r\n      }\r\n\r\n      React.useEffect(()=>{\r\n        showInformation()\r\n      },[])\r\n      return (\r\n      <>\r\n        \r\n        <CipherFactory encode={encode} decode={decode} />\r\n      </>\r\n      )\r\n\r\n\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}