{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\caesar.js\";\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CaesarCipher(props) {\n  // Create a function to encode a string using the Caesar cipher\n  function encode(str, shift) {\n    // Create an array of the characters in the string\n    const chars = str.split('');\n\n    // Shift each character by the specified number of positions\n    const encodedChars = chars.map(char => {\n      const charCode = char.charCodeAt(0);\n      let newCharCode = charCode + shift;\n      if (charCode >= 65 && charCode <= 90) {\n        // Handle uppercase characters\n        if (newCharCode < 65) {\n          newCharCode = 90 - (65 - newCharCode - 1);\n        } else if (newCharCode > 90) {\n          newCharCode = 65 + (newCharCode - 90 - 1);\n        }\n      } else if (charCode >= 97 && charCode <= 122) {\n        // Handle lowercase characters\n        if (newCharCode < 97) {\n          newCharCode = 122 - (97 - newCharCode - 1);\n        } else if (newCharCode > 122) {\n          newCharCode = 97 + (newCharCode - 122 - 1);\n        }\n      }\n      return String.fromCharCode(newCharCode);\n    });\n\n    // Return the encoded string\n    return encodedChars.join('');\n  }\n\n  // Create a function to decode a string using the Caesar cipher\n  function decode(str, shift) {\n    // Encode the string with a negative shift to reverse the original shift\n    return encode(str, -shift);\n  }\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 1\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 12\n  }, this);\n}\n_c = CaesarCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"CaesarCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","CaesarCipher","props","encode","str","shift","chars","split","encodedChars","map","char","charCode","charCodeAt","newCharCode","String","fromCharCode","join","decode","keyComponentA","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/caesar.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function CaesarCipher(props) {\r\n\r\n    // Create a function to encode a string using the Caesar cipher\r\n    function encode(str, shift) {\r\n        // Create an array of the characters in the string\r\n        const chars = str.split('');\r\n\r\n        // Shift each character by the specified number of positions\r\n        const encodedChars = chars.map((char) => {\r\n            const charCode = char.charCodeAt(0);\r\n            let newCharCode = charCode + shift;\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                // Handle uppercase characters\r\n                if (newCharCode < 65) {\r\n                    newCharCode = 90 - (65 - newCharCode - 1);\r\n                } else if (newCharCode > 90) {\r\n                    newCharCode = 65 + (newCharCode - 90 - 1);\r\n                }\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                // Handle lowercase characters\r\n                if (newCharCode < 97) {\r\n                    newCharCode = 122 - (97 - newCharCode - 1);\r\n                } else if (newCharCode > 122) {\r\n                    newCharCode = 97 + (newCharCode - 122 - 1);\r\n                }\r\n            }\r\n            return String.fromCharCode(newCharCode);\r\n        });\r\n\r\n        // Return the encoded string\r\n        return encodedChars.join('');\r\n    }\r\n\r\n    // Create a function to decode a string using the Caesar cipher\r\n    function decode(str, shift) {\r\n        // Encode the string with a negative shift to reverse the original shift\r\n        return encode(str, -shift);\r\n    }\r\n\r\n\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={1} />\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,eAAe,SAASC,YAAYA,CAACC,KAAK,EAAE;EAExC;EACA,SAASC,MAAMA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACxB;IACA,MAAMC,KAAK,GAAGF,GAAG,CAACG,KAAK,CAAC,EAAE,CAAC;;IAE3B;IACA,MAAMC,YAAY,GAAGF,KAAK,CAACG,GAAG,CAAEC,IAAI,IAAK;MACrC,MAAMC,QAAQ,GAAGD,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC;MACnC,IAAIC,WAAW,GAAGF,QAAQ,GAAGN,KAAK;MAClC,IAAIM,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,EAAE,EAAE;QAClC;QACA,IAAIE,WAAW,GAAG,EAAE,EAAE;UAClBA,WAAW,GAAG,EAAE,IAAI,EAAE,GAAGA,WAAW,GAAG,CAAC,CAAC;QAC7C,CAAC,MAAM,IAAIA,WAAW,GAAG,EAAE,EAAE;UACzBA,WAAW,GAAG,EAAE,IAAIA,WAAW,GAAG,EAAE,GAAG,CAAC,CAAC;QAC7C;MACJ,CAAC,MAAM,IAAIF,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,GAAG,EAAE;QAC1C;QACA,IAAIE,WAAW,GAAG,EAAE,EAAE;UAClBA,WAAW,GAAG,GAAG,IAAI,EAAE,GAAGA,WAAW,GAAG,CAAC,CAAC;QAC9C,CAAC,MAAM,IAAIA,WAAW,GAAG,GAAG,EAAE;UAC1BA,WAAW,GAAG,EAAE,IAAIA,WAAW,GAAG,GAAG,GAAG,CAAC,CAAC;QAC9C;MACJ;MACA,OAAOC,MAAM,CAACC,YAAY,CAACF,WAAW,CAAC;IAC3C,CAAC,CAAC;;IAEF;IACA,OAAOL,YAAY,CAACQ,IAAI,CAAC,EAAE,CAAC;EAChC;;EAEA;EACA,SAASC,MAAMA,CAACb,GAAG,EAAEC,KAAK,EAAE;IACxB;IACA,OAAOF,MAAM,CAACC,GAAG,EAAE,CAACC,KAAK,CAAC;EAC9B;EAIA,oBAAOL,OAAA,CAACF,aAAa;IAACK,MAAM,EAAEA,MAAO;IAACc,MAAM,EAAEA,MAAO;IAACC,aAAa,EAAE;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9E;AAACC,EAAA,GA1CuBtB,YAAY;AA0CnC;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}