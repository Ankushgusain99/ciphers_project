{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\atbash.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AtbashEncoder({\n  ongetInfo,\n  onEncryptInfo,\n  onDecryptInfo\n}) {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [inputChars, setInputChars] = useState([]);\n  const [outputChars, setOutputChars] = useState([]);\n  const encode = text => {\n    let encoded = '';\n    const encodedChars = [];\n    const decodedChars = [];\n    for (let i = 0; i < text.length; i++) {\n      const charCode = text.charCodeAt(i);\n      let encodedChar = '';\n      if (charCode >= 65 && charCode <= 90) {\n        encodedChar = String.fromCharCode(155 - charCode);\n      } else if (charCode >= 97 && charCode <= 122) {\n        encodedChar = String.fromCharCode(219 - charCode);\n      } else {\n        encodedChar = text[i];\n      }\n      encoded += encodedChar;\n      encodedChars.push(encodedChar);\n      decodedChars.push(text[i]);\n    }\n    setInputText(text);\n    setInputChars([...inputChars, text]);\n    setOutputChars([...outputChars, encoded]);\n    return encoded;\n  };\n  const decode = text => {\n    return encode(text);\n  };\n  const encryptInfo = () => {};\n  const decryptInfo = () => {};\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Atbash Cipher is a substitution cipher where each letter in the plaintext is replaced with its reverse in the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Atbash Cipher, simply enter your text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by its reverse counterpart in the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Reversed Alphabet: The alphabet is reversed, with 'A' becoming 'Z', 'B' becoming 'Y', and so on.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, replace each letter in the plaintext with its corresponding reverse letter.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The Atbash Cipher is self-reciprocal, meaning the same algorithm is used for both encryption and decryption.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes 'Z', 'B' becomes 'Y', 'C' becomes 'X', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(AtbashEncoder, \"O52AVFFJ0qRkxg8PsuhBebU+8os=\");\n_c = AtbashEncoder;\nvar _c;\n$RefreshReg$(_c, \"AtbashEncoder\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AtbashEncoder","ongetInfo","onEncryptInfo","onDecryptInfo","_s","inputText","setInputText","inputChars","setInputChars","outputChars","setOutputChars","encode","text","encoded","encodedChars","decodedChars","i","length","charCode","charCodeAt","encodedChar","String","fromCharCode","push","decode","encryptInfo","decryptInfo","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/atbash.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function AtbashEncoder({ ongetInfo,onEncryptInfo,onDecryptInfo}) {\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputChars, setInputChars] = useState([]);\r\n    const [outputChars, setOutputChars] = useState([]);\r\n\r\n    const encode = (text) => {\r\n        let encoded = '';\r\n        const encodedChars = [];\r\n        const decodedChars = [];\r\n\r\n        for (let i = 0; i < text.length; i++) {\r\n            const charCode = text.charCodeAt(i);\r\n            let encodedChar = '';\r\n\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                encodedChar = String.fromCharCode(155 - charCode);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                encodedChar = String.fromCharCode(219 - charCode);\r\n            } else {\r\n                encodedChar = text[i];\r\n            }\r\n\r\n            encoded += encodedChar;\r\n            encodedChars.push(encodedChar);\r\n            decodedChars.push(text[i]);\r\n        }\r\n\r\n        setInputText(text);\r\n        setInputChars([...inputChars, text]);\r\n        setOutputChars([...outputChars, encoded]);\r\n\r\n        return encoded;\r\n    };\r\n\r\n    const decode = (text) => {\r\n        return encode(text);\r\n    };\r\n\r\n    const encryptInfo=()=>{\r\n\r\n    }\r\n\r\n    const decryptInfo=()=>{\r\n\r\n    }\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The Atbash Cipher is a substitution cipher where each letter in the plaintext is replaced with its reverse in the alphabet.\r\n                </p>\r\n                <p>To encrypt using the Atbash Cipher, simply enter your text.</p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each letter in the plaintext is replaced by its reverse counterpart in the alphabet.</li>\r\n                    <li>Reversed Alphabet: The alphabet is reversed, with 'A' becoming 'Z', 'B' becoming 'Y', and so on.</li>\r\n                    <li>Encryption: To encrypt, replace each letter in the plaintext with its corresponding reverse letter.</li>\r\n                    <li>Decryption: The Atbash Cipher is self-reciprocal, meaning the same algorithm is used for both encryption and decryption.</li>\r\n                    <li>Example: 'A' becomes 'Z', 'B' becomes 'Y', 'C' becomes 'X', and so forth.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return (\r\n\r\n        <CipherFactory encode={encode} decode={decode} />\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}