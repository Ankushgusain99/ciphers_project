{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Base64.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Base64Encoding({\n  ongetInfo\n}) {\n  _s();\n  // Encode a string using ASCII cipher\n  function encode(str) {\n    return btoa(str);\n  }\n\n  // Decode a string using ASCII cipher\n  function decode(str) {\n    return atob(str);\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Autokey Cipher is a substitution cipher that extends the Vigen\\xE8re cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigen\\xE8re cipher's key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 14\n  }, this);\n}\n_s(Base64Encoding, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Base64Encoding;\n;\nvar _c;\n$RefreshReg$(_c, \"Base64Encoding\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","Base64Encoding","ongetInfo","_s","encode","str","btoa","decode","atob","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Base64.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../ui/EncryptDecrypt';\r\n\r\nexport default function Base64Encoding({ongetInfo}) {\r\n\r\n// Encode a string using ASCII cipher\r\nfunction encode(str) {\r\n    return btoa(str);\r\n  }\r\n  \r\n  // Decode a string using ASCII cipher\r\n  function decode(str) {\r\n    return atob(str);\r\n  }      \r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\nThe Autokey Cipher is a substitution cipher that extends the Vigenère cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\r\n</p>\r\n<p>\r\nTo encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\r\n</p>\r\n<ul>\r\n<li>Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.</li>\r\n<li>Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigenère cipher's key.</li>\r\n<li>Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.</li>\r\n<li>Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.</li>\r\n<li>Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.</li>\r\n</ul>\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []);\r\n\r\n      return <CipherFactory encode={encode} decode={decode} />\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjD,eAAe,SAASC,cAAcA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAEpD;EACA,SAASC,MAAMA,CAACC,GAAG,EAAE;IACjB,OAAOC,IAAI,CAACD,GAAG,CAAC;EAClB;;EAEA;EACA,SAASE,MAAMA,CAACF,GAAG,EAAE;IACnB,OAAOG,IAAI,CAACH,GAAG,CAAC;EAClB;EACA,MAAMI,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,IAAI,gBACNZ,OAAA,CAAAE,SAAA;MAAAW,QAAA,gBACIb,OAAA;QAAAa,QAAA,EAAG;MAEf;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJjB,OAAA;QAAAa,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJjB,OAAA;QAAAa,QAAA,gBACAb,OAAA;UAAAa,QAAA,EAAI;QAAwI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjJjB,OAAA;UAAAa,QAAA,EAAI;QAAgH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzHjB,OAAA;UAAAa,QAAA,EAAI;QAA6J;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtKjB,OAAA;UAAAa,QAAA,EAAI;QAAkK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3KjB,OAAA;UAAAa,QAAA,EAAI;QAAuI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5I,CAAC;IAAA,eACK,CACL;IACDb,SAAS,CAACQ,IAAI,CAAC;EACnB,CAAC;EAEDf,KAAK,CAACqB,SAAS,CAAC,MAAM;IAClBP,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEA,oBAAOX,OAAA,CAACF,aAAa;IAACQ,MAAM,EAAEA,MAAO;IAACG,MAAM,EAAEA;EAAO;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9D;AAACZ,EAAA,CArCuBF,cAAc;AAAAgB,EAAA,GAAdhB,cAAc;AAqCrC;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}