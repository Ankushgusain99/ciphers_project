{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\atbash.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AtbashEncoder({\n  ongetInfo\n}) {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [outputText, setOutputText] = useState('');\n  const encode = text => {\n    let encoded = '';\n    for (let i = 0; i < text.length; i++) {\n      const charCode = text.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        encoded += String.fromCharCode(155 - charCode);\n      } else if (charCode >= 97 && charCode <= 122) {\n        encoded += String.fromCharCode(219 - charCode);\n      } else {\n        encoded += text[i];\n      }\n    }\n    return encoded;\n  };\n  const decode = text => {\n    return encode(text);\n  };\n  const handleInputChange = e => {\n    const text = e.target.value;\n    setInputText(text);\n    const encodedText = encode(text);\n    setOutputText(encodedText);\n  };\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Atbash Cipher is a substitution cipher where each letter in the plaintext is replaced with its reverse in the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Atbash Cipher, simply enter your text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by its reverse counterpart in the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Reversed Alphabet: The alphabet is reversed, with 'A' becoming 'Z', 'B' becoming 'Y', and so on.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, replace each letter in the plaintext with its corresponding reverse letter.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The Atbash Cipher is self-reciprocal, meaning the same algorithm is used for both encryption and decryption.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes 'Z', 'B' becomes 'Y', 'C' becomes 'X', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputText,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Encrypt Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Decrypt Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: encode(inputText)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: decode(outputText)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(AtbashEncoder, \"VGqdEOGqToXWvJrMM3BKCDtpSpM=\");\n_c = AtbashEncoder;\nvar _c;\n$RefreshReg$(_c, \"AtbashEncoder\");","map":{"version":3,"names":["React","useState","useEffect","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AtbashEncoder","ongetInfo","_s","inputText","setInputText","outputText","setOutputText","encode","text","encoded","i","length","charCode","charCodeAt","String","fromCharCode","decode","handleInputChange","e","target","value","encodedText","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/atbash.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function AtbashEncoder({ ongetInfo }) {\r\n  const [inputText, setInputText] = useState('');\r\n  const [outputText, setOutputText] = useState('');\r\n\r\n  const encode = (text) => {\r\n    let encoded = '';\r\n    for (let i = 0; i < text.length; i++) {\r\n      const charCode = text.charCodeAt(i);\r\n      if (charCode >= 65 && charCode <= 90) {\r\n        encoded += String.fromCharCode(155 - charCode);\r\n      } else if (charCode >= 97 && charCode <= 122) {\r\n        encoded += String.fromCharCode(219 - charCode);\r\n      } else {\r\n        encoded += text[i];\r\n      }\r\n    }\r\n    return encoded;\r\n  };\r\n\r\n  const decode = (text) => {\r\n    return encode(text);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const text = e.target.value;\r\n    setInputText(text);\r\n    const encodedText = encode(text);\r\n    setOutputText(encodedText);\r\n  };\r\n\r\n  const showInformation = () => {\r\n    const info = (\r\n      <>\r\n        <p>\r\n          The Atbash Cipher is a substitution cipher where each letter in the plaintext is replaced with its reverse\r\n          in the alphabet.\r\n        </p>\r\n        <p>To encrypt using the Atbash Cipher, simply enter your text.</p>\r\n        <ul>\r\n          <li>Substitution Cipher: Each letter in the plaintext is replaced by its reverse counterpart in the alphabet.</li>\r\n          <li>Reversed Alphabet: The alphabet is reversed, with 'A' becoming 'Z', 'B' becoming 'Y', and so on.</li>\r\n          <li>Encryption: To encrypt, replace each letter in the plaintext with its corresponding reverse letter.</li>\r\n          <li>Decryption: The Atbash Cipher is self-reciprocal, meaning the same algorithm is used for both encryption and decryption.</li>\r\n          <li>Example: 'A' becomes 'Z', 'B' becomes 'Y', 'C' becomes 'X', and so forth.</li>\r\n        </ul>\r\n      </>\r\n    );\r\n    ongetInfo(info);\r\n  };\r\n\r\n  useEffect(() => {\r\n    showInformation();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <input type=\"text\" value={inputText} onChange={handleInputChange} />\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Encrypt Text</th>\r\n            <th>Decrypt Text</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{encode(inputText)}</td>\r\n            <td>{decode(outputText)}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <CipherFactory encode={encode} decode={decode} />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}