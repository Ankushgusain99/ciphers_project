{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\atbash.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AtbashEncoder({\n  ongetInfo\n}) {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [outputText, setOutputText] = useState('');\n  const encode = text => {\n    let encoded = '';\n    for (let i = 0; i < text.length; i++) {\n      const charCode = text.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        encoded += String.fromCharCode(155 - charCode);\n        setOutputText(String.fromCharCode(155 - charCode));\n      } else if (charCode >= 97 && charCode <= 122) {\n        encoded += String.fromCharCode(219 - charCode);\n        setOutputText(String.fromCharCode(219 - charCode));\n      } else {\n        encoded += text[i];\n        setOutputText(text[i]);\n      }\n      setInputText(charCode);\n    }\n    return encoded;\n  };\n  const decode = text => {\n    return encode(text);\n  };\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Atbash Cipher is a substitution cipher where each letter in the plaintext is replaced with its reverse in the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Atbash Cipher, simply enter your text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by its reverse counterpart in the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Reversed Alphabet: The alphabet is reversed, with 'A' becoming 'Z', 'B' becoming 'Y', and so on.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, replace each letter in the plaintext with its corresponding reverse letter.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The Atbash Cipher is self-reciprocal, meaning the same algorithm is used for both encryption and decryption.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes 'Z', 'B' becomes 'Y', 'C' becomes 'X', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Encrypted Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Decrypted Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: inputText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: outputText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(AtbashEncoder, \"w4Eh60/Ad1pZ3/0Rt3NMMvp4U3k=\");\n_c = AtbashEncoder;\n;\nvar _c;\n$RefreshReg$(_c, \"AtbashEncoder\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AtbashEncoder","ongetInfo","_s","inputText","setInputText","outputText","setOutputText","encode","text","encoded","i","length","charCode","charCodeAt","String","fromCharCode","decode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/atbash.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\nexport default function AtbashEncoder({ongetInfo}) {\r\n    const[inputText,setInputText]=useState('')\r\n    const[outputText,setOutputText]=useState('')\r\n    const encode = (text) => {\r\n        let encoded = '';\r\n        for (let i = 0; i < text.length; i++) {\r\n            const charCode = text.charCodeAt(i);\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                encoded += String.fromCharCode(155 - charCode);\r\n                setOutputText(String.fromCharCode(155 - charCode))\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                encoded += String.fromCharCode(219 - charCode);\r\n                setOutputText(String.fromCharCode(219 - charCode))\r\n            } else {\r\n                encoded += text[i];\r\n                setOutputText(text[i])\r\n            }\r\n            setInputText(charCode)\r\n            \r\n        }\r\n        return encoded;\r\n    };\r\n\r\n    const decode = (text) => {\r\n        return encode(text);\r\n    };\r\n    \r\n    \r\n    const showInformation=()=>{\r\n        const info = (\r\n            <>\r\n              <p>\r\n                The Atbash Cipher is a substitution cipher where each letter in the plaintext is replaced with its reverse in the alphabet.\r\n              </p>\r\n              <p>To encrypt using the Atbash Cipher, simply enter your text.</p>\r\n              <ul>\r\n                <li>Substitution Cipher: Each letter in the plaintext is replaced by its reverse counterpart in the alphabet.</li>\r\n                <li>Reversed Alphabet: The alphabet is reversed, with 'A' becoming 'Z', 'B' becoming 'Y', and so on.</li>\r\n                <li>Encryption: To encrypt, replace each letter in the plaintext with its corresponding reverse letter.</li>\r\n                <li>Decryption: The Atbash Cipher is self-reciprocal, meaning the same algorithm is used for both encryption and decryption.</li>\r\n                <li>Example: 'A' becomes 'Z', 'B' becomes 'Y', 'C' becomes 'X', and so forth.</li>\r\n              </ul>\r\n            \r\n            </>\r\n          );\r\n        ongetInfo(info)\r\n    }\r\n    React.useEffect(() => {\r\n        showInformation();\r\n      }, []);\r\n    \r\n\r\n    return( \r\n    <>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td>Encrypted Text</td>\r\n                    <td>Decrypted Text</td>\r\n                </tr>\r\n            </thead>\r\n            <tr>\r\n                <td>{inputText}</td>\r\n                <td>{outputText}</td>\r\n            </tr>\r\n        </table>\r\n        <CipherFactory encode={encode} decode={decode} />\r\n    </>\r\n    \r\n    \r\n    )\r\n\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}