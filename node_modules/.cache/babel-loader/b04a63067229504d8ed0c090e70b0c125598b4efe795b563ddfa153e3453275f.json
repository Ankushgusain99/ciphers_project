{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\AffineCipher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AffineCipher({\n  ongetInfo\n}) {\n  _s();\n  const [inputChars, setInputChars] = useState([]);\n  const [outputChars, setOutputChars] = useState([]);\n\n  // Function to encrypt a message using the affine cipher\n  function encryptAffine(message, a, b) {\n    // Convert message to uppercase and remove all spaces and special characters\n    message = message.toUpperCase().replace(/[^A-Z]/g, '');\n    let encryptedMessage = '';\n\n    // Iterate through each character in the message\n    for (let i = 0; i < message.length; i++) {\n      let charCode = message.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let encryptedCharCode = (a * charCode + b) % 26; // Apply the affine cipher formula\n      let encryptedChar = String.fromCharCode(encryptedCharCode + 65); // Convert encrypted number back to character\n      encryptedMessage += encryptedChar; // Add encrypted character to result string\n    }\n\n    // Update input and output arrays\n    setInputChars(prevInputChars => [...prevInputChars, ...message.split('')]);\n    setOutputChars(prevOutputChars => [...prevOutputChars, ...encryptedMessage.split('')]);\n  }\n\n  // Function to decrypt a message using the affine cipher\n  function decryptAffine(ciphertext, a, b) {\n    let decryptedMessage = '';\n\n    // Find the modular multiplicative inverse of a\n    let aInverse = -1;\n    for (let i = 0; i < 26; i++) {\n      if (i * a % 26 === 1) {\n        aInverse = i;\n        break;\n      }\n    }\n\n    // Iterate through each character in the ciphertext\n    for (let i = 0; i < ciphertext.length; i++) {\n      let charCode = ciphertext.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let decryptedCharCode = aInverse * (charCode - b + 26) % 26; // Apply the affine cipher formula\n      let decryptedChar = String.fromCharCode(decryptedCharCode + 65); // Convert decrypted number back to character\n      decryptedMessage += decryptedChar; // Add decrypted character to result string\n    }\n\n    // Update input and output arrays\n    setInputChars(ciphertext.split(''));\n    setOutputChars(prevOutputChars => [...prevOutputChars, ...decryptedMessage.split('')]);\n  }\n\n  // Show information about the Affine Cipher\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Affine Cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter. It employs a pair of keys (a, b), and each letter is encrypted using the formula (a * x + b) mod 26, where x is the numeric equivalent of the letter. To decrypt the message, the formula (a^-1 * (y - b + 26)) mod 26 is used, where y is the numeric equivalent of the encrypted letter and a^-1 is the modular multiplicative inverse of a modulo 26.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Affine Cipher, simply enter your text and choose appropriate keys for 'a' and 'b'.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by a different letter according to a fixed system.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Mathematical Formula: Encryption and decryption are based on modular arithmetic using the formula (a * x + b) mod 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Selection: The security of the cipher depends on the selection of keys 'a' and 'b', where 'a' must be coprime with 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The decryption process involves finding the modular multiplicative inverse of 'a' modulo 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: Using keys 'a' = 5 and 'b' = 8, 'A' becomes 'I', 'B' becomes 'N', 'C' becomes 'S', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n\n    // Call the function passed from the parent component to send the information\n    ongetInfo(info);\n  };\n\n  // Call the showInformation function when the component mounts\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid black',\n        padding: '10px',\n        margin: '20px',\n        overflow: 'scroll',\n        height: '200px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: '100%',\n          borderCollapse: 'collapse',\n          fontFamily: 'arial, sans-serif'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Input Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Output Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: inputChars.map((char, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: char\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: outputChars[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encryptAffine,\n      decode: decryptAffine,\n      keyComponentA: \"Key A\",\n      keyComponentB: \"Key B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(AffineCipher, \"aJnGWGO3QUvgKF3ku8bS81CCluE=\");\n_c = AffineCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"AffineCipher\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AffineCipher","ongetInfo","_s","inputChars","setInputChars","outputChars","setOutputChars","encryptAffine","message","a","b","toUpperCase","replace","encryptedMessage","i","length","charCode","charCodeAt","encryptedCharCode","encryptedChar","String","fromCharCode","prevInputChars","split","prevOutputChars","decryptAffine","ciphertext","decryptedMessage","aInverse","decryptedCharCode","decryptedChar","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","style","border","padding","margin","overflow","height","width","borderCollapse","fontFamily","fontSize","textAlign","map","char","index","encode","decode","keyComponentA","keyComponentB","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/AffineCipher.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function AffineCipher({ ongetInfo }) {\r\n    const [inputChars, setInputChars] = useState([]);\r\n    const [outputChars, setOutputChars] = useState([]);\r\n\r\n    // Function to encrypt a message using the affine cipher\r\n    function encryptAffine(message, a, b) {\r\n        // Convert message to uppercase and remove all spaces and special characters\r\n        message = message.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let encryptedMessage = '';\r\n\r\n        // Iterate through each character in the message\r\n        for (let i = 0; i < message.length; i++) {\r\n            let charCode = message.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n            let encryptedCharCode = (a * charCode + b) % 26;  // Apply the affine cipher formula\r\n            let encryptedChar = String.fromCharCode(encryptedCharCode + 65);  // Convert encrypted number back to character\r\n            encryptedMessage += encryptedChar;  // Add encrypted character to result string\r\n        }\r\n\r\n        // Update input and output arrays\r\n        setInputChars(prevInputChars => [...prevInputChars, ...message.split('')]);\r\n        setOutputChars(prevOutputChars => [...prevOutputChars, ...encryptedMessage.split('')]);\r\n    }\r\n\r\n    // Function to decrypt a message using the affine cipher\r\n    function decryptAffine(ciphertext, a, b) {\r\n        let decryptedMessage = '';\r\n\r\n        // Find the modular multiplicative inverse of a\r\n        let aInverse = -1;\r\n        for (let i = 0; i < 26; i++) {\r\n            if ((i * a) % 26 === 1) {\r\n                aInverse = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Iterate through each character in the ciphertext\r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            let charCode = ciphertext.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n            let decryptedCharCode = (aInverse * (charCode - b + 26)) % 26;  // Apply the affine cipher formula\r\n            let decryptedChar = String.fromCharCode(decryptedCharCode + 65);  // Convert decrypted number back to character\r\n            decryptedMessage += decryptedChar;  // Add decrypted character to result string\r\n        }\r\n\r\n        // Update input and output arrays\r\n        setInputChars(ciphertext.split(''));\r\n        setOutputChars(prevOutputChars => [...prevOutputChars, ...decryptedMessage.split('')]);\r\n    }\r\n\r\n    // Show information about the Affine Cipher\r\n    const showInformation = () => {\r\n        const info = (\r\n        <><p>\r\n            The Affine Cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter. It employs a pair of keys (a, b), and each letter is encrypted using the formula (a * x + b) mod 26, where x is the numeric equivalent of the letter. To decrypt the message, the formula (a^-1 * (y - b + 26)) mod 26 is used, where y is the numeric equivalent of the encrypted letter and a^-1 is the modular multiplicative inverse of a modulo 26.\r\n        </p>\r\n        <p>\r\n            To encrypt using the Affine Cipher, simply enter your text and choose appropriate keys for 'a' and 'b'.\r\n        </p>\r\n        <ul>\r\n            <li>Substitution Cipher: Each letter in the plaintext is replaced by a different letter according to a fixed system.</li>\r\n            <li>Mathematical Formula: Encryption and decryption are based on modular arithmetic using the formula (a * x + b) mod 26.</li>\r\n            <li>Key Selection: The security of the cipher depends on the selection of keys 'a' and 'b', where 'a' must be coprime with 26.</li>\r\n            <li>Decryption: The decryption process involves finding the modular multiplicative inverse of 'a' modulo 26.</li>\r\n            <li>Example: Using keys 'a' = 5 and 'b' = 8, 'A' becomes 'I', 'B' becomes 'N', 'C' becomes 'S', and so forth.</li>\r\n        </ul>\r\n        </>\r\n        );\r\n\r\n        // Call the function passed from the parent component to send the information\r\n        ongetInfo(info);\r\n    };\r\n\r\n    // Call the showInformation function when the component mounts\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div style={{ border: '1px solid black', padding: '10px', margin: '20px', overflow: 'scroll', height: '200px' }}>\r\n                <table style={{ width: '100%', borderCollapse: 'collapse', fontFamily: 'arial, sans-serif' }}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Input Text</th>\r\n                            <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Output Text</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody style={{ textAlign: 'center' }}>\r\n                        {inputChars.map((char, index) => (\r\n                            <tr key={index}>\r\n                                <td style={{ border: '1px solid black', padding: '8px' }}>{char}</td>\r\n                                <td style={{ border: '1px solid black', padding: '8px' }}>{outputChars[index]}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <CipherFactory encode={encryptAffine} decode={decryptAffine} keyComponentA=\"Key A\" keyComponentB=\"Key B\" />\r\n        </>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}