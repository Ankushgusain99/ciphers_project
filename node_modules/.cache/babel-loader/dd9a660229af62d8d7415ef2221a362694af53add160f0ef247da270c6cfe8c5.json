{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding({\n  ongetInfo\n}) {\n  _s();\n  //const [inputText, setInputText] = React.useState('');\n  let abc = 0;\n  function encode(str) {\n    let result = Number(str);\n    abc = result;\n    result = (result >>> 0).toString(2);\n    return result.toString();\n  }\n  function decode(bin) {\n    let result = Number(bin);\n    result = (result >>> 0).toString(2);\n    return result.toString();\n  }\n  const showInformation = () => {\n    let htmlContent = `\n      <p>\n        Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\n      </p>\n      <ul>\n        <li>Decimal Number: A number expressed in base-10, using digits from 0 to 9.</li>\n        <li>Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.</li>\n        <li>Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.</li>\n        <li>Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).</li>\n        <li>Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.</li>\n      </ul>\n      <p>Steps are as follows:-</p>\n      <ul>\n    `;\n    let res = Number(abc);\n    let final = '';\n    while (res > 0) {\n      const a = res % 2;\n      final += a;\n      htmlContent += `\n        <li>MODULUS of ${res} and 2 is ${a} and the number becomes ${res / 2}</li>\n      `;\n      res = res / 2;\n    }\n    [...final].reverse().join('');\n    /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The result is \", final]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this);\n    htmlContent += '</ul>';\n    ongetInfo(htmlContent);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(BinaryEncoding, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BinaryEncoding;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncoding","ongetInfo","_s","abc","encode","str","result","Number","toString","decode","bin","showInformation","htmlContent","res","final","a","reverse","join","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding({ongetInfo}) {\r\n  //const [inputText, setInputText] = React.useState('');\r\n  let abc=0;\r\n    function encode(str) {\r\n      let result =Number(str)\r\n      abc=result\r\n      result= (result >>> 0).toString(2);\r\n      \r\n      return result.toString()\r\n    }\r\n    \r\n    function decode(bin) {\r\n      let result =Number(bin)\r\n      result= (result >>> 0).toString(2);\r\n\r\n      return result.toString()\r\n    }\r\n\r\n  \r\n      const showInformation=()=>{\r\n        let htmlContent = `\r\n      <p>\r\n        Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\r\n      </p>\r\n      <ul>\r\n        <li>Decimal Number: A number expressed in base-10, using digits from 0 to 9.</li>\r\n        <li>Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.</li>\r\n        <li>Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.</li>\r\n        <li>Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).</li>\r\n        <li>Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.</li>\r\n      </ul>\r\n      <p>Steps are as follows:-</p>\r\n      <ul>\r\n    `;\r\n    \r\n    let res = Number(abc);\r\n    let final=''\r\n    while (res > 0) {\r\n      const a = res % 2;\r\n      final+=a\r\n      htmlContent += `\r\n        <li>MODULUS of ${res} and 2 is ${a} and the number becomes ${res/2}</li>\r\n      `;\r\n      res = res / 2;\r\n    }\r\n    [...final].reverse().join('');\r\n    <p>The result is {final}</p>\r\n    htmlContent += '</ul>';\r\n        ongetInfo(htmlContent)\r\n      }\r\n\r\n      React.useEffect(()=>{\r\n        showInformation()\r\n      },[])\r\n      return (\r\n      <>\r\n        \r\n        <CipherFactory encode={encode} decode={decode} />\r\n      </>\r\n      )\r\n\r\n\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,cAAcA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAClD;EACA,IAAIC,GAAG,GAAC,CAAC;EACP,SAASC,MAAMA,CAACC,GAAG,EAAE;IACnB,IAAIC,MAAM,GAAEC,MAAM,CAACF,GAAG,CAAC;IACvBF,GAAG,GAACG,MAAM;IACVA,MAAM,GAAE,CAACA,MAAM,KAAK,CAAC,EAAEE,QAAQ,CAAC,CAAC,CAAC;IAElC,OAAOF,MAAM,CAACE,QAAQ,CAAC,CAAC;EAC1B;EAEA,SAASC,MAAMA,CAACC,GAAG,EAAE;IACnB,IAAIJ,MAAM,GAAEC,MAAM,CAACG,GAAG,CAAC;IACvBJ,MAAM,GAAE,CAACA,MAAM,KAAK,CAAC,EAAEE,QAAQ,CAAC,CAAC,CAAC;IAElC,OAAOF,MAAM,CAACE,QAAQ,CAAC,CAAC;EAC1B;EAGE,MAAMG,eAAe,GAACA,CAAA,KAAI;IACxB,IAAIC,WAAW,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,IAAIC,GAAG,GAAGN,MAAM,CAACJ,GAAG,CAAC;IACrB,IAAIW,KAAK,GAAC,EAAE;IACZ,OAAOD,GAAG,GAAG,CAAC,EAAE;MACd,MAAME,CAAC,GAAGF,GAAG,GAAG,CAAC;MACjBC,KAAK,IAAEC,CAAC;MACRH,WAAW,IAAK;AACtB,yBAAyBC,GAAI,aAAYE,CAAE,2BAA0BF,GAAG,GAAC,CAAE;AAC3E,OAAO;MACDA,GAAG,GAAGA,GAAG,GAAG,CAAC;IACf;IACA,CAAC,GAAGC,KAAK,CAAC,CAACE,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IAC7B,aAAApB,OAAA;MAAAqB,QAAA,GAAG,gBAAc,EAACJ,KAAK;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;IAC5BV,WAAW,IAAI,OAAO;IAClBX,SAAS,CAACW,WAAW,CAAC;EACxB,CAAC;EAEDlB,KAAK,CAAC6B,SAAS,CAAC,MAAI;IAClBZ,eAAe,CAAC,CAAC;EACnB,CAAC,EAAC,EAAE,CAAC;EACL,oBACAd,OAAA,CAAAE,SAAA;IAAAmB,QAAA,eAEErB,OAAA,CAACF,aAAa;MAACS,MAAM,EAAEA,MAAO;MAACK,MAAM,EAAEA;IAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACjD,CAAC;AAIT;AAACpB,EAAA,CA9DuBF,cAAc;AAAAwB,EAAA,GAAdxB,cAAc;AA8DrC;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}