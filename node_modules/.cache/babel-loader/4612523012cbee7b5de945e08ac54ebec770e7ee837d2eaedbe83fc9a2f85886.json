{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Bifid.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BifidCipher({\n  ongetInfo\n}) {\n  _s();\n  // Function to encrypt plaintext using the Autokey cipher\n\n  function buildPolybiusSquare(key) {\n    // Remove duplicates and keep only alphabets (A-Z)\n    const alphabet = [...new Set(key.toUpperCase().replace(/[^A-Z]/g, ''))];\n\n    // Create a 5x5 square (adjust size if needed)\n    const squareSize = 5;\n    const square = [];\n    for (let i = 0; i < squareSize; i++) {\n      square.push(alphabet.slice(i * squareSize, (i + 1) * squareSize));\n    }\n    return square;\n  }\n  function findLetterIndex(letter, square) {\n    for (let row = 0; row < square.length; row++) {\n      const index = square[row].indexOf(letter);\n      if (index !== -1) {\n        return {\n          row: row + 1,\n          col: index + 1\n        };\n      }\n    }\n    return null;\n  }\n  function encode(message, key) {\n    const square = buildPolybiusSquare(key);\n    let ciphertext = \"\";\n    for (let i = 0; i < message.length; i += 2) {\n      const letter1 = message[i];\n      const letter2 = message[i + 1] || 'X'; // Use 'X' for padding if single letter\n\n      const index1 = findLetterIndex(letter1, square);\n      const index2 = findLetterIndex(letter2, square);\n      if (index1 && index2) {\n        ciphertext += `${index1.row}${index2.row}${index1.col}${index2.col}`;\n      }\n    }\n    return ciphertext;\n  }\n\n  // Function to decrypt ciphertext using the Bifid Cipher\n  function decode(ciphertext, keySquare) {\n    // Define the Polybius square\n    const polybiusSquare = keySquare.toUpperCase().replace(/J/g, 'I');\n\n    // Create a map to store the coordinates of each letter in the Polybius square\n    const charMap = {};\n    for (let i = 0; i < polybiusSquare.length; i++) {\n      const row = Math.floor(i / 5) + 1;\n      const col = i % 5 + 1;\n      charMap[polybiusSquare[i]] = [row, col];\n    }\n\n    // Convert ciphertext letters to their corresponding row and column numbers\n    let numbers = '';\n    for (let i = 0; i < ciphertext.length; i++) {\n      const letter = ciphertext[i];\n      const index = polybiusSquare.indexOf(letter);\n      const row = Math.floor(index / 5) + 1;\n      const col = index % 5 + 1;\n      numbers += row.toString() + col.toString();\n    }\n\n    // Split the string of numbers into two equal parts\n    const halfLength = numbers.length / 2;\n    const combinedNumbers = numbers.slice(0, halfLength) + numbers.slice(halfLength);\n\n    // Read out the combined numbers to get the plaintext\n    let plaintext = '';\n    for (let i = 0; i < halfLength; i++) {\n      const row = combinedNumbers[i];\n      const col = combinedNumbers[i + halfLength];\n      plaintext += polybiusSquare[(parseInt(row) - 1) * 5 + parseInt(col) - 1];\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Autokey Cipher is a substitution cipher that extends the Vigen\\xE8re cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigen\\xE8re cipher's key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 12\n  }, this);\n}\n_s(BifidCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BifidCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"BifidCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BifidCipher","ongetInfo","_s","buildPolybiusSquare","key","alphabet","Set","toUpperCase","replace","squareSize","square","i","push","slice","findLetterIndex","letter","row","length","index","indexOf","col","encode","message","ciphertext","letter1","letter2","index1","index2","decode","keySquare","polybiusSquare","charMap","Math","floor","numbers","toString","halfLength","combinedNumbers","plaintext","parseInt","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Bifid.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BifidCipher({ ongetInfo }) {\r\n    // Function to encrypt plaintext using the Autokey cipher\r\n\r\n    function buildPolybiusSquare(key) {\r\n        // Remove duplicates and keep only alphabets (A-Z)\r\n        const alphabet = [...new Set(key.toUpperCase().replace(/[^A-Z]/g, ''))];\r\n      \r\n        // Create a 5x5 square (adjust size if needed)\r\n        const squareSize = 5;\r\n        const square = [];\r\n        for (let i = 0; i < squareSize; i++) {\r\n          square.push(alphabet.slice(i * squareSize, (i + 1) * squareSize));\r\n        }\r\n        return square;\r\n      }\r\n      \r\n      function findLetterIndex(letter, square) {\r\n        for (let row = 0; row < square.length; row++) {\r\n          const index = square[row].indexOf(letter);\r\n          if (index !== -1) {\r\n            return { row: row + 1, col: index + 1 };\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      \r\n      function encode(message, key) {\r\n        const square = buildPolybiusSquare(key);\r\n        let ciphertext = \"\";\r\n      \r\n        for (let i = 0; i < message.length; i += 2) {\r\n          const letter1 = message[i];\r\n          const letter2 = message[i + 1] || 'X'; // Use 'X' for padding if single letter\r\n      \r\n          const index1 = findLetterIndex(letter1, square);\r\n          const index2 = findLetterIndex(letter2, square);\r\n      \r\n          if (index1 && index2) {\r\n            ciphertext += `${index1.row}${index2.row}${index1.col}${index2.col}`;\r\n          }\r\n        }\r\n      \r\n        return ciphertext;\r\n      }\r\n      \r\n    \r\n    // Function to decrypt ciphertext using the Bifid Cipher\r\n    function decode(ciphertext, keySquare) {\r\n        // Define the Polybius square\r\n        const polybiusSquare = keySquare.toUpperCase().replace(/J/g, 'I');\r\n    \r\n        // Create a map to store the coordinates of each letter in the Polybius square\r\n        const charMap = {};\r\n        for (let i = 0; i < polybiusSquare.length; i++) {\r\n            const row = Math.floor(i / 5) + 1;\r\n            const col = (i % 5) + 1;\r\n            charMap[polybiusSquare[i]] = [row, col];\r\n        }\r\n    \r\n        // Convert ciphertext letters to their corresponding row and column numbers\r\n        let numbers = '';\r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            const letter = ciphertext[i];\r\n            const index = polybiusSquare.indexOf(letter);\r\n            const row = Math.floor(index / 5) + 1;\r\n            const col = (index % 5) + 1;\r\n            numbers += row.toString() + col.toString();\r\n        }\r\n    \r\n        // Split the string of numbers into two equal parts\r\n        const halfLength = numbers.length / 2;\r\n        const combinedNumbers = numbers.slice(0, halfLength) + numbers.slice(halfLength);\r\n    \r\n        // Read out the combined numbers to get the plaintext\r\n        let plaintext = '';\r\n        for (let i = 0; i < halfLength; i++) {\r\n            const row = combinedNumbers[i];\r\n            const col = combinedNumbers[i + halfLength];\r\n            plaintext += polybiusSquare[(parseInt(row) - 1) * 5 + parseInt(col) - 1];\r\n        }\r\n    \r\n        return plaintext;\r\n    }\r\n\r\n\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n    The Autokey Cipher is a substitution cipher that extends the Vigenère cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\r\n</p>\r\n<p>\r\n    To encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\r\n</p>\r\n<ul>\r\n    <li>Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.</li>\r\n    <li>Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigenère cipher's key.</li>\r\n    <li>Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.</li>\r\n    <li>Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.</li>\r\n    <li>Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.</li>\r\n</ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'}/>\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}