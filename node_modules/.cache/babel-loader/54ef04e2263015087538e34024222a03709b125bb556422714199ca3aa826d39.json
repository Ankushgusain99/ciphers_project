{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\ADFGVX.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ADFGVX({\n  ongetInfo\n}) {\n  _s();\n  // Encode a string using ASCII cipher\n  function encode(text, keyword) {\n    const grid = [['A', 'D', 'F', 'G', 'V', 'X'], ['a', 'd', 'f', 'g', 'v', 'x'], ['B', 'E', 'H', 'I', 'W', 'Y'], ['b', 'e', 'h', 'i', 'w', 'y'], ['C', 'K', 'L', 'M', 'N', 'O'], ['c', 'k', 'l', 'm', 'n', 'o'], ['P', 'Q', 'R', 'S', 'T', 'U'], ['p', 'q', 'r', 's', 't', 'u']];\n\n    // Encrypt text using ADFGVX cipher\n    let ciphertext = '';\n    for (let char of text) {\n      // Find the row and column indices of the character in the grid\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j] === char) {\n            rowIndex = i;\n            colIndex = j;\n            break;\n          }\n        }\n      }\n      // If the character is found in the grid, append its coordinates to the ciphertext\n      if (rowIndex !== -1 && colIndex !== -1) {\n        ciphertext += 'ADFGVX'[rowIndex] + 'ADFGVX'[colIndex];\n      }\n    }\n    return ciphertext;\n  }\n\n  // Decode a string using ASCII cipher\n  function decode(str) {\n    var result = '';\n    var elements = str.split('-');\n    for (var i = 0; i < elements.length; i++) {\n      result += String.fromCharCode(elements[i]);\n    }\n    return result;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. Each character in the plaintext is replaced with its corresponding ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, convert each character in the plaintext to its ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves converting each ASCII value back to its corresponding character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 14\n  }, this);\n}\n_s(ADFGVX, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ADFGVX;\n;\nvar _c;\n$RefreshReg$(_c, \"ADFGVX\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","ADFGVX","ongetInfo","_s","encode","text","keyword","grid","ciphertext","char","rowIndex","colIndex","i","length","j","decode","str","result","elements","split","String","fromCharCode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/ADFGVX.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\n\r\nexport default function ADFGVX({ongetInfo}) {\r\n\r\n// Encode a string using ASCII cipher\r\nfunction encode(text,keyword) {\r\n    const grid = [\r\n        ['A', 'D', 'F', 'G', 'V', 'X'],\r\n        ['a', 'd', 'f', 'g', 'v', 'x'],\r\n        ['B', 'E', 'H', 'I', 'W', 'Y'],\r\n        ['b', 'e', 'h', 'i', 'w', 'y'],\r\n        ['C', 'K', 'L', 'M', 'N', 'O'],\r\n        ['c', 'k', 'l', 'm', 'n', 'o'],\r\n        ['P', 'Q', 'R', 'S', 'T', 'U'],\r\n        ['p', 'q', 'r', 's', 't', 'u'],\r\n      ];\r\n    \r\n      // Encrypt text using ADFGVX cipher\r\n      let ciphertext = '';\r\n      for (let char of text) {\r\n        // Find the row and column indices of the character in the grid\r\n        let rowIndex = -1;\r\n        let colIndex = -1;\r\n        for (let i = 0; i < grid.length; i++) {\r\n          for (let j = 0; j < grid[i].length; j++) {\r\n            if (grid[i][j] === char) {\r\n              rowIndex = i;\r\n              colIndex = j;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        // If the character is found in the grid, append its coordinates to the ciphertext\r\n        if (rowIndex !== -1 && colIndex !== -1) {\r\n          ciphertext += 'ADFGVX'[rowIndex] + 'ADFGVX'[colIndex];\r\n        }\r\n      }\r\n      return ciphertext;\r\n  }\r\n  \r\n  // Decode a string using ASCII cipher\r\n  function decode(str) {\r\n    var result = '';\r\n    var elements = str.split('-');\r\n    for (var i = 0; i < elements.length; i++) {\r\n      result += String.fromCharCode(elements[i]);\r\n    }\r\n    return result;\r\n  }      \r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\n                The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. \r\n                Each character in the plaintext is replaced with its corresponding ASCII value.\r\n            </p>\r\n            <p>\r\n                To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\r\n            </p>\r\n            <ul>\r\n                <li>Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.</li>\r\n                <li>ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.</li>\r\n                <li>Encryption: To encrypt, convert each character in the plaintext to its ASCII value.</li>\r\n                <li>Decryption: Decryption involves converting each ASCII value back to its corresponding character.</li>\r\n                <li>Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.</li>\r\n            </ul>\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []);\r\n\r\n      return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}