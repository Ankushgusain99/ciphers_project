{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\Base64.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Base64Encoding({\n  ongetInfo\n}) {\n  _s();\n  // Encode a string using ASCII cipher\n  function encode(str) {\n    const asciiStringEncoded = btoa(str);\n    return asciiStringEncoded;\n  }\n\n  // Decode a string using ASCII cipher\n  function decode(str) {\n    return atob(str);\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Base64 encoding is a method of encoding binary data into ASCII text format. It converts binary data into a string of ASCII characters, making it suitable for transmission over protocols that require text data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encode using Base64, each group of three bytes (24 bits) in the binary data is converted into a group of four ASCII characters from the Base64 character set. If the input data length is not divisible by three, padding characters '=' are added to make the length a multiple of three.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encoding Method: Base64 encoding converts binary data into a string of ASCII characters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Character Set: Base64 encoding uses a character set consisting of 64 different characters, typically composed of letters (uppercase and lowercase), numbers, and two additional characters for padding.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Padding: Padding characters ('=') are added if the binary data length is not divisible by three.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Common Uses: Base64 encoding is commonly used in email systems, HTML and CSS data-URI embedding, and encoding binary data in URLs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: The string \\\"Hello, World!\\\" encoded in Base64 format might look like \\\"SGVsbG8sIFdvcmxkIQ==\\\".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 14\n  }, this);\n}\n_s(Base64Encoding, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Base64Encoding;\n;\nvar _c;\n$RefreshReg$(_c, \"Base64Encoding\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","Base64Encoding","ongetInfo","_s","encode","str","asciiStringEncoded","btoa","decode","atob","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/Base64.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function Base64Encoding({ongetInfo}) {\r\n\r\n// Encode a string using ASCII cipher\r\nfunction encode(str) {\r\n  const asciiStringEncoded = btoa(str);\r\n  return asciiStringEncoded\r\n  }\r\n  \r\n  // Decode a string using ASCII cipher\r\n  function decode(str) {\r\n    return atob(str);\r\n  }      \r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\nBase64 encoding is a method of encoding binary data into ASCII text format. It converts binary data into a string of ASCII characters, making it suitable for transmission over protocols that require text data.\r\n</p>\r\n<p>\r\nTo encode using Base64, each group of three bytes (24 bits) in the binary data is converted into a group of four ASCII characters from the Base64 character set. If the input data length is not divisible by three, padding characters '=' are added to make the length a multiple of three.\r\n</p>\r\n<ul>\r\n<li>Encoding Method: Base64 encoding converts binary data into a string of ASCII characters.</li>\r\n<li>Character Set: Base64 encoding uses a character set consisting of 64 different characters, typically composed of letters (uppercase and lowercase), numbers, and two additional characters for padding.</li>\r\n<li>Padding: Padding characters ('=') are added if the binary data length is not divisible by three.</li>\r\n<li>Common Uses: Base64 encoding is commonly used in email systems, HTML and CSS data-URI embedding, and encoding binary data in URLs.</li>\r\n<li>Example: The string \"Hello, World!\" encoded in Base64 format might look like \"SGVsbG8sIFdvcmxkIQ==\".</li>\r\n</ul>\r\n\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []);\r\n\r\n      return <CipherFactory encode={encode} decode={decode} />\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,cAAcA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAEpD;EACA,SAASC,MAAMA,CAACC,GAAG,EAAE;IACnB,MAAMC,kBAAkB,GAAGC,IAAI,CAACF,GAAG,CAAC;IACpC,OAAOC,kBAAkB;EACzB;;EAEA;EACA,SAASE,MAAMA,CAACH,GAAG,EAAE;IACnB,OAAOI,IAAI,CAACJ,GAAG,CAAC;EAClB;EACA,MAAMK,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,IAAI,gBACNb,OAAA,CAAAE,SAAA;MAAAY,QAAA,gBACId,OAAA;QAAAc,QAAA,EAAG;MAEf;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJlB,OAAA;QAAAc,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJlB,OAAA;QAAAc,QAAA,gBACAd,OAAA;UAAAc,QAAA,EAAI;QAAwF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjGlB,OAAA;UAAAc,QAAA,EAAI;QAAuM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChNlB,OAAA;UAAAc,QAAA,EAAI;QAAgG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzGlB,OAAA;UAAAc,QAAA,EAAI;QAAkI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3IlB,OAAA;UAAAc,QAAA,EAAI;QAAoG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzG,CAAC;IAAA,eAEK,CACL;IACDd,SAAS,CAACS,IAAI,CAAC;EACnB,CAAC;EAEDhB,KAAK,CAACsB,SAAS,CAAC,MAAM;IAClBP,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEA,oBAAOZ,OAAA,CAACF,aAAa;IAACQ,MAAM,EAAEA,MAAO;IAACI,MAAM,EAAEA;EAAO;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9D;AAACb,EAAA,CAvCuBF,cAAc;AAAAiB,EAAA,GAAdjB,cAAc;AAuCrC;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}