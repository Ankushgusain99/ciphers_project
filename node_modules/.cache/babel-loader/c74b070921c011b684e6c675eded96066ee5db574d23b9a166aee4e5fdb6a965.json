{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\BCD.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncodedDecimalN({\n  ongetInfo\n}) {\n  _s();\n  // Encode decimal to BCD\n  function decimalToBcd(decimal) {\n    let bcd = '';\n    const decimalString = decimal.toString();\n    for (let i = 0; i < decimalString.length; i++) {\n      const digit = parseInt(decimalString[i]);\n      const bcdDigit = digit.toString(2).padStart(4, '0');\n      bcd += bcdDigit;\n    }\n    return bcd;\n  }\n\n  // Decode BCD to decimal\n  function bcdToDecimal(bcd) {\n    let decimal = '';\n    for (let i = 0; i < bcd.length; i += 4) {\n      const digit = parseInt(bcd.substr(i, 4), 2);\n      decimal += digit.toString();\n    }\n    return parseInt(decimal, 10);\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"BCD (Binary-Coded Decimal) encoding is a binary representation of decimal numbers where each decimal digit is represented by a fixed number of binary digits.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encode using BCD encoding, each decimal digit of the plaintext number is represented by its corresponding four-digit binary code.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary-Coded Decimal: Each decimal digit is represented by a fixed number of binary digits, typically four binary digits per decimal digit.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encoding Scheme: BCD encoding represents each decimal digit using its binary equivalent, ensuring efficient storage and manipulation of decimal numbers in digital systems.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decimal to Binary: Each decimal digit is converted to its binary equivalent using a fixed mapping.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: The decimal number 123 might be encoded as \\\"0001 0010 0011\\\" in BCD, where each group of four binary digits represents one decimal digit.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: decimalToBcd,\n    decode: bcdToDecimal\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 14\n  }, this);\n}\n_s(BinaryEncodedDecimalN, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BinaryEncodedDecimalN;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncodedDecimalN\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncodedDecimalN","ongetInfo","_s","decimalToBcd","decimal","bcd","decimalString","toString","i","length","digit","parseInt","bcdDigit","padStart","bcdToDecimal","substr","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","encode","decode","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/BCD.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncodedDecimalN({ongetInfo}) {\r\n\r\n// Encode decimal to BCD\r\nfunction decimalToBcd(decimal) {\r\n    let bcd = '';\r\n    const decimalString = decimal.toString();\r\n  \r\n    for (let i = 0; i < decimalString.length; i++) {\r\n      const digit = parseInt(decimalString[i]);\r\n      const bcdDigit = digit.toString(2).padStart(4, '0');\r\n      bcd += bcdDigit;\r\n    }\r\n  \r\n    return bcd;\r\n  }\r\n  \r\n  // Decode BCD to decimal\r\n  function bcdToDecimal(bcd) {\r\n    let decimal = '';\r\n    for (let i = 0; i < bcd.length; i += 4) {\r\n      const digit = parseInt(bcd.substr(i, 4), 2);\r\n      decimal += digit.toString();\r\n    }\r\n  \r\n    return parseInt(decimal, 10);\r\n  }\r\n\r\n  \r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\nBCD (Binary-Coded Decimal) encoding is a binary representation of decimal numbers where each decimal digit is represented by a fixed number of binary digits.\r\n</p>\r\n<p>\r\nTo encode using BCD encoding, each decimal digit of the plaintext number is represented by its corresponding four-digit binary code.\r\n</p>\r\n<ul>\r\n<li>Binary-Coded Decimal: Each decimal digit is represented by a fixed number of binary digits, typically four binary digits per decimal digit.</li>\r\n<li>Encoding Scheme: BCD encoding represents each decimal digit using its binary equivalent, ensuring efficient storage and manipulation of decimal numbers in digital systems.</li>\r\n<li>Decimal to Binary: Each decimal digit is converted to its binary equivalent using a fixed mapping.</li>\r\n<li>Example: The decimal number 123 might be encoded as \"0001 0010 0011\" in BCD, where each group of four binary digits represents one decimal digit.</li>\r\n</ul>\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []);\r\n\r\n      return <CipherFactory encode={decimalToBcd} decode={bcdToDecimal} />\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}