{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\overviews\\\\AutoKeyOverview.js\";\nimport { Typography, Flex } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Image,\n  Text,\n  Link\n} = Typography;\nconst Header = () => {\n  return /*#__PURE__*/_jsxDEV(Title, {\n    children: \"AutoKey Cipher\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n};\n_c = Header;\nconst Description = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      children: \"The AutoKey Cipher is a polyalphabetic substitution cipher used for encryption. It enhances the Vigen\\xE8re Cipher by incorporating the plaintext into the key. Initially, a short key is chosen, and then the plaintext itself is appended to this key. This method ensures that each letter is encrypted using a different shift value, making the encryption more secure. It's a more complex yet effective way to obscure text by using the plaintext to influence the key.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Description;\nconst Example = () => {\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    vertical: true,\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      children: \"Write down the plaintext message: HELLO.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"Use the Atbash Cipher to encode the message.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"Replace each letter in the plaintext message with its reverse counterpart in the alphabet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"H becomes S (H is the 8th letter from the start, S is the 8th letter from the end).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"E becomes V (E is the 5th letter from the start, V is the 5th letter from the end).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"L becomes O (L is the 12th letter from the start, O is the 12th letter from the end).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"L becomes O (L is the 12th letter from the start, O is the 12th letter from the end).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"O becomes L (O is the 15th letter from the start, L is the 15th letter from the end).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"So, the encoded message is: SVOOL.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      wrap: \"wrap\",\n      justify: \"center\",\n      gap: 10,\n      style: {\n        margin: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Image, {\n        src: \"https://media.geeksforgeeks.org/wp-content/uploads/aa-4.jpg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }, this);\n};\n_c3 = Example;\nconst References = () => {\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    vertical: true,\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      href: \"https://www.geeksforgeeks.org/autokey-cipher-symmetric-ciphers/\",\n      target: \"_blank\",\n      children: \"https://www.geeksforgeeks.org/autokey-cipher-symmetric-ciphers/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_c4 = References;\nexport { Header, Description, Example, References };\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Description\");\n$RefreshReg$(_c3, \"Example\");\n$RefreshReg$(_c4, \"References\");","map":{"version":3,"names":["Typography","Flex","jsxDEV","_jsxDEV","Title","Image","Text","Link","Header","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Description","_c2","Example","vertical","wrap","justify","gap","style","margin","src","_c3","References","href","target","_c4","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/overviews/AutoKeyOverview.js"],"sourcesContent":["\r\nimport { Typography, Flex } from \"antd\";\r\n\r\nconst { Title,Image, Text, Link } = Typography;\r\n\r\nconst Header = () => {\r\n  return <Title>AutoKey Cipher</Title>;\r\n};\r\n\r\nconst Description = () => {\r\n  return (\r\n    <div>\r\n      <Text>\r\n      The AutoKey Cipher is a polyalphabetic substitution cipher used for encryption. It enhances the Vigen√®re Cipher by incorporating the plaintext into the key. Initially, a short key is chosen, and then the plaintext itself is appended to this key. This method ensures that each letter is encrypted using a different shift value, making the encryption more secure. It's a more complex yet effective way to obscure text by using the plaintext to influence the key.\r\n      </Text>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Example = () => {\r\n    return (\r\n      <Flex vertical={true}>\r\n        <Text>Write down the plaintext message: HELLO.</Text>\r\n      <Text>Use the Atbash Cipher to encode the message.</Text>\r\n      <Text>Replace each letter in the plaintext message with its reverse counterpart in the alphabet.</Text>\r\n      <Text>H becomes S (H is the 8th letter from the start, S is the 8th letter from the end).</Text>\r\n      <Text>E becomes V (E is the 5th letter from the start, V is the 5th letter from the end).</Text>\r\n      <Text>L becomes O (L is the 12th letter from the start, O is the 12th letter from the end).</Text>\r\n      <Text>L becomes O (L is the 12th letter from the start, O is the 12th letter from the end).</Text>\r\n      <Text>O becomes L (O is the 15th letter from the start, L is the 15th letter from the end).</Text>\r\n      <Text>So, the encoded message is: SVOOL.</Text>\r\n        <Flex wrap=\"wrap\" justify=\"center\" gap={10} style={{ margin: 20 }}>\r\n          <Image src=\"https://media.geeksforgeeks.org/wp-content/uploads/aa-4.jpg\" />\r\n          \r\n        </Flex>\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  \r\nconst References = () => {\r\n  return (\r\n    <Flex vertical={true}>\r\n      <Link\r\n        href=\"https://www.geeksforgeeks.org/autokey-cipher-symmetric-ciphers/\"\r\n        target=\"_blank\"\r\n      >\r\n        https://www.geeksforgeeks.org/autokey-cipher-symmetric-ciphers/       \r\n        </Link>\r\n      \r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport { Header, Description, Example, References };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}