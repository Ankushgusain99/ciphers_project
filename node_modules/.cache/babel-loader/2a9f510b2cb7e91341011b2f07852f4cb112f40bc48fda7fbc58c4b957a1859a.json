{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\caesar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CaesarCipher({\n  ongetInfo,\n  onEncryptInfo,\n  onDecryptInfo\n}) {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [inputChars, setInputChars] = useState([]);\n  const [outputChars, setOutputChars] = useState([]);\n  const [key, setKey] = useState([]);\n  // Create a function to encode a string using the Caesar cipher\n  function encode(str, shift) {\n    let encodedChars = '';\n    for (let i = 0; i < str.length; i++) {\n      let char = str[i];\n      let charCode = char.charCodeAt(0);\n      if (charCode >= 65 && charCode <= 90) {\n        // Uppercase letters\n        char = String.fromCharCode((charCode - 65 + shift) % 26 + 65);\n      } else if (charCode >= 97 && charCode <= 122) {\n        // Lowercase letters\n        char = String.fromCharCode((charCode - 97 + shift) % 26 + 97);\n      }\n      encodedChars += char;\n      setKey(shift);\n    }\n    setInputText(str);\n    setInputChars([...inputChars, str]);\n    setOutputChars([...outputChars, encodedChars]);\n    return encodedChars;\n  }\n\n  // Create a function to decode a string using the Caesar cipher\n  function decode(str, shift) {\n    // Encode the string with a negative shift to reverse the original shift\n    return encode(str, -shift);\n  }\n  const encryptInfo = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Steps are as follows:- \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), inputChars.map((value, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"For the alphabet \", value, \" we are getting \", outputChars[index], \" after adding key which is \", key, \" to the last index\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true);\n    onEncryptInfo(info);\n  };\n  const decryptInfo = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Steps are as follows:- \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), inputChars.map((value, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"For the alphabet \", value, \" we are getting \", outputChars[index], \" after subtracting key which is \", key, \" to the last index\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true);\n    onEncryptInfo(info);\n  };\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Caesar cipher, specify a shift value and enter your text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Shift: The number of positions each letter in the plaintext is shifted.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  React.useEffect(() => {\n    encryptInfo();\n  }, [inputText, key]);\n  React.useEffect(() => {\n    decryptInfo();\n  }, [inputText, key]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentA: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(CaesarCipher, \"kQ5bmkxUpwTVngRuz7FWpzTOdC4=\");\n_c = CaesarCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"CaesarCipher\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","CaesarCipher","ongetInfo","onEncryptInfo","onDecryptInfo","_s","inputText","setInputText","inputChars","setInputChars","outputChars","setOutputChars","key","setKey","encode","str","shift","encodedChars","i","length","char","charCode","charCodeAt","String","fromCharCode","decode","encryptInfo","info","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","index","decryptInfo","showInformation","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/caesar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function CaesarCipher({ongetInfo,onEncryptInfo,onDecryptInfo}) {\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputChars, setInputChars] = useState([]);\r\n    const [outputChars, setOutputChars] = useState([]);\r\n    const[key,setKey]=useState([])\r\n    // Create a function to encode a string using the Caesar cipher\r\n    function encode(str, shift) {\r\n        let encodedChars = '';\r\n    \r\n        for (let i = 0; i < str.length; i++) {\r\n            let char = str[i];\r\n            let charCode = char.charCodeAt(0);\r\n    \r\n            if (charCode >= 65 && charCode <= 90) {\r\n                // Uppercase letters\r\n                char = String.fromCharCode(((charCode - 65 + shift) % 26) + 65);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                // Lowercase letters\r\n                char = String.fromCharCode(((charCode - 97 + shift) % 26) + 97);\r\n            }\r\n    \r\n            encodedChars += char;\r\n            setKey(shift)\r\n        }\r\n    \r\n        setInputText(str);\r\n        setInputChars([...inputChars, str]);\r\n        setOutputChars([...outputChars, encodedChars]);\r\n    \r\n        return encodedChars;\r\n    }\r\n\r\n    // Create a function to decode a string using the Caesar cipher\r\n    function decode(str, shift) {\r\n        // Encode the string with a negative shift to reverse the original shift\r\n        return encode(str, -shift);\r\n    }\r\n\r\n    const encryptInfo=()=>{\r\n        const info=(\r\n            <>\r\n        <li>Steps are as follows:- </li>\r\n        {\r\n            inputChars.map((value ,index)=>(\r\n                <li>For the alphabet {value} we are getting {outputChars[index]} after adding key which is {key} to the last index</li>\r\n            ))\r\n        }\r\n        </>\r\n        );\r\n        onEncryptInfo(info)\r\n    }\r\n\r\n    const decryptInfo=()=>{\r\n        const info=(\r\n            <>\r\n        <li>Steps are as follows:- </li>\r\n        {\r\n            inputChars.map((value ,index)=>(\r\n                <li>For the alphabet {value} we are getting {outputChars[index]} after subtracting key which is {key} to the last index</li>\r\n            ))\r\n        }\r\n        </>\r\n        );\r\n        onEncryptInfo(info)\r\n    }\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\r\n                </p>\r\n                <p>To encrypt using the Caesar cipher, specify a shift value and enter your text.</p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.</li>\r\n                    <li>Shift: The number of positions each letter in the plaintext is shifted.</li>\r\n                    <li>Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.</li>\r\n                    <li>Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        encryptInfo();\r\n    }, [inputText,key]);\r\n\r\n    React.useEffect(() => {\r\n        decryptInfo();\r\n    }, [inputText,key]);\r\n\r\n    return( \r\n    <>\r\n        \r\n        <CipherFactory encode={encode} decode={decode} keyComponentA={1} />\r\n    </>\r\n    \r\n)\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}