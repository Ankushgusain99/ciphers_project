{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\94 Cipher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cipher94({\n  ongetInfo\n}) {\n  _s();\n  function encode(plaintext, shift) {\n    let ciphertext = '';\n    for (let char of plaintext) {\n      let code = char.charCodeAt(0);\n      if (code >= 32 && code <= 126) {\n        let newCode = (code - 32 + shift) % 94 + 32;\n        ciphertext += String.fromCharCode(newCode);\n      } else {\n        ciphertext += char;\n      }\n    }\n    return ciphertext;\n  }\n  function decode(ciphertext, shift) {\n    let plaintext = '';\n    for (let char of ciphertext) {\n      let code = char.charCodeAt(0);\n      if (code >= 32 && code <= 126) {\n        let newCode = (code - 32 - shift + 94) % 94 + 32;\n        plaintext += String.fromCharCode(newCode);\n      } else {\n        plaintext += char;\n      }\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Affine Cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter. It employs a pair of keys (a, b), and each letter is encrypted using the formula (a * x + b) mod 26, where x is the numeric equivalent of the letter. To decrypt the message, the formula (a^-1 * (y - b + 26)) mod 26 is used, where y is the numeric equivalent of the encrypted letter and a^-1 is the modular multiplicative inverse of a modulo 26.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Affine Cipher, simply enter your text and choose appropriate keys for 'a' and 'b'.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by a different letter according to a fixed system.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Mathematical Formula: Encryption and decryption are based on modular arithmetic using the formula (a * x + b) mod 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Selection: The security of the cipher depends on the selection of keys 'a' and 'b', where 'a' must be coprime with 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The decryption process involves finding the modular multiplicative inverse of 'a' modulo 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: Using keys 'a' = 5 and 'b' = 8, 'A' becomes 'I', 'B' becomes 'N', 'C' becomes 'S', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n\n    // Call the function passed from the parent component to send the information\n  };\n\n  // Call the showInformation function when the component mounts\n  React.useEffect(() => {\n    let info = showInformation();\n    ongetInfo(info);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentA: \"Key A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Cipher94, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Cipher94;\n;\nvar _c;\n$RefreshReg$(_c, \"Cipher94\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","Cipher94","ongetInfo","_s","encode","plaintext","shift","ciphertext","char","code","charCodeAt","newCode","String","fromCharCode","decode","showInformation","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","info","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/94 Cipher.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function Cipher94({ ongetInfo}) {\r\n\r\n    function encode(plaintext, shift) {\r\n        let ciphertext = '';\r\n        for (let char of plaintext) {\r\n            let code = char.charCodeAt(0);\r\n            if (code >= 32 && code <= 126) {\r\n                let newCode = ((code - 32 + shift) % 94) + 32;\r\n                ciphertext += String.fromCharCode(newCode);\r\n            } else {\r\n                ciphertext += char;\r\n            }\r\n        }\r\n        return ciphertext;\r\n    }\r\n    \r\n    function decode(ciphertext, shift) {\r\n        let plaintext = '';\r\n        for (let char of ciphertext) {\r\n            let code = char.charCodeAt(0);\r\n            if (code >= 32 && code <= 126) {\r\n                let newCode = ((code - 32 - shift + 94) % 94) + 32;\r\n                plaintext += String.fromCharCode(newCode);\r\n            } else {\r\n                plaintext += char;\r\n            }\r\n        }\r\n        return plaintext;\r\n    }\r\n    \r\n        \r\n    const showInformation = () => {\r\n        return(\r\n        <><p>\r\n            The Affine Cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter. It employs a pair of keys (a, b), and each letter is encrypted using the formula (a * x + b) mod 26, where x is the numeric equivalent of the letter. To decrypt the message, the formula (a^-1 * (y - b + 26)) mod 26 is used, where y is the numeric equivalent of the encrypted letter and a^-1 is the modular multiplicative inverse of a modulo 26.\r\n        </p>\r\n        <p>\r\n            To encrypt using the Affine Cipher, simply enter your text and choose appropriate keys for 'a' and 'b'.\r\n        </p>\r\n        <ul>\r\n            <li>Substitution Cipher: Each letter in the plaintext is replaced by a different letter according to a fixed system.</li>\r\n            <li>Mathematical Formula: Encryption and decryption are based on modular arithmetic using the formula (a * x + b) mod 26.</li>\r\n            <li>Key Selection: The security of the cipher depends on the selection of keys 'a' and 'b', where 'a' must be coprime with 26.</li>\r\n            <li>Decryption: The decryption process involves finding the modular multiplicative inverse of 'a' modulo 26.</li>\r\n            <li>Example: Using keys 'a' = 5 and 'b' = 8, 'A' becomes 'I', 'B' becomes 'N', 'C' becomes 'S', and so forth.</li>\r\n        </ul>\r\n        \r\n        </>\r\n        );\r\n\r\n        // Call the function passed from the parent component to send the information\r\n    };\r\n\r\n    // Call the showInformation function when the component mounts\r\n    React.useEffect(() => {\r\n        let info=showInformation();\r\n        ongetInfo(info)\r\n    }, []);\r\n\r\n    \r\n    return (\r\n        <>\r\n            \r\n            <CipherFactory encode={encode} decode={decode} keyComponentA=\"Key A\"/>\r\n        </>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}