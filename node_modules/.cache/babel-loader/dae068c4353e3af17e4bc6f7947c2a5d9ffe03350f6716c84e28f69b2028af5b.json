{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\AffineCipher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AffineCipher({\n  ongetInfo\n}, {\n  onEncryptInfo\n}, {\n  onDecryptInfo\n}) {\n  _s();\n  const [text, setText] = useState([]);\n  const [inputChars, setInputChars] = useState([]);\n  const [outputChars, setOutputChars] = useState([]);\n  const [key1, setKey1] = useState(0);\n  const [key2, setKey2] = useState(0);\n  // Function to encrypt a message using the affine cipher\n  function encryptAffine(message, a, b) {\n    // Convert message to uppercase and remove all spaces and special characters\\\n    message = message.toUpperCase().replace(/[^A-Z]/g, '');\n    let result = '';\n\n    // Iterate through each character in the message\n    for (let i = 0; i < message.length; i++) {\n      let charCode = message.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let encryptedCharCode = (a * charCode + b) % 26; // Apply the affine cipher formula\n      let encryptedChar = String.fromCharCode(encryptedCharCode + 65); // Convert encrypted number back to character\n      result += encryptedChar; // Add encrypted character to result string\n      console.log(encryptedCharCode);\n      setKey1(a);\n      setKey2(b);\n      setText([...text, message[i]]);\n      setInputChars([...inputChars, encryptedCharCode]);\n      setOutputChars([...outputChars, encryptedChar]);\n    }\n    return result;\n  }\n\n  // Function to decrypt a message using the affine cipher\n  function decryptAffine(ciphertext, a, b) {\n    let result = '';\n    // Find the modular multiplicative inverse of a\n    let aInverse = -1;\n    for (let i = 0; i < 26; i++) {\n      if (i * a % 26 === 1) {\n        aInverse = i;\n        break;\n      }\n    }\n\n    // Iterate through each character in the ciphertext\n    for (let i = 0; i < ciphertext.length; i++) {\n      let charCode = ciphertext.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let decryptedCharCode = aInverse * (charCode - b + 26) % 26; // Apply the affine cipher formula\n      let decryptedChar = String.fromCharCode(decryptedCharCode + 65); // Convert decrypted number back to character\n      result += decryptedChar; // Add decrypted character to result string\n    }\n    return result;\n  }\n  // Show information about the Affine Cipher\n\n  const showEncryptInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Steps for encrption are as follows:-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"We have the keys a as \", key1, \" and b as \", key2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), inputChars.map((value, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"After converting \", text[index], \" to number and then using the formula of a*x+b MODULUS 26 we get \", value, \" and again after converting it to Alphabet we get \", outputChars[index]]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true);\n    onEncryptInfo(info);\n  };\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Affine Cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter. It employs a pair of keys (a, b), and each letter is encrypted using the formula (a * x + b) mod 26, where x is the numeric equivalent of the letter. To decrypt the message, the formula (a^-1 * (y - b + 26)) mod 26 is used, where y is the numeric equivalent of the encrypted letter and a^-1 is the modular multiplicative inverse of a modulo 26.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Affine Cipher, simply enter your text and choose appropriate keys for 'a' and 'b'.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by a different letter according to a fixed system.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Mathematical Formula: Encryption and decryption are based on modular arithmetic using the formula (a * x + b) mod 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Selection: The security of the cipher depends on the selection of keys 'a' and 'b', where 'a' must be coprime with 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The decryption process involves finding the modular multiplicative inverse of 'a' modulo 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: Using keys 'a' = 5 and 'b' = 8, 'A' becomes 'I', 'B' becomes 'N', 'C' becomes 'S', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n\n    // Call the function passed from the parent component to send the information\n    ongetInfo(info);\n  };\n\n  // Call the showInformation function when the component mounts\n  React.useEffect(() => {\n    showInformation();\n    showEncryptInformation();\n  }, [text, key1, key2]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encryptAffine,\n      decode: decryptAffine,\n      keyComponentA: \"Key A\",\n      keyComponentB: \"Key B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(AffineCipher, \"3O6xfz2fEjOB3ay6k2bQgO+lXE8=\");\n_c = AffineCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"AffineCipher\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AffineCipher","ongetInfo","onEncryptInfo","onDecryptInfo","_s","text","setText","inputChars","setInputChars","outputChars","setOutputChars","key1","setKey1","key2","setKey2","encryptAffine","message","a","b","toUpperCase","replace","result","i","length","charCode","charCodeAt","encryptedCharCode","encryptedChar","String","fromCharCode","console","log","decryptAffine","ciphertext","aInverse","decryptedCharCode","decryptedChar","showEncryptInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","index","showInformation","useEffect","encode","decode","keyComponentA","keyComponentB","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/AffineCipher.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function AffineCipher({ ongetInfo },{onEncryptInfo},{onDecryptInfo}) {\r\n        const[text,setText]=useState([])\r\n        const[inputChars,setInputChars]=useState([])\r\n        const[outputChars,setOutputChars]=useState([])\r\n        const[key1,setKey1]=useState(0)\r\n        const[key2,setKey2]=useState(0)\r\n        // Function to encrypt a message using the affine cipher\r\n        function encryptAffine(message, a, b) {\r\n            // Convert message to uppercase and remove all spaces and special characters\\\r\n            message = message.toUpperCase().replace(/[^A-Z]/g, '');\r\n            let result = '';\r\n    \r\n            // Iterate through each character in the message\r\n            for (let i = 0; i < message.length; i++) {\r\n                let charCode = message.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n                let encryptedCharCode = (a * charCode + b) % 26;  // Apply the affine cipher formula\r\n                let encryptedChar = String.fromCharCode(encryptedCharCode + 65);  // Convert encrypted number back to character\r\n                result += encryptedChar;  // Add encrypted character to result string\r\n                console.log(encryptedCharCode)\r\n                setKey1(a)\r\n                setKey2(b)\r\n                setText([...text,message[i]])\r\n                setInputChars([...inputChars,encryptedCharCode])\r\n                setOutputChars([...outputChars,encryptedChar])\r\n            }\r\n            return result;\r\n        }\r\n    \r\n        // Function to decrypt a message using the affine cipher\r\n        function decryptAffine(ciphertext, a, b) {\r\n            let result = '';\r\n            // Find the modular multiplicative inverse of a\r\n            let aInverse = -1;\r\n            for (let i = 0; i < 26; i++) {\r\n                if ((i * a) % 26 === 1) {\r\n                    aInverse = i;\r\n                    break;\r\n                }\r\n            }\r\n    \r\n            // Iterate through each character in the ciphertext\r\n            for (let i = 0; i < ciphertext.length; i++) {\r\n                let charCode = ciphertext.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n                let decryptedCharCode = (aInverse * (charCode - b + 26)) % 26;  // Apply the affine cipher formula\r\n                let decryptedChar = String.fromCharCode(decryptedCharCode + 65);  // Convert decrypted number back to character\r\n                result += decryptedChar;  // Add decrypted character to result string\r\n            }\r\n    \r\n            return result;\r\n        }\r\n    // Show information about the Affine Cipher\r\n\r\n    const showEncryptInformation=()=>{\r\n        const info=(\r\n            <>\r\n                <p>Steps for encrption are as follows:-</p>\r\n        <li>We have the keys a as {key1} and b as {key2}</li>\r\n        {\r\n\r\n            inputChars.map((value,index)=>(\r\n                <li key={index}>After converting {text[index]} to number and then using the formula of a*x+b MODULUS 26 we get {value} and again after converting it to Alphabet we get {outputChars[index]}</li>\r\n\r\n            ))\r\n        }\r\n        </>\r\n        );\r\n        onEncryptInfo(info)\r\n    }\r\n\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n        <><p>\r\n            The Affine Cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter. It employs a pair of keys (a, b), and each letter is encrypted using the formula (a * x + b) mod 26, where x is the numeric equivalent of the letter. To decrypt the message, the formula (a^-1 * (y - b + 26)) mod 26 is used, where y is the numeric equivalent of the encrypted letter and a^-1 is the modular multiplicative inverse of a modulo 26.\r\n        </p>\r\n        <p>\r\n            To encrypt using the Affine Cipher, simply enter your text and choose appropriate keys for 'a' and 'b'.\r\n        </p>\r\n        <ul>\r\n            <li>Substitution Cipher: Each letter in the plaintext is replaced by a different letter according to a fixed system.</li>\r\n            <li>Mathematical Formula: Encryption and decryption are based on modular arithmetic using the formula (a * x + b) mod 26.</li>\r\n            <li>Key Selection: The security of the cipher depends on the selection of keys 'a' and 'b', where 'a' must be coprime with 26.</li>\r\n            <li>Decryption: The decryption process involves finding the modular multiplicative inverse of 'a' modulo 26.</li>\r\n            <li>Example: Using keys 'a' = 5 and 'b' = 8, 'A' becomes 'I', 'B' becomes 'N', 'C' becomes 'S', and so forth.</li>\r\n        </ul>\r\n        \r\n        </>\r\n        );\r\n\r\n        // Call the function passed from the parent component to send the information\r\n        ongetInfo(info);\r\n    };\r\n\r\n    // Call the showInformation function when the component mounts\r\n    React.useEffect(() => {\r\n        showInformation();\r\n        showEncryptInformation()\r\n    }, [text,key1,key2]);\r\n\r\n\r\n    return (\r\n        <>\r\n            \r\n            <CipherFactory encode={encryptAffine} decode={decryptAffine} keyComponentA=\"Key A\" keyComponentB=\"Key B\" />\r\n        </>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}