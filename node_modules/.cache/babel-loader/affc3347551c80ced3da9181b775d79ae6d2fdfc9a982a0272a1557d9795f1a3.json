{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\AffineCipher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AffineCipher({\n  ongetInfo\n}) {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [inputChars, setInputChars] = useState([]);\n  const [outputChars, setOutputChars] = useState([]);\n\n  // Function to check if a number is coprime with 26\n  const isCoprime = num => {\n    for (let i = 2; i < num; i++) {\n      if (gcd(num, i) === 1) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Function to find the greatest common divisor (gcd) of two numbers\n  const gcd = (a, b) => {\n    if (!b) {\n      return a;\n    }\n    return gcd(b, a % b);\n  };\n\n  // Function to find the modular multiplicative inverse of a number\n  const modInverse = a => {\n    for (let x = 1; x < 26; x++) {\n      if (a * x % 26 === 1) {\n        return x;\n      }\n    }\n    return 1;\n  };\n\n  // Function to encode a string using the Affine Cipher\n  const encode = (str, a, b) => {\n    if (!isCoprime(a)) {\n      return 'Invalid key: \"a\" must be coprime with 26';\n    }\n    let encodedChars = '';\n    for (let i = 0; i < str.length; i++) {\n      let char = str[i];\n      let charCode = char.charCodeAt(0);\n      if (charCode >= 65 && charCode <= 90) {\n        // Uppercase letters\n        char = String.fromCharCode((a * (charCode - 65) + b) % 26 + 65);\n      } else if (charCode >= 97 && charCode <= 122) {\n        // Lowercase letters\n        char = String.fromCharCode((a * (charCode - 97) + b) % 26 + 97);\n      }\n      encodedChars += char;\n    }\n    setInputText(str);\n    setInputChars([...inputChars, str]);\n    setOutputChars([...outputChars, encodedChars]);\n    return encodedChars;\n  };\n\n  // Function to decode a string using the Affine Cipher\n  const decode = (str, a, b) => {\n    const aInverse = modInverse(a);\n    if (!aInverse) {\n      return 'Invalid key: \"a\" does not have a modular multiplicative inverse';\n    }\n    let decodedChars = '';\n    for (let i = 0; i < str.length; i++) {\n      let char = str[i];\n      let charCode = char.charCodeAt(0);\n      if (charCode >= 65 && charCode <= 90) {\n        // Uppercase letters\n        char = String.fromCharCode(aInverse * (charCode - 65 - b + 26) % 26 + 65);\n      } else if (charCode >= 97 && charCode <= 122) {\n        // Lowercase letters\n        char = String.fromCharCode(aInverse * (charCode - 97 - b + 26) % 26 + 97);\n      }\n      decodedChars += char;\n    }\n    return decodedChars;\n  };\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Affine cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Affine cipher, specify keys 'a' and 'b', where 'a' must be coprime with 26.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid black',\n        padding: '10px',\n        margin: '20px',\n        overflow: 'scroll',\n        height: '200px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: '100%',\n          borderCollapse: 'collapse',\n          fontFamily: 'arial, sans-serif'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Input Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Output Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: inputChars.map((char, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: char\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: outputChars[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(AffineCipher, \"O52AVFFJ0qRkxg8PsuhBebU+8os=\");\n_c = AffineCipher;\nvar _c;\n$RefreshReg$(_c, \"AffineCipher\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AffineCipher","ongetInfo","_s","inputText","setInputText","inputChars","setInputChars","outputChars","setOutputChars","isCoprime","num","i","gcd","a","b","modInverse","x","encode","str","encodedChars","length","char","charCode","charCodeAt","String","fromCharCode","decode","aInverse","decodedChars","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","style","border","padding","margin","overflow","height","width","borderCollapse","fontFamily","fontSize","textAlign","map","index","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/AffineCipher.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function AffineCipher({ ongetInfo }) {\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputChars, setInputChars] = useState([]);\r\n    const [outputChars, setOutputChars] = useState([]);\r\n\r\n    // Function to check if a number is coprime with 26\r\n    const isCoprime = (num) => {\r\n        for (let i = 2; i < num; i++) {\r\n            if (gcd(num, i) === 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    // Function to find the greatest common divisor (gcd) of two numbers\r\n    const gcd = (a, b) => {\r\n        if (!b) {\r\n            return a;\r\n        }\r\n        return gcd(b, a % b);\r\n    };\r\n\r\n    // Function to find the modular multiplicative inverse of a number\r\n    const modInverse = (a) => {\r\n        for (let x = 1; x < 26; x++) {\r\n            if ((a * x) % 26 === 1) {\r\n                return x;\r\n            }\r\n        }\r\n        return 1;\r\n    };\r\n\r\n    // Function to encode a string using the Affine Cipher\r\n    const encode = (str, a, b) => {\r\n        if (!isCoprime(a)) {\r\n            return 'Invalid key: \"a\" must be coprime with 26';\r\n        }\r\n\r\n        let encodedChars = '';\r\n        for (let i = 0; i < str.length; i++) {\r\n            let char = str[i];\r\n            let charCode = char.charCodeAt(0);\r\n\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                // Uppercase letters\r\n                char = String.fromCharCode(((a * (charCode - 65) + b) % 26) + 65);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                // Lowercase letters\r\n                char = String.fromCharCode(((a * (charCode - 97) + b) % 26) + 97);\r\n            }\r\n\r\n            encodedChars += char;\r\n        }\r\n\r\n        setInputText(str);\r\n        setInputChars([...inputChars, str]);\r\n        setOutputChars([...outputChars, encodedChars]);\r\n\r\n        return encodedChars;\r\n    };\r\n\r\n    // Function to decode a string using the Affine Cipher\r\n    const decode = (str, a, b) => {\r\n        const aInverse = modInverse(a);\r\n        if (!aInverse) {\r\n            return 'Invalid key: \"a\" does not have a modular multiplicative inverse';\r\n        }\r\n\r\n        let decodedChars = '';\r\n        for (let i = 0; i < str.length; i++) {\r\n            let char = str[i];\r\n            let charCode = char.charCodeAt(0);\r\n\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                // Uppercase letters\r\n                char = String.fromCharCode((aInverse * (charCode - 65 - b + 26) % 26) + 65);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                // Lowercase letters\r\n                char = String.fromCharCode((aInverse * (charCode - 97 - b + 26) % 26) + 97);\r\n            }\r\n\r\n            decodedChars += char;\r\n        }\r\n\r\n        return decodedChars;\r\n    };\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The Affine cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and converted back to a letter.\r\n                </p>\r\n                <p>To encrypt using the Affine cipher, specify keys 'a' and 'b', where 'a' must be coprime with 26.</p>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div style={{ border: '1px solid black', padding: '10px', margin: '20px', overflow: 'scroll', height: '200px' }}>\r\n                <table style={{ width: '100%', borderCollapse: 'collapse', fontFamily: 'arial, sans-serif' }}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Input Text</th>\r\n                            <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Output Text</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody style={{ textAlign: 'center' }}>\r\n                        {inputChars.map((char, index) => (\r\n                            <tr key={index}>\r\n                                <td style={{ border: '1px solid black', padding: '8px' }}>{char}</td>\r\n                                <td style={{ border: '1px solid black', padding: '8px' }}>{outputChars[index]}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <CipherFactory encode={encode} decode={decode} />\r\n        </>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}