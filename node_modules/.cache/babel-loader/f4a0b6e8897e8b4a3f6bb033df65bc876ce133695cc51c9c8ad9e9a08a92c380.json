{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\AutoKey.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CipherAscii({\n  ongetInfo\n}) {\n  _s();\n  // Function to encrypt plaintext using the Autokey cipher\n  function encode(plaintext, key) {\n    let ciphertext = '';\n    let keyIndex = 0;\n    plaintext = plaintext.toUpperCase();\n    key = key.toUpperCase();\n    for (let i = 0; i < plaintext.length; i++) {\n      let charCode = plaintext.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        // Check if character is a letter\n        let keyCode = key.charCodeAt(keyIndex) - 65;\n        let encryptedCharCode = (charCode - 65 + keyCode) % 26 + 65;\n        ciphertext += String.fromCharCode(encryptedCharCode);\n        keyIndex++;\n      } else {\n        ciphertext += plaintext[i]; // Keep non-alphabetic characters unchanged\n      }\n\n      // Append the current plaintext character to the key\n      if (keyIndex >= key.length) {\n        key += plaintext[i];\n      }\n    }\n    return ciphertext;\n  }\n\n  // Function to decrypt ciphertext using the Autokey cipher\n  function decode(ciphertext, key) {\n    let plaintext = '';\n    let keyIndex = 0;\n    ciphertext = ciphertext.toUpperCase();\n    key = key.toUpperCase();\n    for (let i = 0; i < ciphertext.length; i++) {\n      let charCode = ciphertext.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        // Check if character is a letter\n        let keyCode = key.charCodeAt(keyIndex) - 65;\n        let decryptedCharCode = (charCode - 65 - keyCode + 26) % 26 + 65;\n        plaintext += String.fromCharCode(decryptedCharCode);\n        keyIndex++;\n      } else {\n        plaintext += ciphertext[i]; // Keep non-alphabetic characters unchanged\n      }\n\n      // Append the decrypted character to the key\n      if (keyIndex >= key.length) {\n        key += String.fromCharCode(charCode);\n      }\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. Each character in the plaintext is replaced with its corresponding ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, convert each character in the plaintext to its ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves converting each ASCII value back to its corresponding character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 12\n  }, this);\n}\n_s(CipherAscii, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CipherAscii;\n;\nvar _c;\n$RefreshReg$(_c, \"CipherAscii\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","CipherAscii","ongetInfo","_s","encode","plaintext","key","ciphertext","keyIndex","toUpperCase","i","length","charCode","charCodeAt","keyCode","encryptedCharCode","String","fromCharCode","decode","decryptedCharCode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/AutoKey.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function CipherAscii({ ongetInfo }) {\r\n    // Function to encrypt plaintext using the Autokey cipher\r\nfunction encode(plaintext, key) {\r\n    let ciphertext = '';\r\n    let keyIndex = 0;\r\n\r\n    plaintext = plaintext.toUpperCase();\r\n    key = key.toUpperCase();\r\n\r\n    for (let i = 0; i < plaintext.length; i++) {\r\n        let charCode = plaintext.charCodeAt(i);\r\n        if (charCode >= 65 && charCode <= 90) { // Check if character is a letter\r\n            let keyCode = key.charCodeAt(keyIndex) - 65;\r\n            let encryptedCharCode = ((charCode - 65 + keyCode) % 26) + 65;\r\n            ciphertext += String.fromCharCode(encryptedCharCode);\r\n            keyIndex++;\r\n        } else {\r\n            ciphertext += plaintext[i]; // Keep non-alphabetic characters unchanged\r\n        }\r\n\r\n        // Append the current plaintext character to the key\r\n        if (keyIndex >= key.length) {\r\n            key += plaintext[i];\r\n        }\r\n    }\r\n\r\n    return ciphertext;\r\n}\r\n\r\n// Function to decrypt ciphertext using the Autokey cipher\r\nfunction decode(ciphertext, key) {\r\n    let plaintext = '';\r\n    let keyIndex = 0;\r\n\r\n    ciphertext = ciphertext.toUpperCase();\r\n    key = key.toUpperCase();\r\n\r\n    for (let i = 0; i < ciphertext.length; i++) {\r\n        let charCode = ciphertext.charCodeAt(i);\r\n        if (charCode >= 65 && charCode <= 90) { // Check if character is a letter\r\n            let keyCode = key.charCodeAt(keyIndex) - 65;\r\n            let decryptedCharCode = ((charCode - 65 - keyCode + 26) % 26) + 65;\r\n            plaintext += String.fromCharCode(decryptedCharCode);\r\n            keyIndex++;\r\n        } else {\r\n            plaintext += ciphertext[i]; // Keep non-alphabetic characters unchanged\r\n        }\r\n\r\n        // Append the decrypted character to the key\r\n        if (keyIndex >= key.length) {\r\n            key += String.fromCharCode(charCode);\r\n        }\r\n    }\r\n\r\n    return plaintext;\r\n}\r\n\r\n\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. \r\n                    Each character in the plaintext is replaced with its corresponding ASCII value.\r\n                </p>\r\n                <p>\r\n                    To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\r\n                </p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.</li>\r\n                    <li>ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.</li>\r\n                    <li>Encryption: To encrypt, convert each character in the plaintext to its ASCII value.</li>\r\n                    <li>Decryption: Decryption involves converting each ASCII value back to its corresponding character.</li>\r\n                    <li>Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}