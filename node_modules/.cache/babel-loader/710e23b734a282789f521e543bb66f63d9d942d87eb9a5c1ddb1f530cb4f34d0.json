{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Bifid.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BifidCipher({\n  ongetInfo\n}) {\n  _s();\n  // Function to encrypt plaintext using the Autokey cipher\n\n  function encode(plaintext, keySquare) {\n    // Define the Polybius square\n    const polybiusSquare = keySquare.toUpperCase().replace(/J/g, 'I');\n\n    // Create a map to store the coordinates of each letter in the Polybius square\n    const charMap = {};\n    for (let i = 0; i < polybiusSquare.length; i++) {\n      const row = Math.floor(i / 5) + 1;\n      const col = i % 5 + 1;\n      charMap[polybiusSquare[i]] = [row, col];\n    }\n\n    // Convert plaintext to uppercase and remove any non-alphabetic characters\n    plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\n\n    // Convert plaintext letters to their corresponding row and column numbers\n    let numbers = '';\n    for (let i = 0; i < plaintext.length; i++) {\n      numbers += charMap[plaintext[i]].join('');\n    }\n\n    // Split the string of numbers into two equal parts\n    const halfLength = numbers.length / 2;\n    const rowNumbers = numbers.slice(0, halfLength);\n    const colNumbers = numbers.slice(halfLength);\n\n    // Combine corresponding row and column numbers\n    let combinedNumbers = '';\n    for (let i = 0; i < rowNumbers.length; i++) {\n      combinedNumbers += rowNumbers[i] + colNumbers[i];\n    }\n\n    // Read out the combined numbers to get the ciphertext\n    let ciphertext = '';\n    for (let i = 0; i < combinedNumbers.length; i += 2) {\n      const row = combinedNumbers[i];\n      const col = combinedNumbers[i + 1];\n      ciphertext += polybiusSquare[(parseInt(row) - 1) * 5 + parseInt(col) - 1];\n    }\n    return ciphertext;\n  }\n\n  // Function to decrypt ciphertext using the Bifid Cipher\n  function decode(ciphertext, keySquare) {\n    // Define the Polybius square\n    const polybiusSquare = keySquare.toUpperCase().replace(/J/g, 'I');\n\n    // Create a map to store the coordinates of each letter in the Polybius square\n    const charMap = {};\n    for (let i = 0; i < polybiusSquare.length; i++) {\n      const row = Math.floor(i / 5) + 1;\n      const col = i % 5 + 1;\n      charMap[polybiusSquare[i]] = [row, col];\n    }\n\n    // Convert ciphertext letters to their corresponding row and column numbers\n    let numbers = '';\n    for (let i = 0; i < ciphertext.length; i++) {\n      const letter = ciphertext[i];\n      const index = polybiusSquare.indexOf(letter);\n      const row = Math.floor(index / 5) + 1;\n      const col = index % 5 + 1;\n      numbers += row.toString() + col.toString();\n    }\n\n    // Split the string of numbers into two equal parts\n    const halfLength = numbers.length / 2;\n    const combinedNumbers = numbers.slice(0, halfLength) + numbers.slice(halfLength);\n\n    // Read out the combined numbers to get the plaintext\n    let plaintext = '';\n    for (let i = 0; i < halfLength; i++) {\n      const row = combinedNumbers[i];\n      const col = combinedNumbers[i + halfLength];\n      plaintext += polybiusSquare[(parseInt(row) - 1) * 5 + parseInt(col) - 1];\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Autokey Cipher is a substitution cipher that extends the Vigen\\xE8re cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigen\\xE8re cipher's key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 1\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 12\n  }, this);\n}\n_s(BifidCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BifidCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"BifidCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BifidCipher","ongetInfo","_s","encode","plaintext","keySquare","polybiusSquare","toUpperCase","replace","charMap","i","length","row","Math","floor","col","numbers","join","halfLength","rowNumbers","slice","colNumbers","combinedNumbers","ciphertext","parseInt","decode","letter","index","indexOf","toString","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Bifid.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BifidCipher({ ongetInfo }) {\r\n    // Function to encrypt plaintext using the Autokey cipher\r\n\r\n    function encode(plaintext, keySquare) {\r\n        // Define the Polybius square\r\n        const polybiusSquare = keySquare.toUpperCase().replace(/J/g, 'I');\r\n    \r\n        // Create a map to store the coordinates of each letter in the Polybius square\r\n        const charMap = {};\r\n        for (let i = 0; i < polybiusSquare.length; i++) {\r\n            const row = Math.floor(i / 5) + 1;\r\n            const col = (i % 5) + 1;\r\n            charMap[polybiusSquare[i]] = [row, col];\r\n        }\r\n    \r\n        // Convert plaintext to uppercase and remove any non-alphabetic characters\r\n        plaintext = plaintext.toUpperCase().replace(/[^A-Z]/g, '');\r\n    \r\n        // Convert plaintext letters to their corresponding row and column numbers\r\n        let numbers = '';\r\n        for (let i = 0; i < plaintext.length; i++) {\r\n            numbers += charMap[plaintext[i]].join('');\r\n        }\r\n    \r\n        // Split the string of numbers into two equal parts\r\n        const halfLength = numbers.length / 2;\r\n        const rowNumbers = numbers.slice(0, halfLength);\r\n        const colNumbers = numbers.slice(halfLength);\r\n    \r\n        // Combine corresponding row and column numbers\r\n        let combinedNumbers = '';\r\n        for (let i = 0; i < rowNumbers.length; i++) {\r\n            combinedNumbers += rowNumbers[i] + colNumbers[i];\r\n        }\r\n    \r\n        // Read out the combined numbers to get the ciphertext\r\n        let ciphertext = '';\r\n        for (let i = 0; i < combinedNumbers.length; i += 2) {\r\n            const row = combinedNumbers[i];\r\n            const col = combinedNumbers[i + 1];\r\n            ciphertext += polybiusSquare[(parseInt(row) - 1) * 5 + parseInt(col) - 1];\r\n        }\r\n    \r\n        return ciphertext;\r\n    }\r\n    \r\n    // Function to decrypt ciphertext using the Bifid Cipher\r\n    function decode(ciphertext, keySquare) {\r\n        // Define the Polybius square\r\n        const polybiusSquare = keySquare.toUpperCase().replace(/J/g, 'I');\r\n    \r\n        // Create a map to store the coordinates of each letter in the Polybius square\r\n        const charMap = {};\r\n        for (let i = 0; i < polybiusSquare.length; i++) {\r\n            const row = Math.floor(i / 5) + 1;\r\n            const col = (i % 5) + 1;\r\n            charMap[polybiusSquare[i]] = [row, col];\r\n        }\r\n    \r\n        // Convert ciphertext letters to their corresponding row and column numbers\r\n        let numbers = '';\r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            const letter = ciphertext[i];\r\n            const index = polybiusSquare.indexOf(letter);\r\n            const row = Math.floor(index / 5) + 1;\r\n            const col = (index % 5) + 1;\r\n            numbers += row.toString() + col.toString();\r\n        }\r\n    \r\n        // Split the string of numbers into two equal parts\r\n        const halfLength = numbers.length / 2;\r\n        const combinedNumbers = numbers.slice(0, halfLength) + numbers.slice(halfLength);\r\n    \r\n        // Read out the combined numbers to get the plaintext\r\n        let plaintext = '';\r\n        for (let i = 0; i < halfLength; i++) {\r\n            const row = combinedNumbers[i];\r\n            const col = combinedNumbers[i + halfLength];\r\n            plaintext += polybiusSquare[(parseInt(row) - 1) * 5 + parseInt(col) - 1];\r\n        }\r\n    \r\n        return plaintext;\r\n    }\r\n\r\n\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n    The Autokey Cipher is a substitution cipher that extends the Vigenère cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\r\n</p>\r\n<p>\r\n    To encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\r\n</p>\r\n<ul>\r\n    <li>Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.</li>\r\n    <li>Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigenère cipher's key.</li>\r\n    <li>Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.</li>\r\n    <li>Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.</li>\r\n    <li>Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.</li>\r\n</ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={1}/>\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}