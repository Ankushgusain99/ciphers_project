{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\atbash.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AtbashEncoder() {\n  _s();\n  const [showInfo, setShowInfo] = useState(false);\n  const toggleInfoVisibility = () => {\n    setShowInfo(!showInfo);\n  };\n  const encode = text => {\n    let encoded = '';\n    for (let i = 0; i < text.length; i++) {\n      const charCode = text.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        encoded += String.fromCharCode(155 - charCode);\n      } else if (charCode >= 97 && charCode <= 122) {\n        encoded += String.fromCharCode(219 - charCode);\n      } else {\n        encoded += text[i];\n      }\n    }\n    return encoded;\n  };\n  const decode = text => {\n    return encode(text);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Atbash Cipher is a substitution cipher...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleInfoVisibility,\n      children: \"Show Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(AtbashEncoder, \"HOx4m4f9XShiV8Qg6Wu1E3I8Ryg=\");\n_c = AtbashEncoder;\n;\nvar _c;\n$RefreshReg$(_c, \"AtbashEncoder\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AtbashEncoder","_s","showInfo","setShowInfo","toggleInfoVisibility","encode","text","encoded","i","length","charCode","charCodeAt","String","fromCharCode","decode","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/atbash.js"],"sourcesContent":["import React,{useState} from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\nexport default function AtbashEncoder() {\r\n    const [showInfo, setShowInfo] = useState(false);\r\n\r\n    const toggleInfoVisibility = () => {\r\n        setShowInfo(!showInfo);\r\n    };\r\n    const encode = (text) => {\r\n        let encoded = '';\r\n        for (let i = 0; i < text.length; i++) {\r\n            const charCode = text.charCodeAt(i);\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                encoded += String.fromCharCode(155 - charCode);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                encoded += String.fromCharCode(219 - charCode);\r\n            } else {\r\n                encoded += text[i];\r\n            }\r\n        }\r\n        return encoded;\r\n    };\r\n\r\n    const decode = (text) => {\r\n        return encode(text);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n        {showInfo && (\r\n            <div>\r\n                {/* Your info content goes here */}\r\n                <p>Atbash Cipher is a substitution cipher...</p>\r\n            </div>\r\n        )}\r\n        <CipherFactory encode={encode} decode={decode} />\r\n        <button onClick={toggleInfoVisibility}>Show Info</button>\r\n    </>\r\n    )\r\n\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpD,eAAe,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMU,oBAAoB,GAAGA,CAAA,KAAM;IAC/BD,WAAW,CAAC,CAACD,QAAQ,CAAC;EAC1B,CAAC;EACD,MAAMG,MAAM,GAAIC,IAAI,IAAK;IACrB,IAAIC,OAAO,GAAG,EAAE;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAClC,MAAME,QAAQ,GAAGJ,IAAI,CAACK,UAAU,CAACH,CAAC,CAAC;MACnC,IAAIE,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,EAAE,EAAE;QAClCH,OAAO,IAAIK,MAAM,CAACC,YAAY,CAAC,GAAG,GAAGH,QAAQ,CAAC;MAClD,CAAC,MAAM,IAAIA,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,GAAG,EAAE;QAC1CH,OAAO,IAAIK,MAAM,CAACC,YAAY,CAAC,GAAG,GAAGH,QAAQ,CAAC;MAClD,CAAC,MAAM;QACHH,OAAO,IAAID,IAAI,CAACE,CAAC,CAAC;MACtB;IACJ;IACA,OAAOD,OAAO;EAClB,CAAC;EAED,MAAMO,MAAM,GAAIR,IAAI,IAAK;IACrB,OAAOD,MAAM,CAACC,IAAI,CAAC;EACvB,CAAC;EAGD,oBACIT,OAAA,CAAAE,SAAA;IAAAgB,QAAA,GACCb,QAAQ,iBACLL,OAAA;MAAAkB,QAAA,eAEIlB,OAAA;QAAAkB,QAAA,EAAG;MAAyC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CACR,eACDtB,OAAA,CAACF,aAAa;MAACU,MAAM,EAAEA,MAAO;MAACS,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjDtB,OAAA;MAAQuB,OAAO,EAAEhB,oBAAqB;MAAAW,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC3D,CAAC;AAGP;AAAClB,EAAA,CAvCuBD,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AAuCpC;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}