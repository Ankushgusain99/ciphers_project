{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\BookCipher.js\";\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookCipher = () => {\n  function getPositionInKey(text, key) {\n    const positions = [];\n    const keyWords = key.toUpperCase().split(/\\s+/);\n    for (let char of text) {\n      const charUpper = char.toUpperCase();\n      let found = false;\n      for (let i = 0; i < keyWords.length; i++) {\n        const wordIndex = keyWords[i].indexOf(charUpper);\n        if (wordIndex !== -1) {\n          positions.push({\n            word: i + 1,\n            char: wordIndex + 1\n          });\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        // Handle the case where the character is not found in the key text\n        positions.push({\n          word: 0,\n          char: 0\n        });\n      }\n    }\n    return positions;\n  }\n  function encode(plaintext, key) {\n    plaintext = plaintext.toUpperCase(plaintext);\n    console.log(plaintext);\n    const positions = getPositionInKey(plaintext, key);\n    return positions.map(pos => `${pos.word}.${pos.char}`).join(' ');\n  }\n  function decode(ciphertext, key) {\n    const keyWords = key.split(/\\s+/);\n    const positions = ciphertext.split(' ');\n    let plaintext = '';\n    for (let pos of positions) {\n      const [wordIndex, charIndex] = pos.split('.').map(Number);\n      if (wordIndex > 0 && charIndex > 0 && keyWords[wordIndex - 1] && keyWords[wordIndex - 1][charIndex - 1]) {\n        plaintext += keyWords[wordIndex - 1][charIndex - 1];\n      } else {\n        plaintext += ' '; // Placeholder for unfound characters\n      }\n    }\n    return plaintext;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentA: \"STR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_c = BookCipher;\nexport default BookCipher;\nvar _c;\n$RefreshReg$(_c, \"BookCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","BookCipher","getPositionInKey","text","key","positions","keyWords","toUpperCase","split","char","charUpper","found","i","length","wordIndex","indexOf","push","word","encode","plaintext","console","log","map","pos","join","decode","ciphertext","charIndex","Number","children","keyComponentA","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/BookCipher.js"],"sourcesContent":["import React from 'react'\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nconst BookCipher = () => {\r\n  function getPositionInKey(text, key) {\r\n    const positions = [];\r\n    const keyWords = key.toUpperCase().split(/\\s+/);\r\n\r\n    for (let char of text) {\r\n        const charUpper = char.toUpperCase();\r\n        let found = false;\r\n        for (let i = 0; i < keyWords.length; i++) {\r\n            const wordIndex = keyWords[i].indexOf(charUpper);\r\n            if (wordIndex !== -1) {\r\n                positions.push({ word: i + 1, char: wordIndex + 1 });\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            // Handle the case where the character is not found in the key text\r\n            positions.push({ word: 0, char: 0 });\r\n        }\r\n    }\r\n\r\n    return positions;\r\n}\r\n\r\n\r\nfunction encode(plaintext, key) {\r\n  plaintext=plaintext.toUpperCase(plaintext)\r\n  console.log(plaintext)\r\n  const positions = getPositionInKey(plaintext, key);\r\n  return positions.map(pos => `${pos.word}.${pos.char}`).join(' ');\r\n}\r\n\r\n\r\nfunction decode(ciphertext, key) {\r\n  const keyWords = key.split(/\\s+/);\r\n  const positions = ciphertext.split(' ');\r\n  let plaintext = '';\r\n\r\n  for (let pos of positions) {\r\n      const [wordIndex, charIndex] = pos.split('.').map(Number);\r\n      if (wordIndex > 0 && charIndex > 0 && keyWords[wordIndex - 1] && keyWords[wordIndex - 1][charIndex - 1]) {\r\n          plaintext += keyWords[wordIndex - 1][charIndex - 1];\r\n      } else {\r\n          plaintext += ' '; // Placeholder for unfound characters\r\n      }\r\n  }\r\n\r\n  return plaintext;\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n        <CipherFactory encode={encode} decode={decode} keyComponentA=\"STR\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BookCipher\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}