{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding({\n  ongetInfo\n}) {\n  _s();\n  let abc = 0;\n  const [steps, setSteps] = React.useState([]);\n  function encode(str) {\n    let result = Number(str);\n    abc = result;\n    result = (result >>> 0).toString(2);\n    return result.toString();\n  }\n  function decode(bin) {\n    let result = Number(bin);\n    result = (result >>> 0).toString(2);\n    return result.toString();\n  }\n  const displaySteps = () => {\n    let stepsArray = [];\n    let number = abc;\n    while (number > 0) {\n      stepsArray.push(`${number} / 2 = ${Math.floor(number / 2)}, remainder ${number % 2}`);\n      number = Math.floor(number / 2);\n    }\n    stepsArray.push(`Binary representation: ${encode(abc)}`);\n    setSteps(stepsArray.reverse());\n  };\n  React.useEffect(() => {\n    displaySteps(); // Invoke displaySteps directly here\n  }, []);\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decimal Number: A number expressed in base-10, using digits from 0 to 9.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Steps are as follows:-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), steps.map((step, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: step\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, [steps]); // Ensure showInformation is called when steps change\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(BinaryEncoding, \"meWYjvGyNWeLZynk2nLsqP4kLlU=\");\n_c = BinaryEncoding;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncoding","ongetInfo","_s","abc","steps","setSteps","useState","encode","str","result","Number","toString","decode","bin","displaySteps","stepsArray","number","push","Math","floor","reverse","useEffect","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","map","step","index","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding({ ongetInfo }) {\r\n  let abc = 0;\r\n  const [steps, setSteps] = React.useState([]);\r\n\r\n  function encode(str) {\r\n    let result = Number(str);\r\n    abc = result;\r\n    result = (result >>> 0).toString(2);\r\n\r\n    return result.toString();\r\n  }\r\n\r\n  function decode(bin) {\r\n    let result = Number(bin);\r\n    result = (result >>> 0).toString(2);\r\n\r\n    return result.toString();\r\n  }\r\n\r\n  const displaySteps = () => {\r\n    let stepsArray = [];\r\n    let number = abc;\r\n    while (number > 0) {\r\n      stepsArray.push(`${number} / 2 = ${Math.floor(number / 2)}, remainder ${number % 2}`);\r\n      number = Math.floor(number / 2);\r\n    }\r\n    stepsArray.push(`Binary representation: ${encode(abc)}`);\r\n    setSteps(stepsArray.reverse());\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    displaySteps(); // Invoke displaySteps directly here\r\n  }, []);\r\n\r\n  const showInformation = () => {\r\n    const info = (\r\n      <>\r\n        <p>\r\n          Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\r\n        </p>\r\n        <ul>\r\n          <li>Decimal Number: A number expressed in base-10, using digits from 0 to 9.</li>\r\n          <li>Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.</li>\r\n          <li>Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.</li>\r\n          <li>Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).</li>\r\n          <li>Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.</li>\r\n        </ul>\r\n        <p>Steps are as follows:-</p>\r\n        {steps.map((step, index) => (\r\n          <p key={index}>{step}</p>\r\n        ))}\r\n      </>\r\n    );\r\n    ongetInfo(info);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    showInformation();\r\n  }, [steps]); // Ensure showInformation is called when steps change\r\n\r\n  return (\r\n    <>\r\n      <CipherFactory encode={encode} decode={decode} />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}