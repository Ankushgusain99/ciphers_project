{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\caesar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport CipherFactory from \"../../ui/EncryptDecrypt\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CaesarCipher({\n  ongetInfo,\n  onEncryptInfo,\n  onDecryptInfo\n}) {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [key, setKey] = useState(0);\n  const [encryptionInfo, setEncryptionInfo] = useState([]);\n  const [decryptionInfo, setDecryptionInfo] = useState([]);\n\n  // Create a function to encode a string using the Caesar cipher\n  function encode(str, shift) {\n    let encodedChars = '';\n    let encryptionSteps = [];\n    for (let i = 0; i < str.length; i++) {\n      let char = str[i];\n      let charCode = char.charCodeAt(0);\n      if (charCode >= 65 && charCode <= 90) {\n        // Uppercase letters\n        char = String.fromCharCode((charCode - 65 + shift) % 26 + 65);\n      } else if (charCode >= 97 && charCode <= 122) {\n        // Lowercase letters\n        char = String.fromCharCode((charCode - 97 + shift) % 26 + 97);\n      }\n      encodedChars += char;\n      encryptionSteps.push({\n        inputChar: str[i],\n        outputChar: char,\n        key: shift\n      });\n    }\n    setInputText(str);\n    setKey(shift);\n    setEncryptionInfo(encryptionSteps);\n    return encodedChars;\n  }\n\n  // Create a function to decode a string using the Caesar cipher\n  function decode(str, shift) {\n    // Encode the string with a negative shift to reverse the original shift\n    return encode(str, -shift);\n  }\n  const encryptInfo = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Steps for encryption are as follows:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), encryptionInfo.map((step, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"For the alphabet \", step.inputChar, \", we are getting \", step.outputChar, \" after adding key, which is \", step.key, \".\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true);\n    onEncryptInfo(info);\n  };\n  const decryptInfo = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Steps for decryption are as follows:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), decryptionInfo.map((step, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"For the alphabet \", step.inputChar, \", we are getting \", step.outputChar, \" after subtracting key, which is \", step.key, \".\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true);\n    onDecryptInfo(info);\n  };\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Caesar cipher, specify a shift value and enter your text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Shift: The number of positions each letter in the plaintext is shifted.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  React.useEffect(() => {\n    encryptInfo();\n  }, [inputText, key]);\n  React.useEffect(() => {\n    decryptInfo();\n  }, [inputText, key]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentA: \"Shift\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(CaesarCipher, \"IME8fvOo9VSUuhOZa1ZPEEZOy8g=\");\n_c = CaesarCipher;\nvar _c;\n$RefreshReg$(_c, \"CaesarCipher\");","map":{"version":3,"names":["React","useState","useEffect","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","CaesarCipher","ongetInfo","onEncryptInfo","onDecryptInfo","_s","inputText","setInputText","key","setKey","encryptionInfo","setEncryptionInfo","decryptionInfo","setDecryptionInfo","encode","str","shift","encodedChars","encryptionSteps","i","length","char","charCode","charCodeAt","String","fromCharCode","push","inputChar","outputChar","decode","encryptInfo","info","children","fileName","_jsxFileName","lineNumber","columnNumber","map","step","index","decryptInfo","showInformation","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/caesar.js"],"sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport CipherFactory from \"../../ui/EncryptDecrypt\";\r\n\r\nexport default function CaesarCipher({ongetInfo, onEncryptInfo, onDecryptInfo}) {\r\n    const [inputText, setInputText] = useState('');\r\n    const [key, setKey] = useState(0);\r\n    const [encryptionInfo, setEncryptionInfo] = useState([]);\r\n    const [decryptionInfo, setDecryptionInfo] = useState([]);\r\n\r\n    // Create a function to encode a string using the Caesar cipher\r\n    function encode(str, shift) {\r\n        let encodedChars = '';\r\n        let encryptionSteps = [];\r\n\r\n        for (let i = 0; i < str.length; i++) {\r\n            let char = str[i];\r\n            let charCode = char.charCodeAt(0);\r\n\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                // Uppercase letters\r\n                char = String.fromCharCode(((charCode - 65 + shift) % 26) + 65);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                // Lowercase letters\r\n                char = String.fromCharCode(((charCode - 97 + shift) % 26) + 97);\r\n            }\r\n\r\n            encodedChars += char;\r\n            encryptionSteps.push({\r\n                inputChar: str[i],\r\n                outputChar: char,\r\n                key: shift\r\n            });\r\n        }\r\n\r\n        setInputText(str);\r\n        setKey(shift);\r\n        setEncryptionInfo(encryptionSteps);\r\n\r\n        return encodedChars;\r\n    }\r\n\r\n    // Create a function to decode a string using the Caesar cipher\r\n    function decode(str, shift) {\r\n        // Encode the string with a negative shift to reverse the original shift\r\n        return encode(str, -shift);\r\n    }\r\n\r\n    const encryptInfo = () => {\r\n        const info = (\r\n            <>\r\n                <li>Steps for encryption are as follows:</li>\r\n                {encryptionInfo.map((step, index) => (\r\n                    <li key={index}>For the alphabet {step.inputChar}, we are getting {step.outputChar} after adding key, which is {step.key}.</li>\r\n                ))}\r\n            </>\r\n        );\r\n        onEncryptInfo(info);\r\n    };\r\n\r\n    const decryptInfo = () => {\r\n        const info = (\r\n            <>\r\n                <li>Steps for decryption are as follows:</li>\r\n                {decryptionInfo.map((step, index) => (\r\n                    <li key={index}>For the alphabet {step.inputChar}, we are getting {step.outputChar} after subtracting key, which is {step.key}.</li>\r\n                ))}\r\n            </>\r\n        );\r\n        onDecryptInfo(info);\r\n    };\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\r\n                </p>\r\n                <p>To encrypt using the Caesar cipher, specify a shift value and enter your text.</p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.</li>\r\n                    <li>Shift: The number of positions each letter in the plaintext is shifted.</li>\r\n                    <li>Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.</li>\r\n                    <li>Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        encryptInfo();\r\n    }, [inputText, key]);\r\n\r\n    React.useEffect(() => {\r\n        decryptInfo();\r\n    }, [inputText, key]);\r\n\r\n    return (\r\n        <>\r\n            <CipherFactory encode={encode} decode={decode} keyComponentA=\"Shift\" />\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}