{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\AMSCO.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CipherAscii({\n  ongetInfo\n}) {\n  _s();\n  // Function to generate the transposition grid based on the keyword\n  // Function to generate the transposition grid based on the keyword\n\n  // Function to encrypt the plaintext using the AMSCO cipher\n  function encode(text, keyword) {\n    const keyArray = keyword.split('').map((char, i) => ({\n      char,\n      index: i\n    }));\n    keyArray.sort((a, b) => a.char.localeCompare(b.char));\n    const keyOrder = keyArray.map(item => item.index);\n\n    // Initialize variables\n    const rows = Math.ceil(text.length / keyword.length);\n    const grid = Array.from({\n      length: rows\n    }, () => Array(keyword.length).fill(''));\n    let textIndex = 0;\n    let charCount = 1; // Start with 1 character per cell\n\n    // Fill the grid with text\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < keyword.length; col++) {\n        if (textIndex < text.length) {\n          grid[row][col] = text.substr(textIndex, charCount);\n          textIndex += charCount;\n          charCount = charCount === 1 ? 2 : 1; // Alternate between 1 and 2 characters\n        }\n      }\n    }\n\n    // Read the grid column-wise according to the key order\n    let encryptedText = '';\n    for (let col of keyOrder) {\n      for (let row = 0; row < rows; row++) {\n        encryptedText += grid[row][col];\n      }\n    }\n    return encryptedText;\n  }\n\n  // Function to decrypt the ciphertext using the AMSCO cipher\n  function decode(ciphertext, keyword) {\n    let grid = generateGrid(keyword);\n    if (!grid) {\n      throw new Error('Invalid keyword: Please provide a non-empty keyword.');\n    }\n    let plaintext = '';\n\n    // Iterate through the ciphertext\n    for (let i = 0; i < ciphertext.length; i++) {\n      let row = -1;\n      let col = -1;\n\n      // Find the row and column of the current character in the grid\n      for (let j = 0; j < grid.length; j++) {\n        if (grid[j].indexOf(i % keyword.length + 1) !== -1) {\n          row = j;\n          col = grid[j].indexOf(i % keyword.length + 1);\n          break;\n        }\n      }\n      // Append the character at the corresponding position in the grid\n      plaintext += ciphertext.charAt(row + col * Math.ceil(ciphertext.length / keyword.length));\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. Each character in the plaintext is replaced with its corresponding ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, convert each character in the plaintext to its ASCII value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves converting each ASCII value back to its corresponding character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 12\n  }, this);\n}\n_s(CipherAscii, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CipherAscii;\n;\nvar _c;\n$RefreshReg$(_c, \"CipherAscii\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","CipherAscii","ongetInfo","_s","encode","text","keyword","keyArray","split","map","char","i","index","sort","a","b","localeCompare","keyOrder","item","rows","Math","ceil","length","grid","Array","from","fill","textIndex","charCount","row","col","substr","encryptedText","decode","ciphertext","generateGrid","Error","plaintext","j","indexOf","charAt","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/AMSCO.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function CipherAscii({ ongetInfo }) {\r\n    // Function to generate the transposition grid based on the keyword\r\n    // Function to generate the transposition grid based on the keyword\r\n\r\n\r\n    // Function to encrypt the plaintext using the AMSCO cipher\r\n    function encode(text, keyword) {\r\n        const keyArray = keyword.split('').map((char, i) => ({char, index: i}));\r\n  keyArray.sort((a, b) => a.char.localeCompare(b.char));\r\n  const keyOrder = keyArray.map(item => item.index);\r\n\r\n  // Initialize variables\r\n  const rows = Math.ceil(text.length / keyword.length);\r\n  const grid = Array.from({ length: rows }, () => Array(keyword.length).fill(''));\r\n  let textIndex = 0;\r\n  let charCount = 1; // Start with 1 character per cell\r\n\r\n  // Fill the grid with text\r\n  for (let row = 0; row < rows; row++) {\r\n    for (let col = 0; col < keyword.length; col++) {\r\n      if (textIndex < text.length) {\r\n        grid[row][col] = text.substr(textIndex, charCount);\r\n        textIndex += charCount;\r\n        charCount = charCount === 1 ? 2 : 1; // Alternate between 1 and 2 characters\r\n      }\r\n    }\r\n  }\r\n\r\n  // Read the grid column-wise according to the key order\r\n  let encryptedText = '';\r\n  for (let col of keyOrder) {\r\n    for (let row = 0; row < rows; row++) {\r\n      encryptedText += grid[row][col];\r\n    }\r\n  }\r\n\r\n  return encryptedText;\r\n    }\r\n\r\n    // Function to decrypt the ciphertext using the AMSCO cipher\r\n    function decode(ciphertext, keyword) {\r\n        let grid = generateGrid(keyword);\r\n        if (!grid) {\r\n            throw new Error('Invalid keyword: Please provide a non-empty keyword.');\r\n        }\r\n\r\n        let plaintext = '';\r\n\r\n        // Iterate through the ciphertext\r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            let row = -1;\r\n            let col = -1;\r\n\r\n            // Find the row and column of the current character in the grid\r\n            for (let j = 0; j < grid.length; j++) {\r\n                if (grid[j].indexOf(i % keyword.length + 1) !== -1) {\r\n                    row = j;\r\n                    col = grid[j].indexOf(i % keyword.length + 1);\r\n                    break;\r\n                }\r\n            }\r\n            // Append the character at the corresponding position in the grid\r\n            plaintext += ciphertext.charAt(row + col * Math.ceil(ciphertext.length / keyword.length));\r\n        }\r\n        return plaintext;\r\n    }\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The ASCII Cipher is a simple character substitution cipher based on the ASCII encoding standard. \r\n                    Each character in the plaintext is replaced with its corresponding ASCII value.\r\n                </p>\r\n                <p>\r\n                    To encrypt using the ASCII Cipher, simply convert each character of your text to its ASCII value.\r\n                </p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each character in the plaintext is replaced by its corresponding ASCII value.</li>\r\n                    <li>ASCII Encoding: ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text in computers and other devices.</li>\r\n                    <li>Encryption: To encrypt, convert each character in the plaintext to its ASCII value.</li>\r\n                    <li>Decryption: Decryption involves converting each ASCII value back to its corresponding character.</li>\r\n                    <li>Example: 'A' becomes '65', 'B' becomes '66', 'C' becomes '67', and so forth.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}