{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\AutoKey.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport CipherOverview from '../../ui/CipherOverview';\nimport { Header, Description, Example, References } from '../../overviews/AutoKeyOverview';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AutoKey() {\n  _s();\n  const [showOverview, setShowOverview] = React.useState(false);\n  // Function to encrypt plaintext using the Autokey cipher\n  function encode(plaintext, key) {\n    let ciphertext = '';\n    let keyIndex = 0;\n    plaintext = plaintext.toUpperCase();\n    key = key.toUpperCase();\n    for (let i = 0; i < plaintext.length; i++) {\n      let charCode = plaintext.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        // Check if character is a letter\n        let keyCode = key.charCodeAt(keyIndex) - 65;\n        let encryptedCharCode = (charCode - 65 + keyCode) % 26 + 65;\n        ciphertext += String.fromCharCode(encryptedCharCode);\n        keyIndex++;\n      } else {\n        ciphertext += plaintext[i]; // Keep non-alphabetic characters unchanged\n      }\n\n      // Append the current plaintext character to the key\n      if (keyIndex >= key.length) {\n        key += plaintext[i];\n      }\n    }\n    return ciphertext;\n  }\n\n  // Function to decrypt ciphertext using the Autokey cipher\n  function decode(ciphertext, key) {\n    let plaintext = '';\n    let keyIndex = 0;\n    ciphertext = ciphertext.toUpperCase();\n    key = key.toUpperCase();\n    for (let i = 0; i < ciphertext.length; i++) {\n      let charCode = ciphertext.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        // Check if character is a letter\n        let keyCode = key.charCodeAt(keyIndex) - 65;\n        let decryptedCharCode = (charCode - 65 - keyCode + 26) % 26 + 65;\n        plaintext += String.fromCharCode(decryptedCharCode);\n        keyIndex++;\n      } else {\n        plaintext += ciphertext[i]; // Keep non-alphabetic characters unchanged\n      }\n\n      // Append the decrypted character to the key\n      if (keyIndex >= key.length) {\n        key += String.fromCharCode(charCode);\n      }\n    }\n    return plaintext;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showOverview && /*#__PURE__*/_jsxDEV(CipherOverview, {\n      setShowOverview: setShowOverview,\n      Header: Header,\n      Description: Description,\n      Example: Example,\n      References: References\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      title: \"AutoKey Cipher\",\n      setShowOverview: setShowOverview,\n      encode: encode,\n      decode: decode,\n      keyComponentA: 'STR'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(AutoKey, \"aKVuUYg972ieEnXf0VLOX2nEfTA=\");\n_c = AutoKey;\n;\nvar _c;\n$RefreshReg$(_c, \"AutoKey\");","map":{"version":3,"names":["React","CipherFactory","CipherOverview","Header","Description","Example","References","jsxDEV","_jsxDEV","Fragment","_Fragment","AutoKey","_s","showOverview","setShowOverview","useState","encode","plaintext","key","ciphertext","keyIndex","toUpperCase","i","length","charCode","charCodeAt","keyCode","encryptedCharCode","String","fromCharCode","decode","decryptedCharCode","children","fileName","_jsxFileName","lineNumber","columnNumber","title","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/AutoKey.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\nimport CipherOverview from '../../ui/CipherOverview';\r\nimport { Header,Description,Example,References } from '../../overviews/AutoKeyOverview';\r\nexport default function AutoKey() {\r\n    const [showOverview, setShowOverview] = React.useState(false);\r\n    // Function to encrypt plaintext using the Autokey cipher\r\nfunction encode(plaintext, key) {\r\n    \r\n    let ciphertext = '';\r\n    let keyIndex = 0;\r\n\r\n    plaintext = plaintext.toUpperCase();\r\n    key = key.toUpperCase();\r\n\r\n    for (let i = 0; i < plaintext.length; i++) {\r\n        let charCode = plaintext.charCodeAt(i);\r\n        if (charCode >= 65 && charCode <= 90) { // Check if character is a letter\r\n            let keyCode = key.charCodeAt(keyIndex) - 65;\r\n            let encryptedCharCode = ((charCode - 65 + keyCode) % 26) + 65;\r\n            ciphertext += String.fromCharCode(encryptedCharCode);\r\n            keyIndex++;\r\n        } else {\r\n            ciphertext += plaintext[i]; // Keep non-alphabetic characters unchanged\r\n        }\r\n\r\n        // Append the current plaintext character to the key\r\n        if (keyIndex >= key.length) {\r\n            key += plaintext[i];\r\n        }\r\n    }\r\n\r\n    return ciphertext;\r\n}\r\n\r\n// Function to decrypt ciphertext using the Autokey cipher\r\nfunction decode(ciphertext, key) {\r\n    let plaintext = '';\r\n    let keyIndex = 0;\r\n\r\n    ciphertext = ciphertext.toUpperCase();\r\n    key = key.toUpperCase();\r\n\r\n    for (let i = 0; i < ciphertext.length; i++) {\r\n        let charCode = ciphertext.charCodeAt(i);\r\n        if (charCode >= 65 && charCode <= 90) { // Check if character is a letter\r\n            let keyCode = key.charCodeAt(keyIndex) - 65;\r\n            let decryptedCharCode = ((charCode - 65 - keyCode + 26) % 26) + 65;\r\n            plaintext += String.fromCharCode(decryptedCharCode);\r\n            keyIndex++;\r\n        } else {\r\n            plaintext += ciphertext[i]; // Keep non-alphabetic characters unchanged\r\n        }\r\n\r\n        // Append the decrypted character to the key\r\n        if (keyIndex >= key.length) {\r\n            key += String.fromCharCode(charCode);\r\n        }\r\n    }\r\n\r\n    return plaintext;\r\n}\r\n\r\n\r\n\r\n    \r\nreturn (\r\n    <>\r\n      {showOverview && (\r\n        <CipherOverview\r\n          setShowOverview={setShowOverview}\r\n          Header={Header}\r\n          Description={Description}\r\n          Example={Example}\r\n          References={References}\r\n        />\r\n      )}\r\n      <CipherFactory\r\n        title={\"AutoKey Cipher\"}\r\n        setShowOverview = {setShowOverview}\r\n        encode={encode}\r\n        decode={decode}\r\n        keyComponentA={'STR'}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}