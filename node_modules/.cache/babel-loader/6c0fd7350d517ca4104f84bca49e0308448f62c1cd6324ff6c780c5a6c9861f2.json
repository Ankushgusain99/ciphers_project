{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\BinaryCode.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryCode({\n  ongetInfo\n}) {\n  _s();\n  function encode(text) {\n    return text.split('').map(char => {\n      return char.charCodeAt(0).toString(2).padStart(8, '0');\n    }).join(' ');\n  }\n  function decode(binary) {\n    return binary.split(' ').map(bin => {\n      return String.fromCharCode(parseInt(bin, 2));\n    }).join('');\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Beaufort Cipher is a variant of the Vigen\\xE8re cipher, employing a reversed alphabet key to encrypt and decrypt messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Beaufort Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: The Beaufort Cipher substitutes each plaintext character with a character determined by a combination of the plaintext and the key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Length: Similar to the Vigen\\xE8re cipher, the key length in the Beaufort Cipher matches the length of the plaintext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular subtraction or reversing the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption in the Beaufort Cipher involves reversing the encryption process by subtracting the key character from the ciphertext character to retrieve the plaintext character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For instance, using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n}\n_s(BinaryCode, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BinaryCode;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryCode\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryCode","ongetInfo","_s","encode","text","split","map","char","charCodeAt","toString","padStart","join","decode","binary","bin","String","fromCharCode","parseInt","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/BinaryCode.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryCode({ ongetInfo }) {\r\n    function encode(text) {\r\n        return text.split('').map(char => {\r\n            return char.charCodeAt(0).toString(2).padStart(8, '0');\r\n        }).join(' ');\r\n    }\r\n    \r\n    function decode(binary) {\r\n        return binary.split(' ').map(bin => {\r\n            return String.fromCharCode(parseInt(bin, 2));\r\n        }).join('');\r\n    }\r\n\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n    The Beaufort Cipher is a variant of the Vigenère cipher, employing a reversed alphabet key to encrypt and decrypt messages.\r\n</p>\r\n<p>\r\n    To encrypt using the Beaufort Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\r\n</p>\r\n<ul>\r\n    <li>Substitution Cipher: The Beaufort Cipher substitutes each plaintext character with a character determined by a combination of the plaintext and the key.</li>\r\n    <li>Key Length: Similar to the Vigenère cipher, the key length in the Beaufort Cipher matches the length of the plaintext.</li>\r\n    <li>Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular subtraction or reversing the alphabet.</li>\r\n    <li>Decryption: Decryption in the Beaufort Cipher involves reversing the encryption process by subtracting the key character from the ciphertext character to retrieve the plaintext character.</li>\r\n    <li>Example: For instance, using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.</li>\r\n</ul>\r\n\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} />\r\n};\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,UAAUA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC9C,SAASC,MAAMA,CAACC,IAAI,EAAE;IAClB,OAAOA,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAACC,IAAI,IAAI;MAC9B,OAAOA,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAChB;EAEA,SAASC,MAAMA,CAACC,MAAM,EAAE;IACpB,OAAOA,MAAM,CAACR,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACQ,GAAG,IAAI;MAChC,OAAOC,MAAM,CAACC,YAAY,CAACC,QAAQ,CAACH,GAAG,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAACH,IAAI,CAAC,EAAE,CAAC;EACf;EAGA,MAAMO,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMC,IAAI,gBACNtB,OAAA,CAAAE,SAAA;MAAAqB,QAAA,gBACIvB,OAAA;QAAAuB,QAAA,EAAG;MAEnB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ3B,OAAA;QAAAuB,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ3B,OAAA;QAAAuB,QAAA,gBACIvB,OAAA;UAAAuB,QAAA,EAAI;QAAwJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjK3B,OAAA;UAAAuB,QAAA,EAAI;QAAsH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC/H3B,OAAA;UAAAuB,QAAA,EAAI;QAA0L;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnM3B,OAAA;UAAAuB,QAAA,EAAI;QAA2L;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpM3B,OAAA;UAAAuB,QAAA,EAAI;QAAqJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9J,CAAC;IAAA,eAES,CACL;IACDvB,SAAS,CAACkB,IAAI,CAAC;EACnB,CAAC;EAEDzB,KAAK,CAAC+B,SAAS,CAAC,MAAM;IAClBP,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOrB,OAAA,CAACF,aAAa;IAACQ,MAAM,EAAEA,MAAO;IAACS,MAAM,EAAEA;EAAO;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5D;AAACtB,EAAA,CAzCuBF,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAyCjC;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}