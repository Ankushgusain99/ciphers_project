{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\AffineCipher.js\";\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AffineCipher() {\n  // Function to encrypt a message using the affine cipher\n  function encryptAffine(message, a, b) {\n    // Convert message to uppercase and remove all spaces and special characters\n    message = message.toUpperCase().replace(/[^A-Z]/g, '');\n    let result = '';\n\n    // Iterate through each character in the message\n    for (let i = 0; i < message.length; i++) {\n      let charCode = message.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let encryptedCharCode = (a * charCode + b) % 26; // Apply the affine cipher formula\n      let encryptedChar = String.fromCharCode(encryptedCharCode + 65); // Convert encrypted number back to character\n      result += encryptedChar; // Add encrypted character to result string\n    }\n    return result;\n  }\n\n  // Function to decrypt a message using the affine cipher\n  function decryptAffine(ciphertext, a, b) {\n    let result = '';\n\n    // Find the modular multiplicative inverse of a\n    let aInverse = -1;\n    for (let i = 0; i < 26; i++) {\n      if (i * a % 26 === 1) {\n        aInverse = i;\n        break;\n      }\n    }\n\n    // Iterate through each character in the ciphertext\n    for (let i = 0; i < ciphertext.length; i++) {\n      let charCode = ciphertext.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let decryptedCharCode = aInverse * (charCode - b + 26) % 26; // Apply the affine cipher formula\n      let decryptedChar = String.fromCharCode(decryptedCharCode + 65); // Convert decrypted number back to character\n      result += decryptedChar; // Add decrypted character to result string\n    }\n    return result;\n  }\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encryptAffine,\n    decode: decryptAffine,\n    keyComponentA: 1,\n    keyComponentB: 1\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 12\n  }, this);\n}\n_c = AffineCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"AffineCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","AffineCipher","encryptAffine","message","a","b","toUpperCase","replace","result","i","length","charCode","charCodeAt","encryptedCharCode","encryptedChar","String","fromCharCode","decryptAffine","ciphertext","aInverse","decryptedCharCode","decryptedChar","encode","decode","keyComponentA","keyComponentB","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/AffineCipher.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function AffineCipher() {\r\n\r\n    // Function to encrypt a message using the affine cipher\r\n    function encryptAffine(message, a, b) {\r\n        // Convert message to uppercase and remove all spaces and special characters\r\n        message = message.toUpperCase().replace(/[^A-Z]/g, '');\r\n        let result = '';\r\n\r\n        // Iterate through each character in the message\r\n        for (let i = 0; i < message.length; i++) {\r\n            let charCode = message.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n            let encryptedCharCode = (a * charCode + b) % 26;  // Apply the affine cipher formula\r\n            let encryptedChar = String.fromCharCode(encryptedCharCode + 65);  // Convert encrypted number back to character\r\n            result += encryptedChar;  // Add encrypted character to result string\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Function to decrypt a message using the affine cipher\r\n    function decryptAffine(ciphertext, a, b) {\r\n        let result = '';\r\n\r\n        // Find the modular multiplicative inverse of a\r\n        let aInverse = -1;\r\n        for (let i = 0; i < 26; i++) {\r\n            if ((i * a) % 26 === 1) {\r\n                aInverse = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Iterate through each character in the ciphertext\r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            let charCode = ciphertext.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n            let decryptedCharCode = (aInverse * (charCode - b + 26)) % 26;  // Apply the affine cipher formula\r\n            let decryptedChar = String.fromCharCode(decryptedCharCode + 65);  // Convert decrypted number back to character\r\n            result += decryptedChar;  // Add decrypted character to result string\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    return <CipherFactory encode={encryptAffine} decode={decryptAffine} keyComponentA={1} keyComponentB={1} />\r\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,eAAe,SAASC,YAAYA,CAAA,EAAG;EAEnC;EACA,SAASC,aAAaA,CAACC,OAAO,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAClC;IACAF,OAAO,GAAGA,OAAO,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IACtD,IAAIC,MAAM,GAAG,EAAE;;IAEf;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,OAAO,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIE,QAAQ,GAAGR,OAAO,CAACS,UAAU,CAACH,CAAC,CAAC,GAAG,EAAE,CAAC,CAAE;MAC5C,IAAII,iBAAiB,GAAG,CAACT,CAAC,GAAGO,QAAQ,GAAGN,CAAC,IAAI,EAAE,CAAC,CAAE;MAClD,IAAIS,aAAa,GAAGC,MAAM,CAACC,YAAY,CAACH,iBAAiB,GAAG,EAAE,CAAC,CAAC,CAAE;MAClEL,MAAM,IAAIM,aAAa,CAAC,CAAE;IAC9B;IAEA,OAAON,MAAM;EACjB;;EAEA;EACA,SAASS,aAAaA,CAACC,UAAU,EAAEd,CAAC,EAAEC,CAAC,EAAE;IACrC,IAAIG,MAAM,GAAG,EAAE;;IAEf;IACA,IAAIW,QAAQ,GAAG,CAAC,CAAC;IACjB,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACzB,IAAKA,CAAC,GAAGL,CAAC,GAAI,EAAE,KAAK,CAAC,EAAE;QACpBe,QAAQ,GAAGV,CAAC;QACZ;MACJ;IACJ;;IAEA;IACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,UAAU,CAACR,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAIE,QAAQ,GAAGO,UAAU,CAACN,UAAU,CAACH,CAAC,CAAC,GAAG,EAAE,CAAC,CAAE;MAC/C,IAAIW,iBAAiB,GAAID,QAAQ,IAAIR,QAAQ,GAAGN,CAAC,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC,CAAE;MAChE,IAAIgB,aAAa,GAAGN,MAAM,CAACC,YAAY,CAACI,iBAAiB,GAAG,EAAE,CAAC,CAAC,CAAE;MAClEZ,MAAM,IAAIa,aAAa,CAAC,CAAE;IAC9B;IAEA,OAAOb,MAAM;EACjB;EAGA,oBAAOR,OAAA,CAACF,aAAa;IAACwB,MAAM,EAAEpB,aAAc;IAACqB,MAAM,EAAEN,aAAc;IAACO,aAAa,EAAE,CAAE;IAACC,aAAa,EAAE;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9G;AAACC,EAAA,GA7CuB7B,YAAY;AA6CnC;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}