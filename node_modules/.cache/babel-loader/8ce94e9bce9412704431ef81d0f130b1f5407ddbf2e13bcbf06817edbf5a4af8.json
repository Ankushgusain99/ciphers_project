{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\CipherAscii.js\";\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CipherAscii() {\n  // Encode a string using ASCII cipher\n  function encode(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n      result += str.charCodeAt(i) + '-';\n    }\n    return result;\n  }\n\n  // Decode a string using ASCII cipher\n  function decode(str) {\n    var result = '';\n    var elements = str.split('-');\n    for (var i = 0; i < elements.length; i++) {\n      result += String.fromCharCode(elements[i]);\n    }\n    return result;\n  }\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 14\n  }, this);\n}\n_c = CipherAscii;\n;\nvar _c;\n$RefreshReg$(_c, \"CipherAscii\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","CipherAscii","encode","str","result","i","length","charCodeAt","decode","elements","split","String","fromCharCode","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/CipherAscii.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\n\r\nexport default function CipherAscii() {\r\n\r\n// Encode a string using ASCII cipher\r\nfunction encode(str) {\r\n    var result = '';\r\n    for (var i = 0; i < str.length; i++) {\r\n      result += str.charCodeAt(i) + '-';\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  // Decode a string using ASCII cipher\r\n  function decode(str) {\r\n    var result = '';\r\n    var elements = str.split('-');\r\n    for (var i = 0; i < elements.length; i++) {\r\n      result += String.fromCharCode(elements[i]);\r\n    }\r\n    return result;\r\n  }      \r\n  \r\n      return <CipherFactory encode={encode} decode={decode} />\r\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGpD,eAAe,SAASC,WAAWA,CAAA,EAAG;EAEtC;EACA,SAASC,MAAMA,CAACC,GAAG,EAAE;IACjB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCD,MAAM,IAAID,GAAG,CAACI,UAAU,CAACF,CAAC,CAAC,GAAG,GAAG;IACnC;IACA,OAAOD,MAAM;EACf;;EAEA;EACA,SAASI,MAAMA,CAACL,GAAG,EAAE;IACnB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIK,QAAQ,GAAGN,GAAG,CAACO,KAAK,CAAC,GAAG,CAAC;IAC7B,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,QAAQ,CAACH,MAAM,EAAED,CAAC,EAAE,EAAE;MACxCD,MAAM,IAAIO,MAAM,CAACC,YAAY,CAACH,QAAQ,CAACJ,CAAC,CAAC,CAAC;IAC5C;IACA,OAAOD,MAAM;EACf;EAEI,oBAAOJ,OAAA,CAACF,aAAa;IAACI,MAAM,EAAEA,MAAO;IAACM,MAAM,EAAEA;EAAO;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9D;AAACC,EAAA,GAtBuBhB,WAAW;AAsBlC;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}