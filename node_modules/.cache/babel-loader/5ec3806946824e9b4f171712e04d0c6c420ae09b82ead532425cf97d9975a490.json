{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\atbash.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AtbashEncoder({\n  ongetInfo\n}) {\n  _s();\n  const encode = text => {\n    let encoded = '';\n    for (let i = 0; i < text.length; i++) {\n      const charCode = text.charCodeAt(i);\n      if (charCode >= 65 && charCode <= 90) {\n        encoded += String.fromCharCode(155 - charCode);\n      } else if (charCode >= 97 && charCode <= 122) {\n        encoded += String.fromCharCode(219 - charCode);\n      } else {\n        encoded += text[i];\n      }\n    }\n    return encoded;\n  };\n  const decode = text => {\n    return encode(text);\n  };\n  const showInformation = () => {\n    const info = \"Information about atbash cipher\";\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 12\n  }, this);\n}\n_s(AtbashEncoder, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = AtbashEncoder;\n;\nvar _c;\n$RefreshReg$(_c, \"AtbashEncoder\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","AtbashEncoder","ongetInfo","_s","encode","text","encoded","i","length","charCode","charCodeAt","String","fromCharCode","decode","showInformation","info","useEffect","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/atbash.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\nexport default function AtbashEncoder({ongetInfo}) {\r\n    \r\n    const encode = (text) => {\r\n        let encoded = '';\r\n        for (let i = 0; i < text.length; i++) {\r\n            const charCode = text.charCodeAt(i);\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                encoded += String.fromCharCode(155 - charCode);\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                encoded += String.fromCharCode(219 - charCode);\r\n            } else {\r\n                encoded += text[i];\r\n            }\r\n        }\r\n        return encoded;\r\n    };\r\n\r\n    const decode = (text) => {\r\n        return encode(text);\r\n    };\r\n    \r\n    const showInformation=()=>{\r\n        const info=\"Information about atbash cipher\"\r\n        ongetInfo(info)\r\n    }\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} />\r\n\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACpD,eAAe,SAASC,aAAaA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAE/C,MAAMC,MAAM,GAAIC,IAAI,IAAK;IACrB,IAAIC,OAAO,GAAG,EAAE;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAClC,MAAME,QAAQ,GAAGJ,IAAI,CAACK,UAAU,CAACH,CAAC,CAAC;MACnC,IAAIE,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,EAAE,EAAE;QAClCH,OAAO,IAAIK,MAAM,CAACC,YAAY,CAAC,GAAG,GAAGH,QAAQ,CAAC;MAClD,CAAC,MAAM,IAAIA,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,GAAG,EAAE;QAC1CH,OAAO,IAAIK,MAAM,CAACC,YAAY,CAAC,GAAG,GAAGH,QAAQ,CAAC;MAClD,CAAC,MAAM;QACHH,OAAO,IAAID,IAAI,CAACE,CAAC,CAAC;MACtB;IACJ;IACA,OAAOD,OAAO;EAClB,CAAC;EAED,MAAMO,MAAM,GAAIR,IAAI,IAAK;IACrB,OAAOD,MAAM,CAACC,IAAI,CAAC;EACvB,CAAC;EAED,MAAMS,eAAe,GAACA,CAAA,KAAI;IACtB,MAAMC,IAAI,GAAC,iCAAiC;IAC5Cb,SAAS,CAACa,IAAI,CAAC;EACnB,CAAC;EACDlB,KAAK,CAACmB,SAAS,CAAC,MAAM;IAClBF,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOd,OAAA,CAACF,aAAa;IAACM,MAAM,EAAEA,MAAO;IAACS,MAAM,EAAEA;EAAO;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE5D;AAACjB,EAAA,CA/BuBF,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AA+BpC;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}