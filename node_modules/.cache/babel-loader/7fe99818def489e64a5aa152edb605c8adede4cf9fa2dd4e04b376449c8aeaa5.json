{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding({\n  ongetInfo\n}) {\n  _s();\n  const [arr, setArr] = useState([]);\n  let fin = \"\";\n  let abc = 0;\n  function encode(str) {\n    let result = Number(str);\n    abc = result;\n    result = (result >>> 0).toString(2);\n    return result.toString();\n  }\n  function decode(bin) {\n    let result = Number(bin);\n    result = (result >>> 0).toString(2);\n    return result.toString();\n  }\n  const displaySteps = () => {\n    let tempArr = [];\n    let number = abc;\n    while (number > 0) {\n      let a = number % 2;\n      number = Math.floor(number / 2);\n      tempArr.push(a);\n      fin += a;\n    }\n    setArr(tempArr.reverse());\n  };\n  useEffect(() => {\n    showInformation();\n  }, []); // Effect runs once on mount\n\n  const showInformation = () => {\n    displaySteps();\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decimal Number: A number expressed in base-10, using digits from 0 to 9.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Steps are as follows:-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), arr.map((value, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"After iteration Decimal number divided by 2, we get \", value]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Final Answer is: \", fin.split(\"\").reverse().join(\"\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(BinaryEncoding, \"+wnFstBQ/alVUnHjAeilY8YMxPY=\");\n_c = BinaryEncoding;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","useState","useEffect","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BinaryEncoding","ongetInfo","_s","arr","setArr","fin","abc","encode","str","result","Number","toString","decode","bin","displaySteps","tempArr","number","a","Math","floor","push","reverse","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","index","split","join","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding({ ongetInfo }) {\r\n  const [arr, setArr] = useState([]);\r\n  let fin = \"\";\r\n  let abc = 0;\r\n\r\n  function encode(str) {\r\n    let result = Number(str);\r\n    abc = result;\r\n    result = (result >>> 0).toString(2);\r\n    return result.toString();\r\n  }\r\n  \r\n  function decode(bin) {\r\n    let result = Number(bin);\r\n    result = (result >>> 0).toString(2);\r\n    return result.toString();\r\n  }\r\n\r\n  const displaySteps = () => {\r\n    let tempArr = [];\r\n    let number = abc;\r\n    while (number > 0) {\r\n      let a = number % 2;\r\n      number = Math.floor(number / 2);\r\n      tempArr.push(a);\r\n      fin += a;\r\n    }\r\n    setArr(tempArr.reverse());\r\n  }\r\n\r\n  useEffect(() => {\r\n    showInformation();\r\n  }, []); // Effect runs once on mount\r\n\r\n  const showInformation = () => {\r\n    displaySteps();\r\n    const info = (\r\n      <>\r\n        <p>\r\n          Decimal to Binary Conversion is the process of converting a decimal number to its binary representation.\r\n        </p>\r\n        <ul>\r\n          <li>Decimal Number: A number expressed in base-10, using digits from 0 to 9.</li>\r\n          <li>Binary Representation: Binary is a base-2 numeral system, using only 0 and 1, where each digit represents a power of 2.</li>\r\n          <li>Conversion Process: To convert a decimal number to binary, repeatedly divide the number by 2 and note the remainders, then read the remainders in reverse order to obtain the binary representation.</li>\r\n          <li>Example: For decimal number 10, dividing by 2 yields remainders 0, 1, 0, 1 (reading in reverse gives binary 1010).</li>\r\n          <li>Uses: Binary representation is commonly used in digital electronics and computing for storing and processing data.</li>\r\n        </ul>\r\n        <p>Steps are as follows:-</p>\r\n        {arr.map((value, index) => (\r\n          <p key={index}>After iteration Decimal number divided by 2, we get {value}</p>\r\n        ))}\r\n        <p>Final Answer is: {fin.split(\"\").reverse().join(\"\")}</p>\r\n      </>\r\n    );\r\n    ongetInfo(info);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CipherFactory encode={encode} decode={decode} />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}