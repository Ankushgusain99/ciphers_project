{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\updated_ciphers\\\\ciphers_project\\\\src\\\\components\\\\ciphers\\\\AffineCipher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport CipherOverview from '../../ui/CipherOverview';\nimport { Header, Description, References, Example } from '../../overviews/AffineOverview';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AffineCipher() {\n  _s();\n  const [showOverview, setShowOverview] = useState(false);\n  const [values, setValues] = useState(-1);\n\n  // Function to encrypt a message using the affine cipher\n  function encode(message, a, b) {\n    // Convert message to uppercase and remove all spaces and special characters\\\n    message = message.toUpperCase().replace(/[^A-Z]/g, '');\n    let result = '';\n\n    // Iterate through each character in the message\n    for (let i = 0; i < message.length; i++) {\n      let charCode = message.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let encryptedCharCode = (a * charCode + b) % 26; // Apply the affine cipher formula\n      let encryptedChar = String.fromCharCode(encryptedCharCode + 65); // Convert encrypted number back to character\n      result += encryptedChar; // Add encrypted character to result string\n    }\n    return result;\n  }\n\n  // Function to decrypt a message using the affine cipher\n  function decode(ciphertext, a, b) {\n    let result = '';\n    // Find the modular multiplicative inverse of a\n    for (let i = 0; i < 26; i++) {\n      if (i * a % 26 === 1) {\n        setValues(i);\n        break;\n      }\n    }\n\n    // Iterate through each character in the ciphertext\n    for (let i = 0; i < ciphertext.length; i++) {\n      let charCode = ciphertext.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let decryptedCharCode = values * (charCode - b + 26) % 26; // Apply the affine cipher formula\n      let decryptedChar = String.fromCharCode(decryptedCharCode + 65); // Convert decrypted number back to character\n      result += decryptedChar; // Add decrypted character to result string\n    }\n    return result;\n  }\n  // Show information about the Affine Cipher\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showOverview && /*#__PURE__*/_jsxDEV(CipherOverview, {\n      setShowOverview: setShowOverview,\n      Header: Header,\n      Description: Description,\n      Example: Example,\n      References: References\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      title: \"Caesar Cipher\",\n      setShowOverview: setShowOverview,\n      encode: encode,\n      decode: decode,\n      keyComponentA: 1,\n      keyComponentB: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n_s(AffineCipher, \"VccKFiIvwNfKqJU7XjOf4QvdGBw=\");\n_c = AffineCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"AffineCipher\");","map":{"version":3,"names":["React","useState","CipherFactory","CipherOverview","Header","Description","References","Example","jsxDEV","_jsxDEV","Fragment","_Fragment","AffineCipher","_s","showOverview","setShowOverview","values","setValues","encode","message","a","b","toUpperCase","replace","result","i","length","charCode","charCodeAt","encryptedCharCode","encryptedChar","String","fromCharCode","decode","ciphertext","decryptedCharCode","decryptedChar","children","fileName","_jsxFileName","lineNumber","columnNumber","title","keyComponentA","keyComponentB","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/updated_ciphers/ciphers_project/src/components/ciphers/AffineCipher.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\nimport CipherOverview from '../../ui/CipherOverview';\r\nimport { Header,Description,References,Example } from '../../overviews/AffineOverview';\r\nexport default function AffineCipher() {\r\n    const [showOverview, setShowOverview] = useState(false);\r\n        const[values,setValues]=useState(-1)\r\n        \r\n        // Function to encrypt a message using the affine cipher\r\n        function encode(message, a, b) {\r\n            // Convert message to uppercase and remove all spaces and special characters\\\r\n            message = message.toUpperCase().replace(/[^A-Z]/g, '');\r\n            let result = '';\r\n    \r\n            // Iterate through each character in the message\r\n            for (let i = 0; i < message.length; i++) {\r\n                let charCode = message.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n                let encryptedCharCode = (a * charCode + b) % 26;  // Apply the affine cipher formula\r\n                let encryptedChar = String.fromCharCode(encryptedCharCode + 65);  // Convert encrypted number back to character\r\n                result += encryptedChar;  // Add encrypted character to result string\r\n                \r\n            }\r\n            return result;\r\n        }\r\n    \r\n        // Function to decrypt a message using the affine cipher\r\n        function decode(ciphertext, a, b) {\r\n            let result = '';\r\n            // Find the modular multiplicative inverse of a\r\n            for (let i = 0; i < 26; i++) {\r\n                if ((i * a) % 26 === 1) {\r\n                    setValues(i);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            // Iterate through each character in the ciphertext\r\n            for (let i = 0; i < ciphertext.length; i++) {\r\n                let charCode = ciphertext.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n                let decryptedCharCode = (values * (charCode - b + 26)) % 26;  // Apply the affine cipher formula\r\n                let decryptedChar = String.fromCharCode(decryptedCharCode + 65);  // Convert decrypted number back to character\r\n                result += decryptedChar;  // Add decrypted character to result string\r\n                \r\n            }\r\n    \r\n            return result;\r\n        }\r\n    // Show information about the Affine Cipher\r\n\r\n    \r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n          {showOverview && (\r\n            <CipherOverview\r\n              setShowOverview={setShowOverview}\r\n              Header={Header}\r\n              Description={Description}\r\n              Example={Example}\r\n              References={References}\r\n            />\r\n          )}\r\n          <CipherFactory\r\n            title={\"Caesar Cipher\"}\r\n            setShowOverview = {setShowOverview}\r\n            encode={encode}\r\n            decode={decode}\r\n            keyComponentA={1}\r\n            keyComponentB={1}\r\n          />\r\n        </>\r\n      );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}