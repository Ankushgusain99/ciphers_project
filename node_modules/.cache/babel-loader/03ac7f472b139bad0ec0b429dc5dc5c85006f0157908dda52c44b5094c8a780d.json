{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\AffineCipher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AffineCipher({\n  ongetInfo\n}) {\n  _s();\n  const [values, setValues] = useState(-1);\n\n  // Function to encrypt a message using the affine cipher\n  function encryptAffine(message, a, b) {\n    // Convert message to uppercase and remove all spaces and special characters\\\n    message = message.toUpperCase().replace(/[^A-Z]/g, '');\n    let result = '';\n\n    // Iterate through each character in the message\n    for (let i = 0; i < message.length; i++) {\n      let charCode = message.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let encryptedCharCode = (a * charCode + b) % 26; // Apply the affine cipher formula\n      let encryptedChar = String.fromCharCode(encryptedCharCode + 65); // Convert encrypted number back to character\n      result += encryptedChar; // Add encrypted character to result string\n    }\n    return result;\n  }\n\n  // Function to decrypt a message using the affine cipher\n  function decryptAffine(ciphertext, a, b) {\n    let result = '';\n    // Find the modular multiplicative inverse of a\n    for (let i = 0; i < 26; i++) {\n      if (i * a % 26 === 1) {\n        setValues(i);\n        break;\n      }\n    }\n\n    // Iterate through each character in the ciphertext\n    for (let i = 0; i < ciphertext.length; i++) {\n      let charCode = ciphertext.charCodeAt(i) - 65; // Convert character to number between 0 and 25\n      let decryptedCharCode = values * (charCode - b + 26) % 26; // Apply the affine cipher formula\n      let decryptedChar = String.fromCharCode(decryptedCharCode + 65); // Convert decrypted number back to character\n      result += decryptedChar; // Add decrypted character to result string\n    }\n    return result;\n  }\n  // Show information about the Affine Cipher\n\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Affine Cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and then converted back to a letter.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The encryption function for the Affine Cipher takes the form of:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"C = (a * P + b) % 26\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Monoalphabetic Substitution Cipher: Each letter of the plaintext is replaced by a corresponding letter of the ciphertext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Mathematical Function: The encryption function involves multiplying the plaintext letter's numerical value by a constant 'a', adding a constant 'b', and then taking the result modulo 26.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves applying the inverse function to convert the ciphertext back to plaintext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key: The key for the Affine Cipher consists of two numbers, 'a' and 'b', where 'a' must be chosen such that 'a' and the length of the alphabet are coprime.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: With the key (a=5, b=8), 'HELLO' might become 'ZOOPM'.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n\n  // Call the showInformation function when the component mounts\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encryptAffine,\n      decode: decryptAffine,\n      keyComponentA: \"Key A\",\n      keyComponentB: \"Key B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(AffineCipher, \"b6eFYBRA/OloHQvr01KrgS6VA+0=\");\n_c = AffineCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"AffineCipher\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AffineCipher","ongetInfo","_s","values","setValues","encryptAffine","message","a","b","toUpperCase","replace","result","i","length","charCode","charCodeAt","encryptedCharCode","encryptedChar","String","fromCharCode","decryptAffine","ciphertext","decryptedCharCode","decryptedChar","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","encode","decode","keyComponentA","keyComponentB","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/AffineCipher.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function AffineCipher({ ongetInfo }) {\r\n        const[values,setValues]=useState(-1)\r\n        \r\n        // Function to encrypt a message using the affine cipher\r\n        function encryptAffine(message, a, b) {\r\n            // Convert message to uppercase and remove all spaces and special characters\\\r\n            message = message.toUpperCase().replace(/[^A-Z]/g, '');\r\n            let result = '';\r\n    \r\n            // Iterate through each character in the message\r\n            for (let i = 0; i < message.length; i++) {\r\n                let charCode = message.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n                let encryptedCharCode = (a * charCode + b) % 26;  // Apply the affine cipher formula\r\n                let encryptedChar = String.fromCharCode(encryptedCharCode + 65);  // Convert encrypted number back to character\r\n                result += encryptedChar;  // Add encrypted character to result string\r\n                \r\n            }\r\n            return result;\r\n        }\r\n    \r\n        // Function to decrypt a message using the affine cipher\r\n        function decryptAffine(ciphertext, a, b) {\r\n            let result = '';\r\n            // Find the modular multiplicative inverse of a\r\n            for (let i = 0; i < 26; i++) {\r\n                if ((i * a) % 26 === 1) {\r\n                    setValues(i);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            // Iterate through each character in the ciphertext\r\n            for (let i = 0; i < ciphertext.length; i++) {\r\n                let charCode = ciphertext.charCodeAt(i) - 65;  // Convert character to number between 0 and 25\r\n                let decryptedCharCode = (values * (charCode - b + 26)) % 26;  // Apply the affine cipher formula\r\n                let decryptedChar = String.fromCharCode(decryptedCharCode + 65);  // Convert decrypted number back to character\r\n                result += decryptedChar;  // Add decrypted character to result string\r\n                \r\n            }\r\n    \r\n            return result;\r\n        }\r\n    // Show information about the Affine Cipher\r\n\r\n    \r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The Affine Cipher is a type of monoalphabetic substitution cipher, where each letter in an alphabet is mapped to its numeric equivalent, encrypted using a simple mathematical function, and then converted back to a letter.\r\n                </p>\r\n                <p>\r\n                    The encryption function for the Affine Cipher takes the form of:\r\n                    <br />\r\n                    <strong>C = (a * P + b) % 26</strong>\r\n                </p>\r\n                <ul>\r\n                    <li>Monoalphabetic Substitution Cipher: Each letter of the plaintext is replaced by a corresponding letter of the ciphertext.</li>\r\n                    <li>Mathematical Function: The encryption function involves multiplying the plaintext letter's numerical value by a constant 'a', adding a constant 'b', and then taking the result modulo 26.</li>\r\n                    <li>Decryption: Decryption involves applying the inverse function to convert the ciphertext back to plaintext.</li>\r\n                    <li>Key: The key for the Affine Cipher consists of two numbers, 'a' and 'b', where 'a' must be chosen such that 'a' and the length of the alphabet are coprime.</li>\r\n                    <li>Example: With the key (a=5, b=8), 'HELLO' might become 'ZOOPM'.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    // Call the showInformation function when the component mounts\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            \r\n            <CipherFactory encode={encryptAffine} decode={decryptAffine} keyComponentA=\"Key A\" keyComponentB=\"Key B\" />\r\n        </>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}