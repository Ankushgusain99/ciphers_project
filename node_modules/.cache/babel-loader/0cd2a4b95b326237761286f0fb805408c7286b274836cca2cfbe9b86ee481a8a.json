{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\caesar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CaesarCipher({\n  ongetInfo\n}) {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [inputChars, setInputChars] = useState([]);\n  const [outputChars, setOutputChars] = useState([]);\n  const [placeShift, setPlaceShift] = useState();\n  // Create a function to encode a string using the Caesar cipher\n  function encode(str, shift) {\n    // Create an array of the characters in the string\n    const encodeChars = [];\n    const decodedChars = [];\n    const chars = str.split('');\n\n    // Shift each character by the specified number of positions\n    const encodedChars = chars.map(char => {\n      const charCode = char.charCodeAt(0);\n      let newCharCode = charCode + shift;\n      if (charCode >= 65 && charCode <= 90) {\n        // Handle uppercase characters\n        if (newCharCode < 65) {\n          newCharCode = 90 - (65 - newCharCode - 1);\n        } else if (newCharCode > 90) {\n          newCharCode = 65 + (newCharCode - 90 - 1);\n        }\n      } else if (charCode >= 97 && charCode <= 122) {\n        // Handle lowercase characters\n        if (newCharCode < 97) {\n          newCharCode = 122 - (97 - newCharCode - 1);\n        } else if (newCharCode > 122) {\n          newCharCode = 97 + (newCharCode - 122 - 1);\n        }\n        newCharCode += charCode;\n        encodeChars.push(newCharCode);\n        decodedChars.push(char);\n      }\n      setInputText(str);\n      setInputChars([...inputChars, str]);\n      setOutputChars([...outputChars, String.fromCharCode(newCharCode)]);\n      return String.fromCharCode(newCharCode);\n    });\n\n    // Return the encoded string\n    return encodedChars.join('');\n  }\n\n  // Create a function to decode a string using the Caesar cipher\n  function decode(str, shift) {\n    // Encode the string with a negative shift to reverse the original shift\n    return encode(str, -shift);\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Caesar cipher, specify a shift value and enter your text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Shift: The number of positions each letter in the plaintext is shifted.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid black',\n        padding: '10px',\n        margin: '20px',\n        overflow: 'scroll',\n        height: '200px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: '100%',\n          borderCollapse: 'collapse',\n          fontFamily: 'arial, sans-serif'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Input Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px',\n                fontSize: '20px'\n              },\n              children: \"Output Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: inputChars.map((char, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: char\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                border: '1px solid black',\n                padding: '8px'\n              },\n              children: outputChars[index]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentA: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(CaesarCipher, \"iGaOWzX0iDXbCMlsxpyVpQqmQ9I=\");\n_c = CaesarCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"CaesarCipher\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","CaesarCipher","ongetInfo","_s","inputText","setInputText","inputChars","setInputChars","outputChars","setOutputChars","placeShift","setPlaceShift","encode","str","shift","encodeChars","decodedChars","chars","split","encodedChars","map","char","charCode","charCodeAt","newCharCode","push","String","fromCharCode","join","decode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","style","border","padding","margin","overflow","height","width","borderCollapse","fontFamily","fontSize","textAlign","index","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/caesar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function CaesarCipher({ongetInfo}) {\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputChars, setInputChars] = useState([]);\r\n    const [outputChars, setOutputChars] = useState([]);\r\n    const [placeShift,setPlaceShift]=useState();\r\n    // Create a function to encode a string using the Caesar cipher\r\n    function encode(str, shift) {\r\n        // Create an array of the characters in the string\r\n        const encodeChars = [];\r\n        const decodedChars = [];\r\n        const chars = str.split('');\r\n\r\n        // Shift each character by the specified number of positions\r\n        const encodedChars = chars.map((char) => {\r\n            const charCode = char.charCodeAt(0);\r\n            let newCharCode = charCode + shift;\r\n            if (charCode >= 65 && charCode <= 90) {\r\n                // Handle uppercase characters\r\n                if (newCharCode < 65) {\r\n                    newCharCode = 90 - (65 - newCharCode - 1);\r\n                } else if (newCharCode > 90) {\r\n                    newCharCode = 65 + (newCharCode - 90 - 1);\r\n                }\r\n            } else if (charCode >= 97 && charCode <= 122) {\r\n                // Handle lowercase characters\r\n                if (newCharCode < 97) {\r\n                    newCharCode = 122 - (97 - newCharCode - 1);\r\n                } else if (newCharCode > 122) {\r\n                    newCharCode = 97 + (newCharCode - 122 - 1);\r\n                }\r\n                newCharCode += charCode;\r\n                encodeChars.push(newCharCode);\r\n                decodedChars.push(char);\r\n            }\r\n            setInputText(str);\r\n            setInputChars([...inputChars, str]);\r\n            setOutputChars([...outputChars, String.fromCharCode(newCharCode)]);\r\n            return String.fromCharCode(newCharCode);\r\n        });\r\n\r\n        // Return the encoded string\r\n        return encodedChars.join('');\r\n    }\r\n\r\n    // Create a function to decode a string using the Caesar cipher\r\n    function decode(str, shift) {\r\n        // Encode the string with a negative shift to reverse the original shift\r\n        return encode(str, -shift);\r\n    }\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The Caesar cipher is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.\r\n                </p>\r\n                <p>To encrypt using the Caesar cipher, specify a shift value and enter your text.</p>\r\n                <ul>\r\n                    <li>Substitution Cipher: Each letter in the plaintext is replaced by a letter some fixed number of positions down or up the alphabet.</li>\r\n                    <li>Shift: The number of positions each letter in the plaintext is shifted.</li>\r\n                    <li>Encryption: To encrypt, replace each letter in the plaintext with the letter that is shifted down the alphabet by the specified shift value.</li>\r\n                    <li>Decryption: To decrypt, use the opposite shift value to shift the letters back to their original positions.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return( \r\n    <>\r\n        <div style={{ border: '1px solid black', padding: '10px', margin: '20px',overflow:'scroll' ,height:'200px'}}>\r\n            <table style={{ width: '100%', borderCollapse: 'collapse', fontFamily: 'arial, sans-serif' }}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Input Text</th>\r\n                        <th style={{ border: '1px solid black', padding: '8px', fontSize: '20px' }}>Output Text</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody style={{ textAlign: 'center' }}>\r\n                    {inputChars.map((char, index) => (\r\n                        <tr key={index}>\r\n                            <td style={{ border: '1px solid black', padding: '8px' }}>{char}</td>\r\n                            <td style={{ border: '1px solid black', padding: '8px' }}>{outputChars[index]}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <CipherFactory encode={encode} decode={decode} keyComponentA={1} />\r\n    </>\r\n    \r\n)\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}