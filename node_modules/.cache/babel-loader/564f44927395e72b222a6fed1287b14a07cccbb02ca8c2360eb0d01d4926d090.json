{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Checkerboard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Checkerboard({\n  ongetInfo\n}) {\n  _s();\n  function generateCheckerboardSquare(keyword) {\n    keyword = keyword.toUpperCase().replace(/J/g, \"I\");\n    let alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\";\n    let square = [];\n    let usedLetters = new Set();\n    for (let char of keyword) {\n      if (!usedLetters.has(char)) {\n        square.push(char);\n        usedLetters.add(char);\n      }\n    }\n    for (let char of alphabet) {\n      if (!usedLetters.has(char)) {\n        square.push(char);\n        usedLetters.add(char);\n      }\n    }\n    let matrix = [];\n    for (let i = 0; i < 5; i++) {\n      matrix.push(square.slice(i * 5, i * 5 + 5));\n    }\n    return matrix;\n  }\n\n  // Function to encrypt plaintext using the Autokey cipher\n  function encode(plaintext, keyword) {\n    let square = generateCheckerboardSquare(keyword);\n    let coordinates = {};\n    for (let i = 0; i < 5; i++) {\n      for (let j = 0; j < 5; j++) {\n        coordinates[square[i][j]] = `${i + 1}${j + 1}`;\n      }\n    }\n    plaintext = plaintext.toUpperCase().replace(/J/g, \"I\").replace(/[^A-Z]/g, '');\n    let ciphertext = \"\";\n    for (let char of plaintext) {\n      ciphertext += coordinates[char];\n    }\n    return ciphertext;\n  }\n\n  // Function to decrypt ciphertext using the Autokey cipher\n  function decode(ciphertext, keyword) {\n    let square = generateCheckerboardSquare(keyword);\n    let coordinates = {};\n    for (let i = 0; i < 5; i++) {\n      for (let j = 0; j < 5; j++) {\n        coordinates[`${i + 1}${j + 1}`] = square[i][j];\n      }\n    }\n    let plaintext = \"\";\n    for (let i = 0; i < ciphertext.length; i += 2) {\n      let coord = ciphertext.substring(i, i + 2);\n      plaintext += coordinates[coord];\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Autokey Cipher is a substitution cipher that extends the Vigen\\xE8re cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigen\\xE8re cipher's key.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode,\n    keyComponentA: 'STR'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 12\n  }, this);\n}\n_s(Checkerboard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Checkerboard;\n;\nvar _c;\n$RefreshReg$(_c, \"Checkerboard\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","Checkerboard","ongetInfo","_s","generateCheckerboardSquare","keyword","toUpperCase","replace","alphabet","square","usedLetters","Set","char","has","push","add","matrix","i","slice","encode","plaintext","coordinates","j","ciphertext","decode","length","coord","substring","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Checkerboard.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function Checkerboard({ ongetInfo }) {\r\n\r\n    function generateCheckerboardSquare(keyword) {\r\n        keyword = keyword.toUpperCase().replace(/J/g, \"I\");\r\n        let alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\";\r\n        let square = [];\r\n        let usedLetters = new Set();\r\n    \r\n        for (let char of keyword) {\r\n            if (!usedLetters.has(char)) {\r\n                square.push(char);\r\n                usedLetters.add(char);\r\n            }\r\n        }\r\n    \r\n        for (let char of alphabet) {\r\n            if (!usedLetters.has(char)) {\r\n                square.push(char);\r\n                usedLetters.add(char);\r\n            }\r\n        }\r\n    \r\n        let matrix = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            matrix.push(square.slice(i * 5, i * 5 + 5));\r\n        }\r\n    \r\n        return matrix;\r\n    }\r\n    \r\n    // Function to encrypt plaintext using the Autokey cipher\r\n    function encode(plaintext, keyword) {\r\n        let square = generateCheckerboardSquare(keyword);\r\n        let coordinates = {};\r\n    \r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 0; j < 5; j++) {\r\n                coordinates[square[i][j]] = `${i + 1}${j + 1}`;\r\n            }\r\n        }\r\n    \r\n        plaintext = plaintext.toUpperCase().replace(/J/g, \"I\").replace(/[^A-Z]/g, '');\r\n        let ciphertext = \"\";\r\n    \r\n        for (let char of plaintext) {\r\n            ciphertext += coordinates[char];\r\n        }\r\n    \r\n        return ciphertext;\r\n    }\r\n\r\n    \r\n// Function to decrypt ciphertext using the Autokey cipher\r\nfunction decode(ciphertext, keyword) {\r\n    let square = generateCheckerboardSquare(keyword);\r\n    let coordinates = {};\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n        for (let j = 0; j < 5; j++) {\r\n            coordinates[`${i + 1}${j + 1}`] = square[i][j];\r\n        }\r\n    }\r\n\r\n    let plaintext = \"\";\r\n    for (let i = 0; i < ciphertext.length; i += 2) {\r\n        let coord = ciphertext.substring(i, i + 2);\r\n        plaintext += coordinates[coord];\r\n    }\r\n\r\n    return plaintext;\r\n}\r\n\r\n\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n    The Autokey Cipher is a substitution cipher that extends the Vigenère cipher. It utilizes a key that is as long as the plaintext, making it a polyalphabetic substitution cipher.\r\n</p>\r\n<p>\r\n    To encrypt using the Autokey Cipher, each character of the plaintext is combined with a character from the key to produce the ciphertext.\r\n</p>\r\n<ul>\r\n    <li>Substitution Cipher: Each character in the plaintext is replaced by a character derived from a combination of the plaintext and the key.</li>\r\n    <li>Key Length: The key used in the Autokey Cipher is as long as the plaintext, extending the Vigenère cipher's key.</li>\r\n    <li>Encryption: To encrypt, each character in the plaintext is combined with a character from the key using a mathematical operation, typically modular addition.</li>\r\n    <li>Decryption: Decryption involves reversing the encryption process, subtracting the key character from the ciphertext character to retrieve the plaintext character.</li>\r\n    <li>Example: Using a key 'KEY', if 'H' in the plaintext is combined with 'K' from the key, the resulting ciphertext character might be 'S'.</li>\r\n</ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return <CipherFactory encode={encode} decode={decode} keyComponentA={'STR'} />\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}