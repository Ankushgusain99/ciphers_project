{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\ASCII.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AsciiCipher({\n  ongetInfo\n}) {\n  _s();\n  // Encode a string using ASCII cipher\n  function encode(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n      result += str.charCodeAt(i) + '-';\n    }\n    return result;\n  }\n\n  // Decode a string using ASCII cipher\n  function decode(str) {\n    var result = '';\n    var elements = str.split('-');\n    for (var i = 0; i < elements.length; i++) {\n      result += String.fromCharCode(elements[i]);\n    }\n    return result;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ADFGVX cipher is a field cipher used by the German Army during World War I.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ADFGVX cipher, a Polybius square and a transposition cipher are combined.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: The plaintext is first converted into pairs of ADFGVX characters based on their positions in a Polybius square.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Transposition: The resulting pairs are then reordered according to a keyword.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: The final result is the encrypted ciphertext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The ciphertext is reordered according to the keyword to retrieve the pairs of ADFGVX characters, which are then converted back into plaintext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 14\n  }, this);\n}\n_s(AsciiCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = AsciiCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"AsciiCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","AsciiCipher","ongetInfo","_s","encode","str","result","i","length","charCodeAt","decode","elements","split","String","fromCharCode","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/ASCII.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../ui/EncryptDecrypt';\r\n\r\nexport default function AsciiCipher({ongetInfo}) {\r\n\r\n// Encode a string using ASCII cipher\r\nfunction encode(str) {\r\n    var result = '';\r\n    for (var i = 0; i < str.length; i++) {\r\n      result += str.charCodeAt(i) + '-';\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  // Decode a string using ASCII cipher\r\n  function decode(str) {\r\n    var result = '';\r\n    var elements = str.split('-');\r\n    for (var i = 0; i < elements.length; i++) {\r\n      result += String.fromCharCode(elements[i]);\r\n    }\r\n    return result;\r\n  }     \r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\n                The ADFGVX cipher is a field cipher used by the German Army during World War I.\r\n            </p>\r\n            <p>\r\n                To encrypt using the ADFGVX cipher, a Polybius square and a transposition cipher are combined.\r\n            </p>\r\n            <ul>\r\n                <li>Substitution Cipher: The plaintext is first converted into pairs of ADFGVX characters based on their positions in a Polybius square.</li>\r\n                <li>Transposition: The resulting pairs are then reordered according to a keyword.</li>\r\n                <li>Encryption: The final result is the encrypted ciphertext.</li>\r\n                <li>Decryption: The ciphertext is reordered according to the keyword to retrieve the pairs of ADFGVX characters, which are then converted back into plaintext.</li>\r\n            </ul>\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []); \r\n\r\n      return <CipherFactory encode={encode} decode={decode} />\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjD,eAAe,SAASC,WAAWA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAEjD;EACA,SAASC,MAAMA,CAACC,GAAG,EAAE;IACjB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCD,MAAM,IAAID,GAAG,CAACI,UAAU,CAACF,CAAC,CAAC,GAAG,GAAG;IACnC;IACA,OAAOD,MAAM;EACf;;EAEA;EACA,SAASI,MAAMA,CAACL,GAAG,EAAE;IACnB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIK,QAAQ,GAAGN,GAAG,CAACO,KAAK,CAAC,GAAG,CAAC;IAC7B,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,QAAQ,CAACH,MAAM,EAAED,CAAC,EAAE,EAAE;MACxCD,MAAM,IAAIO,MAAM,CAACC,YAAY,CAACH,QAAQ,CAACJ,CAAC,CAAC,CAAC;IAC5C;IACA,OAAOD,MAAM;EACf;EACA,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,IAAI,gBACNlB,OAAA,CAAAE,SAAA;MAAAiB,QAAA,gBACInB,OAAA;QAAAmB,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJvB,OAAA;QAAAmB,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJvB,OAAA;QAAAmB,QAAA,gBACInB,OAAA;UAAAmB,QAAA,EAAI;QAAoI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7IvB,OAAA;UAAAmB,QAAA,EAAI;QAA6E;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtFvB,OAAA;UAAAmB,QAAA,EAAI;QAAyD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClEvB,OAAA;UAAAmB,QAAA,EAAI;QAA0J;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnK,CAAC;IAAA,eACP,CACL;IACDnB,SAAS,CAACc,IAAI,CAAC;EACnB,CAAC;EAEDrB,KAAK,CAAC2B,SAAS,CAAC,MAAM;IAClBP,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEA,oBAAOjB,OAAA,CAACF,aAAa;IAACQ,MAAM,EAAEA,MAAO;IAACM,MAAM,EAAEA;EAAO;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9D;AAAClB,EAAA,CA7CuBF,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AA6ClC;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}