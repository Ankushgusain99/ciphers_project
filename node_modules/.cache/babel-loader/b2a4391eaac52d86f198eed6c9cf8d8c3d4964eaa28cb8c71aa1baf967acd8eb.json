{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Baconian.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BaconianCipher({\n  ongetInfo\n}) {\n  _s();\n  // Encryption function for Baconian Cipher\n  function baconianEncrypt(plaintext) {\n    // Define the Baconian Cipher lookup table\n    const baconianTable = {\n      A: \"AAAAA\",\n      B: \"AAAAB\",\n      C: \"AAABA\",\n      D: \"AAABB\",\n      E: \"AABAA\",\n      F: \"AABAB\",\n      G: \"AABBA\",\n      H: \"AABBB\",\n      I: \"ABAAA\",\n      J: \"ABAAB\",\n      K: \"ABABA\",\n      L: \"ABABB\",\n      M: \"ABBAA\",\n      N: \"ABBAB\",\n      O: \"ABBBA\",\n      P: \"ABBBB\",\n      Q: \"BAAAA\",\n      R: \"BAAAB\",\n      S: \"BAABA\",\n      T: \"BAABB\",\n      U: \"BABAA\",\n      V: \"BABAB\",\n      W: \"BABBA\",\n      X: \"BABBB\",\n      Y: \"BBAAA\",\n      Z: \"BBAAB\"\n    };\n\n    // Convert plaintext to uppercase and remove any spaces\n    plaintext = plaintext.toUpperCase().replace(/\\s/g, \"\");\n\n    // Initialize the ciphertext variable\n    let ciphertext = \"\";\n\n    // Loop through each character in the plaintext\n    for (let i = 0; i < plaintext.length; i++) {\n      // Get the Baconian code for the current character\n      const baconianCode = baconianTable[plaintext[i]];\n\n      // Add the Baconian code to the ciphertext\n      if (baconianCode) {\n        ciphertext += baconianCode;\n      } else {\n        ciphertext += plaintext[i];\n      }\n    }\n    return ciphertext;\n  }\n\n  // Decryption function for Baconian Cipher\n  function baconianDecrypt(ciphertext) {\n    // Define the Baconian Cipher lookup table\n    const baconianTable = {\n      AAAAA: \"A\",\n      AAAAB: \"B\",\n      AAABA: \"C\",\n      AAABB: \"D\",\n      AABAA: \"E\",\n      AABAB: \"F\",\n      AABBA: \"G\",\n      AABBB: \"H\",\n      ABAAA: \"I\",\n      ABAAB: \"J\",\n      ABABA: \"K\",\n      ABABB: \"L\",\n      ABBAA: \"M\",\n      ABBAB: \"N\",\n      ABBBA: \"O\",\n      ABBBB: \"P\",\n      BAAAA: \"Q\",\n      BAAAB: \"R\",\n      BAABA: \"S\",\n      BAABB: \"T\",\n      BABAA: \"U\",\n      BABAB: \"V\",\n      BABBA: \"W\",\n      BABBB: \"X\",\n      BBAAA: \"Y\",\n      BBAAB: \"Z\"\n    };\n\n    // Initialize the plaintext variable\n    let plaintext = \"\";\n\n    // Loop through the ciphertext in groups of 5 characters\n    for (let i = 0; i < ciphertext.length; i += 5) {\n      // Get the current group of 5 characters\n      const group = ciphertext.substr(i, 5);\n\n      // Get the plaintext character for the current group\n      const plaintextChar = baconianTable[group];\n\n      // Add the plaintext character to the plaintext\n      if (plaintextChar) {\n        plaintext += plaintextChar;\n      } else {\n        plaintext += group;\n      }\n    }\n    return plaintext;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Baconian Cipher is a substitution cipher that replaces each letter of the plaintext with a five-character binary string. It uses a binary encoding scheme to represent letters of the alphabet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encode using the Baconian Cipher, each letter of the plaintext is replaced by a five-character binary string according to a predefined encoding table. Typically, one set of characters is used to represent one binary digit (e.g., 'A' or 'B').\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: Each letter in the plaintext is replaced by a five-character binary string.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Binary Encoding: The Baconian Cipher utilizes a binary encoding scheme to represent letters, with each character typically representing one binary digit.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encoding Table: A predefined encoding table maps each letter of the alphabet to its corresponding five-character binary string.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Example: The plaintext letter 'A' might be encoded as \\\"AAAAA\\\" and 'B' as \\\"AAAAB\\\".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: baconianEncrypt,\n    decode: baconianDecrypt\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 10\n  }, this);\n}\n_s(BaconianCipher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BaconianCipher;\n;\nvar _c;\n$RefreshReg$(_c, \"BaconianCipher\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","BaconianCipher","ongetInfo","_s","baconianEncrypt","plaintext","baconianTable","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","toUpperCase","replace","ciphertext","i","length","baconianCode","baconianDecrypt","AAAAA","AAAAB","AAABA","AAABB","AABAA","AABAB","AABBA","AABBB","ABAAA","ABAAB","ABABA","ABABB","ABBAA","ABBAB","ABBBA","ABBBB","BAAAA","BAAAB","BAABA","BAABB","BABAA","BABAB","BABBA","BABBB","BBAAA","BBAAB","group","substr","plaintextChar","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","encode","decode","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Baconian.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function BaconianCipher({ongetInfo}) {\r\n\r\n  // Encryption function for Baconian Cipher\r\n  function baconianEncrypt(plaintext) {\r\n    // Define the Baconian Cipher lookup table\r\n    const baconianTable = {\r\n      A: \"AAAAA\",\r\n      B: \"AAAAB\",\r\n      C: \"AAABA\",\r\n      D: \"AAABB\",\r\n      E: \"AABAA\",\r\n      F: \"AABAB\",\r\n      G: \"AABBA\",\r\n      H: \"AABBB\",\r\n      I: \"ABAAA\",\r\n      J: \"ABAAB\",\r\n      K: \"ABABA\",\r\n      L: \"ABABB\",\r\n      M: \"ABBAA\",\r\n      N: \"ABBAB\",\r\n      O: \"ABBBA\",\r\n      P: \"ABBBB\",\r\n      Q: \"BAAAA\",\r\n      R: \"BAAAB\",\r\n      S: \"BAABA\",\r\n      T: \"BAABB\",\r\n      U: \"BABAA\",\r\n      V: \"BABAB\",\r\n      W: \"BABBA\",\r\n      X: \"BABBB\",\r\n      Y: \"BBAAA\",\r\n      Z: \"BBAAB\"\r\n    };\r\n\r\n    // Convert plaintext to uppercase and remove any spaces\r\n    plaintext = plaintext.toUpperCase().replace(/\\s/g, \"\");\r\n\r\n    // Initialize the ciphertext variable\r\n    let ciphertext = \"\";\r\n\r\n    // Loop through each character in the plaintext\r\n    for (let i = 0; i < plaintext.length; i++) {\r\n      // Get the Baconian code for the current character\r\n      const baconianCode = baconianTable[plaintext[i]];\r\n\r\n      // Add the Baconian code to the ciphertext\r\n      if (baconianCode) {\r\n        ciphertext += baconianCode;\r\n      } else {\r\n        ciphertext += plaintext[i];\r\n      }\r\n    }\r\n\r\n    return ciphertext;\r\n  }\r\n\r\n  // Decryption function for Baconian Cipher\r\n  function baconianDecrypt(ciphertext) {\r\n    // Define the Baconian Cipher lookup table\r\n    const baconianTable = {\r\n      AAAAA: \"A\",\r\n      AAAAB: \"B\",\r\n      AAABA: \"C\",\r\n      AAABB: \"D\",\r\n      AABAA: \"E\",\r\n      AABAB: \"F\",\r\n      AABBA: \"G\",\r\n      AABBB: \"H\",\r\n      ABAAA: \"I\",\r\n      ABAAB: \"J\",\r\n      ABABA: \"K\",\r\n      ABABB: \"L\",\r\n      ABBAA: \"M\",\r\n      ABBAB: \"N\",\r\n      ABBBA: \"O\",\r\n      ABBBB: \"P\",\r\n      BAAAA: \"Q\",\r\n      BAAAB: \"R\",\r\n      BAABA: \"S\",\r\n      BAABB: \"T\",\r\n      BABAA: \"U\",\r\n      BABAB: \"V\",\r\n      BABBA: \"W\",\r\n      BABBB: \"X\",\r\n      BBAAA: \"Y\",\r\n      BBAAB: \"Z\"\r\n    };\r\n\r\n    // Initialize the plaintext variable\r\n    let plaintext = \"\";\r\n\r\n    // Loop through the ciphertext in groups of 5 characters\r\n    for (let i = 0; i < ciphertext.length; i += 5) {\r\n      // Get the current group of 5 characters\r\n      const group = ciphertext.substr(i, 5);\r\n\r\n      // Get the plaintext character for the current group\r\n      const plaintextChar = baconianTable[group];\r\n\r\n      // Add the plaintext character to the plaintext\r\n      if (plaintextChar) {\r\n        plaintext += plaintextChar;\r\n      } else {\r\n        plaintext += group;\r\n      }\r\n    }\r\n\r\n    return plaintext;\r\n  }\r\n  \r\n  const showInformation = () => {\r\n    const info = (\r\n        <>\r\n            <p>\r\nThe Baconian Cipher is a substitution cipher that replaces each letter of the plaintext with a five-character binary string. It uses a binary encoding scheme to represent letters of the alphabet.\r\n</p>\r\n<p>\r\nTo encode using the Baconian Cipher, each letter of the plaintext is replaced by a five-character binary string according to a predefined encoding table. Typically, one set of characters is used to represent one binary digit (e.g., 'A' or 'B').\r\n</p>\r\n<ul>\r\n<li>Substitution Cipher: Each letter in the plaintext is replaced by a five-character binary string.</li>\r\n<li>Binary Encoding: The Baconian Cipher utilizes a binary encoding scheme to represent letters, with each character typically representing one binary digit.</li>\r\n<li>Encoding Table: A predefined encoding table maps each letter of the alphabet to its corresponding five-character binary string.</li>\r\n<li>Example: The plaintext letter 'A' might be encoded as \"AAAAA\" and 'B' as \"AAAAB\".</li>\r\n</ul>\r\n\r\n        </>\r\n    );\r\n    ongetInfo(info);\r\n};\r\n\r\nReact.useEffect(() => {\r\n    showInformation();\r\n}, []);\r\n\r\n  return <CipherFactory encode={baconianEncrypt} decode={baconianDecrypt} />\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,cAAcA,CAAC;EAACC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAElD;EACA,SAASC,eAAeA,CAACC,SAAS,EAAE;IAClC;IACA,MAAMC,aAAa,GAAG;MACptD;IACA,IAAIC,UAAU,GAAG,EAAE;;IAEnB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,SAAS,CAACgC,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC;MACA,MAAME,YAAY,GAAGhC,aAAa,CAACD,SAAS,CAAC+B,CAAC,CAAC,CAAC;;MAEhD;MACA,IAAIE,YAAY,EAAE;QAChBH,UAAU,IAAIG,YAAY;MAC5B,CAAC,MAAM;QACLH,UAAU,IAAI9B,SAAS,CAAC+B,CAAC,CAAC;MAC5B;IACF;IAEA,OAAOD,UAAU;EACnB;;EAEA;EACA,SAASI,eAAeA,CAACJ,UAAU,EAAE;IACnC;IACA,MAAM7B,aAAa,GAAG;MACpBkC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE,GAAG;MACVC,KAAK,EAAE;IACT,CAAC;;IAED;IACA,IAAI5D,SAAS,GAAG,EAAE;;IAElB;IACA,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC7C;MACA,MAAM8B,KAAK,GAAG/B,UAAU,CAACgC,MAAM,CAAC/B,CAAC,EAAE,CAAC,CAAC;;MAErC;MACA,MAAMgC,aAAa,GAAG9D,aAAa,CAAC4D,KAAK,CAAC;;MAE1C;MACA,IAAIE,aAAa,EAAE;QACjB/D,SAAS,IAAI+D,aAAa;MAC5B,CAAC,MAAM;QACL/D,SAAS,IAAI6D,KAAK;MACpB;IACF;IAEA,OAAO7D,SAAS;EAClB;EAEA,MAAMgE,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,IAAI,gBACNxE,OAAA,CAAAE,SAAA;MAAAuE,QAAA,gBACIzE,OAAA;QAAAyE,QAAA,EAAG;MAEf;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ7E,OAAA;QAAAyE,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ7E,OAAA;QAAAyE,QAAA,gBACAzE,OAAA;UAAAyE,QAAA,EAAI;QAAgG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzG7E,OAAA;UAAAyE,QAAA,EAAI;QAAyJ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClK7E,OAAA;UAAAyE,QAAA,EAAI;QAA+H;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxI7E,OAAA;UAAAyE,QAAA,EAAI;QAAiF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtF,CAAC;IAAA,eAEK,CACL;IACDzE,SAAS,CAACoE,IAAI,CAAC;EACnB,CAAC;EAED3E,KAAK,CAACiF,SAAS,CAAC,MAAM;IAClBP,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEJ,oBAAOvE,OAAA,CAACF,aAAa;IAACiF,MAAM,EAAEzE,eAAgB;IAAC0E,MAAM,EAAEvC;EAAgB;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5E;AAACxE,EAAA,CAxIuBF,cAAc;AAAA8E,EAAA,GAAd9E,cAAc;AAwIrC;AAAC,IAAA8E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}