{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\ADFGVX.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ADFGVX({\n  ongetInfo\n}) {\n  _s();\n  const [alphabet, setAlphabet] = useState('');\n  function generateGrid(key) {\n    key = String(key); // Convert key to string to ensure it's iterable\n    key = [...new Set(key)].sort((a, b) => key.indexOf(a) - key.indexOf(b)).join('');\n    const alphabet = 'ADFGVX';\n    const grid = [];\n    for (let char of key) {\n      const row = [char];\n      for (let letter of alphabet) {\n        if (letter === char) continue;\n        row.push(alphabet[(alphabet.indexOf(char) + alphabet.indexOf(letter)) % 6]);\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n  function encode(message, key) {\n    message = message.toUpperCase().replace(/\\s/g, '');\n    const grid = generateGrid(key);\n    let cipher = '';\n    for (let char of message) {\n      for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n          if (grid[i][j] === char) {\n            cipher += 'ADFGVX'[i] + 'ADFGVX'[j];\n            break;\n          }\n        }\n      }\n    }\n    return cipher;\n  }\n  function decode(cipher, key) {\n    const grid = generateGrid(key);\n    let message = '';\n    for (let i = 0; i < cipher.length; i += 2) {\n      const row = 'ADFGVX'.indexOf(cipher[i]);\n      const col = 'ADFGVX'.indexOf(cipher[i + 1]);\n      message += grid[row][col];\n    }\n    return message;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ADFGVX cipher is a field cipher used by the German Army during World War I.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ADFGVX cipher, a Polybius square and a transposition cipher are combined.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: The plaintext is first converted into pairs of ADFGVX characters based on their positions in a Polybius square.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Transposition: The resulting pairs are then reordered according to a keyword.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: The final result is the encrypted ciphertext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The ciphertext is reordered according to the keyword to retrieve the pairs of ADFGVX characters, which are then converted back into plaintext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentC: alphabet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: alphabet,\n      onChange: e => setAlphabet(e.target.value),\n      placeholder: \"Enter Alphabet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ADFGVX, \"eZg4clxqndPBa+gIEWUuEghPq8I=\");\n_c = ADFGVX;\n;\nvar _c;\n$RefreshReg$(_c, \"ADFGVX\");","map":{"version":3,"names":["React","useState","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","ADFGVX","ongetInfo","_s","alphabet","setAlphabet","generateGrid","key","String","Set","sort","a","b","indexOf","join","grid","char","row","letter","push","encode","message","toUpperCase","replace","cipher","i","length","j","decode","col","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentC","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/ADFGVX.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function ADFGVX({ ongetInfo }) {\r\n    const [alphabet, setAlphabet] = useState('');\r\n\r\n    function generateGrid(key) {\r\n        key = String(key); // Convert key to string to ensure it's iterable\r\n        key = [...new Set(key)].sort((a, b) => key.indexOf(a) - key.indexOf(b)).join('');\r\n        const alphabet = 'ADFGVX';\r\n        const grid = [];\r\n        for (let char of key) {\r\n            const row = [char];\r\n            for (let letter of alphabet) {\r\n                if (letter === char) continue;\r\n                row.push(alphabet[(alphabet.indexOf(char) + alphabet.indexOf(letter)) % 6]);\r\n            }\r\n            grid.push(row);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    function encode(message, key) {\r\n        message = message.toUpperCase().replace(/\\s/g, '');\r\n        const grid = generateGrid(key);\r\n        let cipher = '';\r\n        for (let char of message) {\r\n            for (let i = 0; i < grid.length; i++) {\r\n                for (let j = 0; j < grid[i].length; j++) {\r\n                    if (grid[i][j] === char) {\r\n                        cipher += 'ADFGVX'[i] + 'ADFGVX'[j];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return cipher;\r\n    }\r\n\r\n    function decode(cipher, key) {\r\n        const grid = generateGrid(key);\r\n        let message = '';\r\n        for (let i = 0; i < cipher.length; i += 2) {\r\n            const row = 'ADFGVX'.indexOf(cipher[i]);\r\n            const col = 'ADFGVX'.indexOf(cipher[i + 1]);\r\n            message += grid[row][col];\r\n        }\r\n        return message;\r\n    }\r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The ADFGVX cipher is a field cipher used by the German Army during World War I.\r\n                </p>\r\n                <p>\r\n                    To encrypt using the ADFGVX cipher, a Polybius square and a transposition cipher are combined.\r\n                </p>\r\n                <ul>\r\n                    <li>Substitution Cipher: The plaintext is first converted into pairs of ADFGVX characters based on their positions in a Polybius square.</li>\r\n                    <li>Transposition: The resulting pairs are then reordered according to a keyword.</li>\r\n                    <li>Encryption: The final result is the encrypted ciphertext.</li>\r\n                    <li>Decryption: The ciphertext is reordered according to the keyword to retrieve the pairs of ADFGVX characters, which are then converted back into plaintext.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <CipherFactory encode={encode} decode={decode} keyComponentC={alphabet} />\r\n            <input\r\n                type=\"text\"\r\n                value={alphabet}\r\n                onChange={(e) => setAlphabet(e.target.value)}\r\n                placeholder=\"Enter Alphabet\"\r\n            />\r\n        </>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,SAASC,MAAMA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,SAASW,YAAYA,CAACC,GAAG,EAAE;IACvBA,GAAG,GAAGC,MAAM,CAACD,GAAG,CAAC,CAAC,CAAC;IACnBA,GAAG,GAAG,CAAC,GAAG,IAAIE,GAAG,CAACF,GAAG,CAAC,CAAC,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKL,GAAG,CAACM,OAAO,CAACF,CAAC,CAAC,GAAGJ,GAAG,CAACM,OAAO,CAACD,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;IAChF,MAAMV,QAAQ,GAAG,QAAQ;IACzB,MAAMW,IAAI,GAAG,EAAE;IACf,KAAK,IAAIC,IAAI,IAAIT,GAAG,EAAE;MAClB,MAAMU,GAAG,GAAG,CAACD,IAAI,CAAC;MAClB,KAAK,IAAIE,MAAM,IAAId,QAAQ,EAAE;QACzB,IAAIc,MAAM,KAAKF,IAAI,EAAE;QACrBC,GAAG,CAACE,IAAI,CAACf,QAAQ,CAAC,CAACA,QAAQ,CAACS,OAAO,CAACG,IAAI,CAAC,GAAGZ,QAAQ,CAACS,OAAO,CAACK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;MAC/E;MACAH,IAAI,CAACI,IAAI,CAACF,GAAG,CAAC;IAClB;IACA,OAAOF,IAAI;EACf;EAEA,SAASK,MAAMA,CAACC,OAAO,EAAEd,GAAG,EAAE;IAC1Bc,OAAO,GAAGA,OAAO,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAClD,MAAMR,IAAI,GAAGT,YAAY,CAACC,GAAG,CAAC;IAC9B,IAAIiB,MAAM,GAAG,EAAE;IACf,KAAK,IAAIR,IAAI,IAAIK,OAAO,EAAE;MACtB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,IAAI,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;QAClC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,IAAI,CAACU,CAAC,CAAC,CAACC,MAAM,EAAEC,CAAC,EAAE,EAAE;UACrC,IAAIZ,IAAI,CAACU,CAAC,CAAC,CAACE,CAAC,CAAC,KAAKX,IAAI,EAAE;YACrBQ,MAAM,IAAI,QAAQ,CAACC,CAAC,CAAC,GAAG,QAAQ,CAACE,CAAC,CAAC;YACnC;UACJ;QACJ;MACJ;IACJ;IACA,OAAOH,MAAM;EACjB;EAEA,SAASI,MAAMA,CAACJ,MAAM,EAAEjB,GAAG,EAAE;IACzB,MAAMQ,IAAI,GAAGT,YAAY,CAACC,GAAG,CAAC;IAC9B,IAAIc,OAAO,GAAG,EAAE;IAChB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACvC,MAAMR,GAAG,GAAG,QAAQ,CAACJ,OAAO,CAACW,MAAM,CAACC,CAAC,CAAC,CAAC;MACvC,MAAMI,GAAG,GAAG,QAAQ,CAAChB,OAAO,CAACW,MAAM,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC;MAC3CJ,OAAO,IAAIN,IAAI,CAACE,GAAG,CAAC,CAACY,GAAG,CAAC;IAC7B;IACA,OAAOR,OAAO;EAClB;EAEA,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMC,IAAI,gBACNjC,OAAA,CAAAE,SAAA;MAAAgC,QAAA,gBACIlC,OAAA;QAAAkC,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJtC,OAAA;QAAAkC,QAAA,EAAG;MAEH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJtC,OAAA;QAAAkC,QAAA,gBACIlC,OAAA;UAAAkC,QAAA,EAAI;QAAoI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7ItC,OAAA;UAAAkC,QAAA,EAAI;QAA6E;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtFtC,OAAA;UAAAkC,QAAA,EAAI;QAAyD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClEtC,OAAA;UAAAkC,QAAA,EAAI;QAA0J;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnK,CAAC;IAAA,eACP,CACL;IACDlC,SAAS,CAAC6B,IAAI,CAAC;EACnB,CAAC;EAEDrC,KAAK,CAAC2C,SAAS,CAAC,MAAM;IAClBP,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIhC,OAAA,CAAAE,SAAA;IAAAgC,QAAA,gBACIlC,OAAA,CAACF,aAAa;MAACwB,MAAM,EAAEA,MAAO;MAACQ,MAAM,EAAEA,MAAO;MAACU,aAAa,EAAElC;IAAS;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1EtC,OAAA;MACIyC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEpC,QAAS;MAChBqC,QAAQ,EAAGC,CAAC,IAAKrC,WAAW,CAACqC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC7CI,WAAW,EAAC;IAAgB;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA,eACJ,CAAC;AAEX;AAACjC,EAAA,CAlFuBF,MAAM;AAAA4C,EAAA,GAAN5C,MAAM;AAkF7B;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}