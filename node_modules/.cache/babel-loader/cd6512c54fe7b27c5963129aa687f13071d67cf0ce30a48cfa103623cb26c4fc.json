{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\Alberti.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CipherFactory from '../../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Alberti({\n  ongetInfo\n}) {\n  _s();\n  function createAlphabet() {\n    const alphabet = [];\n    for (let i = 0; i < 26; i++) {\n      alphabet.push(String.fromCharCode(65 + i));\n    }\n    return alphabet;\n  }\n  function createMixedAlphabet(key) {\n    const mixedAlphabet = key.split('');\n    const remainingLetters = createAlphabet().filter(letter => !mixedAlphabet.includes(letter));\n    return mixedAlphabet.concat(remainingLetters);\n  }\n  function createCipherKey(mixedAlphabet, rotation) {\n    return mixedAlphabet.slice(rotation).concat(mixedAlphabet.slice(0, rotation));\n  }\n  function encode(message, key, rotation) {\n    const alphabet = createAlphabet();\n    const mixedAlphabet = createMixedAlphabet(key.toUpperCase());\n    const cipherKey = createCipherKey(mixedAlphabet, rotation);\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n      const index = alphabet.indexOf(message[i].toUpperCase());\n      if (index !== -1) {\n        encodedMessage += cipherKey[index];\n      } else {\n        encodedMessage += message[i]; // If the character is not in the alphabet, keep it unchanged\n      }\n    }\n    return encodedMessage;\n  }\n  function decode(ciphertext, key, rotation) {\n    const alphabet = createAlphabet();\n    const mixedAlphabet = createMixedAlphabet(key.toUpperCase());\n    const cipherKey = createCipherKey(mixedAlphabet, rotation);\n    let decodedMessage = '';\n    for (let i = 0; i < ciphertext.length; i++) {\n      const index = cipherKey.indexOf(ciphertext[i].toUpperCase());\n      if (index !== -1) {\n        decodedMessage += alphabet[index];\n      } else {\n        decodedMessage += ciphertext[i]; // If the character is not in the cipher key, keep it unchanged\n      }\n    }\n    return decodedMessage;\n  }\n  const showInformation = () => {\n    const info = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The ADFGVX cipher is a field cipher used by the German Army during World War I.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To encrypt using the ADFGVX cipher, a Polybius square and a transposition cipher are combined.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Substitution Cipher: The plaintext is first converted into pairs of ADFGVX characters based on their positions in a Polybius square.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Transposition: The resulting pairs are then reordered according to a keyword.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Encryption: The final result is the encrypted ciphertext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Decryption: The ciphertext is reordered according to the keyword to retrieve the pairs of ADFGVX characters, which are then converted back into plaintext.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n    ongetInfo(info);\n  };\n  React.useEffect(() => {\n    showInformation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CipherFactory, {\n      encode: encode,\n      decode: decode,\n      keyComponentA: 'KEY A',\n      keyComponentB: 'KEY B'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Alberti, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Alberti;\n;\nvar _c;\n$RefreshReg$(_c, \"Alberti\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","Fragment","_Fragment","Alberti","ongetInfo","_s","createAlphabet","alphabet","i","push","String","fromCharCode","createMixedAlphabet","key","mixedAlphabet","split","remainingLetters","filter","letter","includes","concat","createCipherKey","rotation","slice","encode","message","toUpperCase","cipherKey","encodedMessage","length","index","indexOf","decode","ciphertext","decodedMessage","showInformation","info","children","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","keyComponentA","keyComponentB","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/Alberti.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../../ui/EncryptDecrypt';\r\n\r\nexport default function Alberti({ ongetInfo }) {\r\n\r\n    function createAlphabet() {\r\n        const alphabet = [];\r\n        for (let i = 0; i < 26; i++) {\r\n            alphabet.push(String.fromCharCode(65 + i));\r\n        }\r\n        return alphabet;\r\n    }\r\n    \r\n    function createMixedAlphabet(key) {\r\n        const mixedAlphabet = key.split('');\r\n        const remainingLetters = createAlphabet().filter(letter => !mixedAlphabet.includes(letter));\r\n        return mixedAlphabet.concat(remainingLetters);\r\n    }\r\n    \r\n    function createCipherKey(mixedAlphabet, rotation) {\r\n        return mixedAlphabet.slice(rotation).concat(mixedAlphabet.slice(0, rotation));\r\n    }\r\n    \r\n    function encode(message, key, rotation) {\r\n        const alphabet = createAlphabet();\r\n        const mixedAlphabet = createMixedAlphabet(key.toUpperCase());\r\n        const cipherKey = createCipherKey(mixedAlphabet, rotation);\r\n    \r\n        let encodedMessage = '';\r\n        for (let i = 0; i < message.length; i++) {\r\n            const index = alphabet.indexOf(message[i].toUpperCase());\r\n            if (index !== -1) {\r\n                encodedMessage += cipherKey[index];\r\n            } else {\r\n                encodedMessage += message[i]; // If the character is not in the alphabet, keep it unchanged\r\n            }\r\n        }\r\n        return encodedMessage;\r\n    }\r\n    \r\n    function decode(ciphertext, key, rotation) {\r\n        const alphabet = createAlphabet();\r\n        const mixedAlphabet = createMixedAlphabet(key.toUpperCase());\r\n        const cipherKey = createCipherKey(mixedAlphabet, rotation);\r\n    \r\n        let decodedMessage = '';\r\n        for (let i = 0; i < ciphertext.length; i++) {\r\n            const index = cipherKey.indexOf(ciphertext[i].toUpperCase());\r\n            if (index !== -1) {\r\n                decodedMessage += alphabet[index];\r\n            } else {\r\n                decodedMessage += ciphertext[i]; // If the character is not in the cipher key, keep it unchanged\r\n            }\r\n        }\r\n        return decodedMessage;\r\n    }\r\n    \r\n\r\n    const showInformation = () => {\r\n        const info = (\r\n            <>\r\n                <p>\r\n                    The ADFGVX cipher is a field cipher used by the German Army during World War I.\r\n                </p>\r\n                <p>\r\n                    To encrypt using the ADFGVX cipher, a Polybius square and a transposition cipher are combined.\r\n                </p>\r\n                <ul>\r\n                    <li>Substitution Cipher: The plaintext is first converted into pairs of ADFGVX characters based on their positions in a Polybius square.</li>\r\n                    <li>Transposition: The resulting pairs are then reordered according to a keyword.</li>\r\n                    <li>Encryption: The final result is the encrypted ciphertext.</li>\r\n                    <li>Decryption: The ciphertext is reordered according to the keyword to retrieve the pairs of ADFGVX characters, which are then converted back into plaintext.</li>\r\n                </ul>\r\n            </>\r\n        );\r\n        ongetInfo(info);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        showInformation();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <CipherFactory encode={encode} decode={decode} keyComponentA={'KEY A'} keyComponentB={'KEY B'} />\r\n        </>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}