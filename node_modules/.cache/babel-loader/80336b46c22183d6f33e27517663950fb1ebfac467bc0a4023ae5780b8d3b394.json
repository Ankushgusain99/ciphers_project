{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ankus\\\\OneDrive\\\\Desktop\\\\Pro\\\\ciphers\\\\src\\\\components\\\\ciphers\\\\binary.js\";\nimport React from 'react';\nimport CipherFactory from '../ui/EncryptDecrypt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BinaryEncoding() {\n  function encode(str) {\n    let result = '';\n    for (let i = 0; i < str.length; i++) {\n      result += str[i].charCodeAt(0).toString(2) + ' ';\n    }\n    return result;\n  }\n  function decode(bin) {\n    let result = '';\n    let binArray = bin.split(' ');\n    for (let i = 0; i < binArray.length; i++) {\n      result += String.fromCharCode(parseInt(binArray[i], 2));\n    }\n    return result;\n  }\n  return /*#__PURE__*/_jsxDEV(CipherFactory, {\n    encode: encode,\n    decode: decode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 14\n  }, this);\n}\n_c = BinaryEncoding;\n;\nvar _c;\n$RefreshReg$(_c, \"BinaryEncoding\");","map":{"version":3,"names":["React","CipherFactory","jsxDEV","_jsxDEV","BinaryEncoding","encode","str","result","i","length","charCodeAt","toString","decode","bin","binArray","split","String","fromCharCode","parseInt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ankus/OneDrive/Desktop/Pro/ciphers/src/components/ciphers/binary.js"],"sourcesContent":["import React from 'react';\r\nimport CipherFactory from '../ui/EncryptDecrypt';\r\n\r\nexport default function BinaryEncoding() {\r\n    function encode(str) {\r\n        let result = '';\r\n        for (let i = 0; i < str.length; i++) {\r\n          result += str[i].charCodeAt(0).toString(2) + ' ';\r\n        }\r\n        return result;\r\n      }\r\n      \r\n      function decode(bin) {\r\n        let result = '';\r\n        let binArray = bin.split(' ');\r\n        for (let i = 0; i < binArray.length; i++) {\r\n          result += String.fromCharCode(parseInt(binArray[i], 2));\r\n        }\r\n        return result;\r\n      }\r\n      \r\n      return <CipherFactory encode={encode} decode={decode} />\r\n\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,eAAe,SAASC,cAAcA,CAAA,EAAG;EACrC,SAASC,MAAMA,CAACC,GAAG,EAAE;IACjB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCD,MAAM,IAAID,GAAG,CAACE,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG;IAClD;IACA,OAAOJ,MAAM;EACf;EAEA,SAASK,MAAMA,CAACC,GAAG,EAAE;IACnB,IAAIN,MAAM,GAAG,EAAE;IACf,IAAIO,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;IAC7B,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,QAAQ,CAACL,MAAM,EAAED,CAAC,EAAE,EAAE;MACxCD,MAAM,IAAIS,MAAM,CAACC,YAAY,CAACC,QAAQ,CAACJ,QAAQ,CAACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzD;IACA,OAAOD,MAAM;EACf;EAEA,oBAAOJ,OAAA,CAACF,aAAa;IAACI,MAAM,EAAEA,MAAO;IAACO,MAAM,EAAEA;EAAO;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE9D;AAACC,EAAA,GApBuBnB,cAAc;AAoBrC;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}